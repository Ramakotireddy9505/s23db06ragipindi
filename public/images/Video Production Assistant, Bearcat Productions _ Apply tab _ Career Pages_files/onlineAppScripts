/* Minification failed. Returning unminified contents.
(1207,88-89): run-time error JS1195: Expected expression: >
(1216,54-55): run-time error JS1195: Expected expression: )
(1223,41-49): run-time error JS1193: Expected ',' or ')': function
(1223,68-69): run-time error JS1004: Expected ';': {
(1227,37-38): run-time error JS1002: Syntax error: }
(1241,13-14): run-time error JS1002: Syntax error: }
(1330,5-6): run-time error JS1002: Syntax error: }
(1334,5-6): run-time error JS1195: Expected expression: }
(1338,30-31): run-time error JS1004: Expected ';': {
(1743,2-3): run-time error JS1195: Expected expression: )
(1745,31-32): run-time error JS1004: Expected ';': {
(1889,2-3): run-time error JS1195: Expected expression: )
(1890,30-31): run-time error JS1004: Expected ';': {
(1994,2-3): run-time error JS1195: Expected expression: )
(1994,11-12): run-time error JS1197: Too many errors. The file might not be a JavaScript file: ;
 */
/* Minification failed. Returning unminified contents.
(1190,88-89): run-time error JS1195: Expected expression: >
(1199,54-55): run-time error JS1195: Expected expression: )
(1206,41-49): run-time error JS1193: Expected ',' or ')': function
(1206,68-69): run-time error JS1004: Expected ';': {
(1210,37-38): run-time error JS1002: Syntax error: }
(1224,13-14): run-time error JS1002: Syntax error: }
(1313,5-6): run-time error JS1002: Syntax error: }
(1317,5-6): run-time error JS1195: Expected expression: }
(1321,30-31): run-time error JS1004: Expected ';': {
(1726,2-3): run-time error JS1195: Expected expression: )
(1728,31-32): run-time error JS1004: Expected ';': {
(1872,2-3): run-time error JS1195: Expected expression: )
(1873,30-31): run-time error JS1004: Expected ';': {
(1977,2-3): run-time error JS1195: Expected expression: )
(1977,11-12): run-time error JS1197: Too many errors. The file might not be a JavaScript file: ;
 */
(function(window, undefined) {

    function ApplicationTimingService() {
        var applicationTabsLabels = {
            resume: 'Resume',
            profile: 'Profile',
            info: 'General Info',
            work: 'Work Experience',
            education: 'Education',
            additional: 'Additional',
            references: 'References',
            attachments: 'Attachments',
            questions: 'Questions',
            review: 'Review',
            payment: 'Payment',
            submit: 'Submit'
        };

        var isTimerInitialized = false;

        var applicationStartTime;

        var applicationTabTimings;

        var lastActiveTabName;

        function updateLastVisitedTabTime() {
            if (lastActiveTabName) {
                applicationTabTimings[lastActiveTabName].timeSpent += Date.now() - applicationTabTimings[lastActiveTabName].lastActivatingTimeSpan;
            }
        }

        function startOrUpdateTimer(tab) {
            updateLastVisitedTabTime();

            if (!applicationTabTimings[tab]) {
                applicationTabTimings[tab] = {
                    lastActivatingTimeSpan: Date.now(),
                    timeSpent: 0
                }
            } else {
                applicationTabTimings[tab].lastActivatingTimeSpan = Date.now();
            }

            lastActiveTabName = tab;
        }

        function sendTimings() {
            updateLastVisitedTabTime();

            var wholeApplicationTime = Date.now() - applicationStartTime;

            var analytics = gJobs && gJobs.common && gJobs.common.analytics ? gJobs.common.analytics : null;
            if (analytics && analytics.categories && analytics.trackTiming) {
                var appSubmissionCategory = analytics.categories.appSubmission;
                
                for (var tabName in applicationTabTimings) {
                    if (applicationTabTimings.hasOwnProperty(tabName)) {
                        analytics.trackTiming(appSubmissionCategory,
                            applicationTabsLabels[tabName],
                            applicationTabTimings[tabName].timeSpent);
                    }
                }

                analytics.trackTiming(appSubmissionCategory, 'Whole Application', wholeApplicationTime);
            }
        }

        function dispose() {
            $(document).off(OnlineApp.Events.CommonEventsNames.TabActivated);
            $(document).off(Events.CommonEventsNames.ApplicationSubmitted, submitApplicationHandler);
            $(document).off(OnlineApp.Events.CommonEventsNames.ApplicationClosed, dispose);

            applicationStartTime = undefined;
            applicationTabTimings = undefined;
            lastActiveTabName = undefined;

            isTimerInitialized = false;
        }

        function submitApplicationHandler() {
            sendTimings();
            dispose();
        }

        return {
            init: function() {
                if (isTimerInitialized) {
                    return;
                }

                applicationStartTime = Date.now();
                applicationTabTimings = {};
                lastActiveTabName = undefined;
                
                $(document).on(OnlineApp.Events.CommonEventsNames.TabActivated, function(e) {
                    if (e.tabCode) {
                        startOrUpdateTimer(e.tabCode);
                    }
                });

                $(document).on(Events.CommonEventsNames.ApplicationSubmitted, submitApplicationHandler);

                $(document).on(OnlineApp.Events.CommonEventsNames.ApplicationClosed, dispose);

                isTimerInitialized = true;
            }
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.Services', {
        applicationTimingService: new ApplicationTimingService()
    });
})(window);;
(function(window, undefined) {
    'use strict';

    function NotificationController() {
        var self = this;

        self.showNotification = function(settings) {
            $(document).trigger(
                Events.CommonEventsNames.ShowConfirmDialog,
                settings
            );
        };

        self.showAppIncompleteNotification = function (confirmCallback) {
            self.showNotification({
                additionalCssClassName: "leave-incomplete-app-popup",
                header: "You are leaving the application process.",
                subHeader: "Do you want to proceed?",
                cancelButtonText: "Don't leave",
                confirmButtonText: "Leave Application",
                confirmClick: confirmCallback
            });
        };

        self.showDeleteItemNotification = function(confirmCallback, cancelCallback) {
            self.showNotification({
                header: "You are about to delete an item",
                subHeader: "Are you sure you would like to delete the item?\nRemember, this cannot be undone.",
                cancelButtonText: "No",
                confirmButtonText: "Yes",
                confirmClick: confirmCallback,
                cancelClick: cancelCallback
            });
        };

        self.showConfirmNavigationNotification = function (confirmCallback, cancelCallback, subheaderText, headerText) {
            subheaderText = subheaderText || "You have unsaved changes.";
            self.showNotification({
                header: headerText || "Confirm Navigation",
                subHeader: subheaderText + " Are you sure you want to leave this page?",
                cancelButtonText: "Stay on this Page",
                confirmButtonText: "Leave this Page",
                confirmClick: confirmCallback,
                cancelClick: cancelCallback
            });
        };

        self.showCreateNewAccountNotification = function(confirmCallback, cancelCallback) {
            self.showNotification({
                additionalCssClassName: "create-account-popup",
                header: "Create Account",
                subHeader: "Your username and password is confidential. Sharing your account with others is not permitted under any circumstances. If you are not the original owner of this account, you must stop using this account and create an account of your own. Violations may result in account suspension or removal.",
                confirmButtonText: "Create Account",
                cancelButtonText: "Cancel button",
                confirmClick: confirmCallback,
                cancelClick: cancelCallback
            });
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.Controllers', {
        NotificationController: NotificationController,
        notificationController: new NotificationController()
    });
})(window);;
(function (window, undefined) {
    'use strict';

    /* base class for online app controllers */
    function MenuController() {
        var self = this;

        self.activateFirstTab = function () { };

        self.activateTabById = function (id) { };

        self.updateMenuState = function (selectedTabLink) { };

        return self;
    }


    var containerSelector = '.onlineapp-app-container',
        aria = gJobs.ariaAttributes;

    function SideBarMenuController() {
        var self = MenuController.apply(this, arguments) || this;

        var menuSelector = 'ul.left-menu-nav';

        var activate = function (tabSelector) {
            var $container = $(containerSelector);
            var $menu = $container.find(menuSelector);

            if (gJobs.browserDetector.isIE()) {
                gJobs.pageTabNavigationService.adjustNavigationForFixedHeader($menu);
            }

            // if menu is visible - set first tab as active tab
            if ($menu.is(':visible')) {
                var tabLink = $menu.find(tabSelector);
                tabLink.tab('show');

                // activate tab pane
                $(tabLink.attr('href')).addClass('active');
            }
        };

        self.activateFirstTab = function () {
            activate('a:first');
        };

        self.activateTabById = function (id) {
            activate('a[href="#' + id + '"]');
        };

        self.updateMenuState = function (selectedTabLink) {
            var $container = $(containerSelector);
            var $menu = $container.find(menuSelector);

            if (!$menu.is(':visible')) {
                $menu.find('li.active').removeClass('active');
                $menu.find('a[href="' + selectedTabLink + '"]').closest('li').addClass('active').click();
            }
        };

        return self;
    }

    function DropDownMenuController() {
        var self = MenuController.apply(this, arguments) || this;

        var menuSelector = '.dropdown-nav';
        var menuListSelector = '.dropdown-menu';

        var fixDropDown = function ($item) {
            var $dropdown = $item.parents().find('li.dropdown');

            $dropdown.find('.dropdown-toggle span').html($item.find('a').html());

            $dropdown.find('> .dropdown-menu > li').not($item).removeClass('active');
            $item.addClass('active');
        };

        var activate = function (tabSelector) {
            var $container = $(containerSelector);
            var $menu = $container.find(menuSelector);

            // if menu is visible - set tab as active
            var tabLink = $menu.find(menuListSelector).find(tabSelector);
            if ($menu.is(':visible')) {
                tabLink.tab('show');
            }
        };

        self.activateFirstTab = function () {
            activate('a:first');
        };

        self.activateTabById = function (id) {
            activate('a[href="#' + id + '"]');
        };

        self.updateMenuState = function (selectedTabLink) {
            var $container = $(containerSelector);
            var $menu = $container.find(menuSelector);

            var tabLink = $menu.find('a[href="' + selectedTabLink + '"]');
            fixDropDown(tabLink.closest('li').click());
        };

        return self;
    }

    function NavigationMenuController() {
        var self = this;

        var notificationController = OnlineApp.Controllers.notificationController;

        self.leftMenuController = new SideBarMenuController();
        self.topMenuController = new DropDownMenuController();

        self.tabIds = {
            generalInfo: '#general-info-tab',
            work: '#work-tab',
            education: '#education-tab',
            questions: '#questions-tab',
            additionalInfo: '#additional-info-tab',
            referencesInfo: '#references-tab',
            attachmentsInfo: '#attachments-tab',
            reviewInfo: '#review-tab',
            submitInfo: '#submit-tab',
            payment: '#payment-tab'
        };

        self.initialize = function () {

            var isTabShowingFirstTime = true;

            self.onTab('shown', function (e, data) {
                var $targetLink = $(e.target);
                var tabLink = $targetLink.attr('href');
                var tabHeader = $(tabLink).find('.page-header');
                var tabCode = $targetLink.data('code');
                var tabName = $targetLink.find('.tab-name').text();
                var activeTab = self.getActiveTab().tab;
                var hasNotification = tabLink === self.tabIds.reviewInfo;
                var notificationContainer = activeTab.find('.description.notification');
                var hasInstruction = !!notificationContainer.length;
                if (!hasInstruction || hasNotification) {
                    notificationContainer = $('#screen-reader-message');
                }

                self.leftMenuController.updateMenuState(tabLink);

                self.topMenuController.updateMenuState(tabLink);

                var notificationText = tabHeader.length
                    ? 'You are now on ' + tabName + ' section. ' + tabHeader.filter(':visible').get(0).outerText + ' block'
                    : tabName + ' section';

                notificationText += ' is opened. ';

                var $additionalInfoElements = $targetLink.find('.additional-information');
                
                if ($additionalInfoElements.length) {
                    notificationText += $additionalInfoElements.text();
                }

                $targetLink.closest('ul').find('a').removeAttr(aria.describedBy);

                if (hasInstruction && !hasNotification) {
                    $targetLink.setAttributes([
                        [ aria.describedBy, notificationContainer.attr('id') ]
                    ]);
                }

                notificationText = notificationText.replace(/\s{2,}/g, ' ');

                gJobs.screenReadersService.silenceScreenreader();

                gJobs.screenReadersService.setNotificationOnElement({
                    text: notificationText,
                    $element: $targetLink
                });

                if (isTabShowingFirstTime) {
                    gJobs.screenReadersService.setAriaLiveNotification(notificationText);
                   
                    isTabShowingFirstTime = false;
                }

                $(document).trigger('layoutUpdated');

                var event = jQuery.Event(OnlineApp.Events.CommonEventsNames.TabActivated);
                event.tabCode = tabCode;
                $(document).trigger(event);

                $('.application-container').scrollTop(0);
            });
        };

        self.attachHandlersToNextBtns = function (canNavigateAway) {

            $(containerSelector).find('.tab-content .btn-next')
                // clear previous events if they exist
                .off('click')
                // navigate next btns functionality (submit tab has its own implementation)
                .on('click', function (e) {
                    var menuLis = $(containerSelector).find('ul.nav-tabs li');
                    var active = menuLis.filter('.active');
                    var currentIndex = menuLis.index(active);
                    var nextMenuItem = menuLis.get(currentIndex + 1);
                    var newTabName = $(nextMenuItem).find('a').attr('href');
                    var tabName = active.find('.tab-name').text();

                    var showNextTab = function () {
                        var event = jQuery.Event('showNextTab');

                        event.callback = function () {
                            $(nextMenuItem).find('a').tab('show');
                        };
                        event.viewModel = ko.contextFor($(menuLis.get(currentIndex)).find('a').get(0)).$data;
                        $(nextMenuItem).find('a').trigger(event);
                    }

                    if (nextMenuItem) {
                        var previousViewModel = self.getActiveViewModel();
                        var isViewModelEditable = $.isFunction(previousViewModel.isInEditMode);

                        var isCanNavigateAwayFunc = canNavigateAway && $.isFunction(canNavigateAway);
                        if (isCanNavigateAwayFunc && isViewModelEditable) {
                            var canNavigate = canNavigateAway(previousViewModel);

                            if (!canNavigate) {
                                var confirmCallback = function() {
                                    if ($.isFunction(previousViewModel.discardChanges)) {
                                        e.dontScrollAfterEditing = true;
                                        previousViewModel.discardChanges(null, e);
                                    }

                                    previousViewModel.isVisited(true);

                                    showNextTab(newTabName);
                                };
                                
                                var cancelCallback = function() {
                                    OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement();
                                }


                                notificationController.showConfirmNavigationNotification(
                                    confirmCallback,
                                    cancelCallback
                                );

                                return false;
                            }
                        }

                        previousViewModel.isVisited(true);
                        if (previousViewModel.showCheckValidationIcon &&
                            previousViewModel.showCheckValidationIcon()) {

                            gJobs.screenReadersService.setAriaLiveNotification(
                                tabName + ' section has been successfully completed.'
                            );
                        }

                        // timeout is neccessary as otherwise setAriaLiveNotification from self.onTab() would override this one
                        showNextTab(nextMenuItem);
                    }
                });
        };

        self.attachHandlersToNavigationMenu = function (
                canNavigateAway,
                canNavigateAwayCallback,
                canNavigateToTab,
                canNotNavigateToTabCallback) {

            self.onTab('click', function (e) {
                if (e.target) {
                    var activeTabData = self.getActiveTab();
                    var $activeMenuItem = $('[href="#' + activeTabData.tabId + '"]', containerSelector);
                    var tabName = $($activeMenuItem[0]).find('.tab-name').text();

                    var previousViewModel = ko.contextFor($activeMenuItem[0]).$data;

                    var isViewModelEditable = $.isFunction(previousViewModel.isInEditMode);
                    
                    var $target = $(e.target);
                    var newTabName = $target.attr('href');

                    if (!newTabName) {
                        newTabName = $target.closest('[data-toggle="tab"]').attr('href');
                    }

                    if (newTabName === '#' + activeTabData.tabId) {
                        e.stopPropagation();
                        e.preventDefault();
                        return false;
                    }

                    if (isViewModelEditable) {

                        var canNavigate = canNavigateAway(previousViewModel);

                        if ($.isFunction(canNavigateToTab) && !canNavigateToTab(newTabName)) {
                            if ($.isFunction(canNotNavigateToTabCallback)) {
                                canNotNavigateToTabCallback(newTabName);
                            }
                            e.stopPropagation();
                            e.preventDefault();

                            if (!canNavigate) {
                                OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement();
                            }

                            return false;
                        }

                        if (!canNavigate) {

                            var confirmCallback = function() {
                                if ($.isFunction(previousViewModel.discardChanges)) {
                                    e.dontScrollAfterEditing = true;
                                    previousViewModel.discardChanges(null, e);
                                }

                                previousViewModel.isVisited(true);

                                newTabName = newTabName.substr(1, newTabName.length - 1);
                                self.activateTabById(newTabName);
                            }

                            var cancelCallback = function() {
                                OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement();
                            }

                            var isQuestionsOrAttachmentsTab =
                                '#' + activeTabData.tabId === self.tabIds.questions ||
                                '#' + activeTabData.tabId === self.tabIds.attachmentsInfo;

                            if (!isQuestionsOrAttachmentsTab && !previousViewModel.isDataChanged()) {
                                confirmCallback();
                            } else {
                                var subHeaderText, headerText;

                                if (isQuestionsOrAttachmentsTab) {
                                    subHeaderText = 'You have mandatory information missing. ';
                                    headerText = 'Mandatory information missing';
                                }

                                notificationController.showConfirmNavigationNotification(
                                    confirmCallback,
                                    cancelCallback,
                                    subHeaderText,
                                    headerText
                                );

                                return false;
                            }
                        }
 
                        if ($.isFunction(canNavigateAwayCallback)) {
                            canNavigateAwayCallback(previousViewModel);
                        }

                        previousViewModel.validate();
                    }

                    if (previousViewModel.updateStatus) {
                        previousViewModel.updateStatus();
                    }

                    previousViewModel.isVisited(true);

                    if (previousViewModel.showCheckValidationIcon &&
                        previousViewModel.showCheckValidationIcon()) {
                        gJobs.screenReadersService.setAriaLiveNotification(tabName + ' section has been successfully completed.');
                    }
                }
            });
        };

        self.activateFirstTab = function () {
            self.leftMenuController.activateFirstTab();
            self.topMenuController.activateFirstTab();
        };

        self.activateTabById = function (id) {
            self.leftMenuController.activateTabById(id);
            self.topMenuController.activateTabById(id);
        };

        self.getNavigationInfo = function() {
            var allTabs = $(containerSelector)
                .find('a[data-toggle="tab"]:visible');

            var activeTab = $(containerSelector).find('.tab-pane.active');
            var tabId = activeTab.length > 0 ? activeTab.attr('id') : undefined;

            var tabIndex = 0,
                tabName = '',
                tabElement = undefined;

            if (tabId) {
                for (var i = 0; i < allTabs.length; i++) {
                    var tab = $(allTabs[i]);
                    if (tab.attr('href') === '#' + tabId) {
                        tabElement = tab;
                        tabName = tab.find('.tab-name').text();
                        tabIndex = i + 1;
                        break;
                    }
                }
            }

            return {
                activeTabElement: tabElement,
                activeTabName: tabName,
                activeTabIndex: tabIndex,
                totalTabCount: allTabs.length
            };
        };

        self.disableMenuTabs = function () {
            $(containerSelector)
                .find('a[data-toggle="tab"]')
                .on('click.disableMenuTabs', function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                });
        };

        self.enableMenuTabs = function () {
            $(containerSelector)
                .find('a[data-toggle="tab"]')
                .off('click.disableMenuTabs');
        };

        self.getActiveTab = function () {
            var activeTab = $(containerSelector).find('.tab-pane.active');

            var tabId = activeTab.length > 0 ? activeTab.attr('id') : undefined,
                tabName = tabId != null ? tabId.split('-')[0] : undefined;

            return {
                tab: activeTab,
                tabId: tabId,
                tabName: tabName
            };
        };

        self.getActiveViewModel = function () {
            var activeTabData = self.getActiveTab();
            var $activeMenuItem = $('[href="#' + activeTabData.tabId + '"]', containerSelector);

            return ko.contextFor($activeMenuItem[0]).$data;
        };

        self.getTabIdByName = function (id) {
            var tab = $(containerSelector).find('.tab-pane[id^="' + id + '"]');
            return tab.attr('id');
        };

        self.onTab = function (eventName, callback) {
            $(containerSelector + ' a[data-toggle="tab"]').on(eventName, callback);
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.Controllers', {
        NavigationMenuController: NavigationMenuController,
        navigationMenuController: new NavigationMenuController()
    });

})(window);;
(function(window, undefined) {
    'use strict';

    function findEditedItemContainer(eventTargetElement) {
        var $editedItemContainer = $(eventTargetElement);

        var prev = $editedItemContainer.prev();
        if (prev.length > 0) {
            $editedItemContainer = prev;
        }

        if ($editedItemContainer.prev().is('h3'))
            return $editedItemContainer.prev();

        return $editedItemContainer;
    }

    function NavigationController() {
        var self = this;
        var navigationMenuController = OnlineApp.Controllers.navigationMenuController;
        var pageScrollService = gJobs.pageScrollService;

        self.initialized = false;

        self.initialize = function() {
            // TODO: check what happens when session dies and user re-logs in
            if (self.initialized) return;

            navigationMenuController.initialize();

            navigationMenuController.onTab('shown', function (e) {
                //search for current active tab
                updateActiveTabId();

                self.scrollTabTopToView(e);
            });

            self.initialized = true;
        };

        self.deinitialize = function() {
            self.initialized = false;
        };


        var navigationState = {
            initialUrl: undefined,
            onlineAppUrl: undefined,
            forceLoad: false,
            enableMenuTabs: false,
            activateFirstTab: false,
            activateTabById: false,
            attachNextButtonHandlers: false,
            scrollToEditDialog: false,
            tabId: undefined,
            tabName: undefined
        };

        var jobDetailsFlyoutUrlSuffix = '/jobdetails';

        self.activateFirstTab = function() {
            navigationState.activateFirstTab = true;
            navigationState.activateTabById = false;
        };

        self.activateTabById = function(id) {
            navigationState.activateFirstTab = false;
            navigationState.activateTabById = true;
            navigationState.tabId = id;
        };

        self.disableMenuTabs = function() {
            navigationState.enableMenuTabs = false;
        };

        self.enableMenuTabs = function() {
            navigationState.enableMenuTabs = true;
        };

        self.attachHandlersToNextBtns = function() {
            navigationState.attachNextButtonHandlers = true;
        };

        self.editDialogScrolling = function() {
            navigationState.scrollToEditDialog = true;
        };

        function updateActiveTabId() {
            var $dropdown = $('.onlineapp-app-container .dropdown-nav')
                .filter(function() {
                    return $(this).css('display') != 'none';
                });
            var activeTabMenuItem;

            if ($dropdown !== undefined && $dropdown.length != 0) {
                activeTabMenuItem = $dropdown.find('.dropdown-menu li.active a');
            } else {
                activeTabMenuItem = $('.onlineapp-app-container .left-menu-nav li.active a');
            }
            if (activeTabMenuItem) {
                var tabName = activeTabMenuItem.attr('href');
                if (tabName) {
                    navigationState.tabId = tabName.substring(1, tabName.length);
                }
                activeTabMenuItem.focus();
            }
        }

        function findFirstValidationError(element) {
            /*              5 types of validatable controls:                */
            return element
                .find(
                    'input.validation-error,'                /*   input         */
                    + ' textarea.validation-error,'          /*   text-area     */
                    + ' div.select-validation-error,'        /*   select        */
                    + ' .validation-error .checkbox-set,'    /*   checkbox      */
                    + ' .validation-error.checkbox-set,'     /*   checkbox      */
                    + ' .validation-error .radio-set,'       /*   radio-group   */
                    + '.validation-error.radio-set')         /*   radio-group   */
                .filter(':not(.inline-message)')
                .first();
        }

        self.navigate = function() {
            self.initialize();

            if (navigationState.scrollToEditDialog) {
                var currentTab = $('#' + navigationState.tabId);
                if (currentTab) {
                    // find first item with error
                    var errorItem = findFirstValidationError(currentTab);

                    if (errorItem.length !== 0) {
                        self.scrollToTopValidationError(errorItem);
                    } else {
                        var firstEditDialog = currentTab
                            .find('.edit-dialog:not([style*="display: none"])').first();
                        self.scrollElementToView(firstEditDialog);
                    }
                }

                navigationState.scrollToEditDialog = false;
                return;
            }

            if (navigationState.enableMenuTabs) {
                navigationMenuController.enableMenuTabs();
            } else {
                navigationMenuController.disableMenuTabs();
            }

            if (navigationState.activateFirstTab) {
                navigationMenuController.activateFirstTab();
            }

            if (navigationState.activateTabById) {
                var tabId = navigationState.tabId;

                if (tabId) {
                    navigationMenuController.activateTabById(tabId);
                } else {
                    navigationMenuController.activateFirstTab();
                }
            }

            if (navigationState.attachNextButtonHandlers) {
                navigationMenuController.attachHandlersToNextBtns(function (previousViewModel) {
                    return previousViewModel.validateChanges();
                });
            }
        };

        self.scrollToAndFocusFirstTabWithValidationError = function () {
            /* TODO: think about less markup dependent solution both for first invalid tab and for first focusable element with error */
            var activeTab = $('.onlineapp-tabs .tab-pane.active:visible');

            var validationError = activeTab.find('.validation-error');
            var validationSectionError = activeTab.find('.section-validation-message');

            var tabWithValidationError = undefined;
            if (validationError.length !== 0) {
                tabWithValidationError = $(validationError[0]).closest('.onlineapp-section');
            }
            if (validationSectionError.length !== 0) {
                tabWithValidationError = $(validationSectionError[0]).closest('.onlineapp-section');
            }

            if (tabWithValidationError && tabWithValidationError.length !== 0) {

                var $elementToFocus;
                if ($(tabWithValidationError).find('.edit-dialog:visible').length !== 0) {
                    $elementToFocus = $(tabWithValidationError).find('.validation-error:first');
                } else {
                    var $sectionEditButton = $(tabWithValidationError).find('.validation-error .item-edit-button:visible').filter(function() {
                        return !($(this).css('visibility') === 'hidden');
                    });
                    var $sectionUploadButton = $(tabWithValidationError).find('.attachment-upload-button').filter(function() {
                        return !($(this).css('visibility') === 'hidden');
                    });
                    var $sectionAddButton = $(tabWithValidationError).find('.btn-app-add:visible').filter(function() {
                        return !($(this).css('visibility') === 'hidden');
                    });

                    if ($sectionEditButton.length !== 0) {
                        $elementToFocus = $sectionEditButton;
                    } else if ($sectionUploadButton.length !== 0) {
                        $elementToFocus = $sectionUploadButton;
                    } else {
                        $elementToFocus = $sectionAddButton;
                    }
                }

                if ($elementToFocus && $elementToFocus.length !== 0) {
                    $elementToFocus[0].focus();

                    var $elementToFocusBox = $($elementToFocus).closest('.box-container');
                    if ($elementToFocusBox.length !== 0) {
                        $elementToFocusBox[0].scrollIntoView();
                        return;
                    }
                }

                tabWithValidationError[0].scrollIntoView();
            }
        }

        self.scrollToTopValidationError = function(element) {
            /* TODO: think about less markup dependent solution */
            if (!element || $(element).is(document)) {
                element = $('.validation-error').filter(':visible').first();
            }

            if (element.length === 0) {
                return;
            }

            var error = findFirstValidationError($(element)
                .closest('.edit-dialog'));

            /* select a valid container based on markup templates */
            if (!error.hasClass('select-validation-error')) {
                error = error.parent();
            }

            if (!$(error).is(':visible')) {
                error = error.closest('legend');
            }

            // for questions tab try to find closest question-item container
            var errorElementContainer = error.parents('.question-item');
            if (errorElementContainer.length !== 0) {
                error = errorElementContainer.first();
            }

            self.scrollElementToView(error);
        };

        // TODO: review the code below (remained unchanged from initial state while refactoring)

        self.scrollClosestBoxToView = function(element, findAbove) {
            var box = $(element).closest('.box-container');
            if (findAbove) {
                box = $('.box-container').filter(':visible').last();
            }
            self.scrollElementToView(box);
        };

        self.scrollTabTopToView = function (e) {
            if (e) {
                var viewModel = ko.contextFor(e.target).$data;
                if (viewModel.hasError && viewModel.hasError()) {
                    var activeTab = navigationMenuController.getActiveTab(),
                        firstError = activeTab != null ? findFirstValidationError(activeTab.tab) : null;

                    //do not scroll to the top validation error on Questions tab (IS-16910)
                    if (firstError != null && firstError.length > 0 && activeTab.tabId != 'questions-tab') {
                        self.scrollToTopValidationError(firstError);

                        return;
                    }
                }
            }

            self.scrollElementToView($('.onlineapp-tabs'));
        };

        self.scrollElementContainerToView = function(element) {
            self.scrollElementToView(findEditedItemContainer(element));
        };

        self.scrollElementToView = function ($targetToScroll) {
            var $flyoutScrollContainer = pageScrollService.getFlyoutScrollContainer();

            var metrics = {
                offset: $targetToScroll.offset(),
                position: $targetToScroll.position(),
                padding: parseInt($targetToScroll.css('padding-top') || 0),
                containerScroll: $flyoutScrollContainer.scrollTop()
            };

            return self.scrollToView(metrics);
        };

        self.scrollToView = function(metrics) {

            if (!metrics) {
                return;
            }

            if (metrics.padding < 40) {
                metrics.padding = 40 - metrics.padding;
            }

            pageScrollService.scrollToView(metrics);
        };


        self.setRoutingBehavior = function() {

            //todo: move gJobs.router into more common namespace
            if (!gJobs || !gJobs.router || !History) {
                return;
            }

            var initialState = History.getState();
            navigationState.initialUrl = initialState.url;

            //do not append /apply to the Job Search page
            var tempElement = document.createElement('a');
            tempElement.href = initialState.url;
            var initialPathname = tempElement.pathname.toLowerCase();
            if (initialPathname == '/jobs' || initialPathname == '/applications/incomplete') {
                return;
            }
            initialState.cleanUrl = gJobs.router.cutQueryString(initialState.url);
            navigationState.onlineAppUrl = !!initialState.cleanUrl.match(/\/apply\/?/) ?
                initialState.cleanUrl :
                initialState.cleanUrl +
                    (initialState.cleanUrl.match(/\/$/) ? '' : '/' /* check for slash at the end */)
                    + 'apply';

            if (utils.stringEndsWith(navigationState.onlineAppUrl, '/')) {
                navigationState.onlineAppUrl = utils.removeFromStringEnd(navigationState.onlineAppUrl, 1);
            }

            gJobs.router.navigate(navigationState.onlineAppUrl, null, null, null, {}, true);

            History.Adapter.bind(window, 'statechange', function() {
                var historyState = History.getState();

                if (historyState.data && historyState.data.innerData) {
                    var historyTab = historyState.data.innerData,
                        activeTab = navigationMenuController.getActiveTab();

                    if (activeTab && activeTab.tabName !== historyTab.tabName) {
                        navigationMenuController.activateTabById(historyTab.tabId);
                    }
                }
            });
        };

        self.goToInitialUrl = function () {
            if (navigationState.onlineAppUrl) {
                window.location = navigationState.onlineAppUrl;
                return true;
            }
            if (navigationState.initialUrl) {
                window.location = navigationState.initialUrl;
                return true;
            }
            return false;
        };

        self.updateUrl = function() {
            //todo: move gJobs.router into more common namespace
            if (!gJobs || !gJobs.router || !History) {
                return;
            }

            var historyState = History.getState();
            var innerData = historyState.data.innerData;
            
            var activeTab = navigationMenuController.getActiveTab();
            
            if (!innerData ||
                !innerData.tab ||
                (activeTab != null && innerData.tab.tabName !== activeTab.tabName)) {

                var url = navigationState.onlineAppUrl.replace(/\/apply.*/, '/apply/' + activeTab.tabName);

                gJobs.router.navigate(url,
                    null, null, null,
                    {
                        tabId: activeTab.tabId,
                        tabName: activeTab.tabName
                    }, true);
            }
        };

        self.navigateToFirstInvalidTab = function() {
            var firstAlertMenuItem = $('.tabs-left .ss-alert').filter('[data-invalid="true"]:first');
            if (firstAlertMenuItem.get(0)) { //invalid tab has been visited and is highlighted in the menu
                firstAlertMenuItem.closest('a').tab('show');
                return true;
            } else { //invalid tab is not being highlighted in the menu
                $('.tabs-left .nav-tabs li a').each(function (index, element) {
                    var viewModel = ko.dataFor(element);
                    if (viewModel.hasError && viewModel.hasError()) {
                        $(element).tab('show');
                        return false; //break from 'each' loop
                    }
                });
            }

            return false;
        };

        self.navigateToApplicationsPage = function() {
            var applicationsHref =
                $('#header .application-menu .application-menu-items .job-applications-link')
                    .attr('href');

            if (applicationsHref &&
                applicationsHref !== window.location.pathname) /* no need to navigate */ {
                window.location = applicationsHref;
            }
        };

        self.navigateToJobDetailsFlyout = function () {
            AgencyPages &&
                AgencyPages.router &&
                AgencyPages.router.navigate(navigationState.onlineAppUrl + jobDetailsFlyoutUrlSuffix, null, null, null, null, true);
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.Controllers', {
        NavigationController: NavigationController,
        navigationController: new NavigationController()
    });

})(window);;
(function(window, undefined) {
    'use strict';

    var fail = function () {

        gJobs.screenReadersService.setAriaLiveNotification("Login was failed");

        toastr.warning(Resources.NotificationMessages.ServiceUnavailable);
        OnlineApp.Helpers.layoutHelper.hideOnlineAppInnerSpinner();
        OnlineApp.Helpers.layoutHelper.hideOnlineAppSpinner();
    };

    var jawsReaderIEFormFix = function () {
        // Focus on an empty span to prevent JAWS from reading the whole SignIn form in IE.
        if (gJobs.browserDetector.isIE()) {
            gJobs.screenReadersService.silenceScreenreader();
        }
    };

    function hideStickyHeader() {
        $('#sticky-header').hide();
        $('#content').removeClass('respect-sticky-header');
    }

    function SignInViewModel() {
        var self = this;
        self.firstFieldHasFocus = ko.observable(false);
        var ShowAccessMembershipDialog = false;

        var success = function (data) {


            if (data.forceRedirectUrl) {
                sessionStorage.setItem(OnlineApp.SessionKeys.PostBackUrl, window.location.href);
                if (self.showJobAlert()) {
                    sessionStorage.setItem(OnlineApp.LocalStorageKeys.RedirectToShowJobAlertPopup, "true");
                }
                window.location = data.forceRedirectUrl;
                return;
            }

            OnlineApp.Helpers.layoutHelper.hideOnlineAppInnerSpinner();
            if (data.jobSeeker) {
                var savingProgress = "Saving... ";
                gJobs.screenReadersService.setAriaLiveNotification(savingProgress);
                gJobs.screenReadersService.setAriaLiveNotification("You are now logged in.");
                OnlineApp.Helpers.layoutHelper.showOnlineAppSpinner();

                var applicationViewModel = OnlineApp.ViewModels.applicationViewModel;
                applicationViewModel.load();
                applicationViewModel.isAuthorized(true);

                //Audit successfull login action

                if (!applicationViewModel.definitionsViewModel) {
                    applicationViewModel.definitionsViewModel = new OnlineApp.ViewModels.DefinitionsViewModel();
                }

                var menuStep = applicationViewModel.definitionsViewModel.menuStep.findItemByField('text', 'LoginSuccess');
                /* 
                    Alexei Skachykhin: In a context of Government Jobs, jobId may not even exists.
                                       Direct attempt to dereference missing observable causes TypeError.
                */
                var jobId = ko.utils.unwrapObservable(applicationViewModel.jobId);
                OnlineApp.Services.auditService.setAction(jobId, menuStep.id);

                var isInJobContext = !!jobId;

                $(document).trigger(OnlineApp.Events.CommonEventsNames.Login, {
                    identity: {
                        userName: self.username()
                    },
                    isInJobContext: isInJobContext
                });

                // trigger native Event
                document.dispatchEvent(new CustomEvent(Events.CommonEventsNames.Angular.Login));

                gJobs.common.analytics.trackLoginEvent('Online Account');

                OnlineApp.Services.jobAlertService.isJobAlertsEnabled()
                    .done(function (response) {
                        if (response.isJobAlertsEnabled) {
                            OnlineApp.Services.jobAlertService.isJobAlertCanBeCreated(OnlineApp.Helpers.Url.getJsonFromUrl(location.search))
                                .done(function (response) {
                                    if (response !== "") {
                                        hideStickyHeader();
                                        gJobs.dialogHelper.disableTabIndexOnParentView();
                                        $('#job-alert-out-container').html(response);
                                    }

                                    if (self.showJobAlert()) {
                                        hideStickyHeader();
                                        if (!ShowAccessMembershipDialog) {
                                            if ($('#job-alert-access-membership-popup')[0]) {
                                                OnlineApp.Services.jobAlertService.isAccessMembershipEnabled()
                                                    .done((isAccessMembershipEnabled) => {
                                                        if (!isAccessMembershipEnabled) {
                                                            $('#job-alert-access-membership-popup').removeClass('hidden');
                                                            gJobs.screenReadersService.setAriaLiveNotification("Enroll in Free Access Membership modal is opened.");
                                                            gJobs.dialogHelper.setTabIndexOnJobAlertsPopup('#job-alert-access-membership-popup');                                                            
                                                        }
                                                        else {
                                                            displayJobAlert();
                                                        }
                                                    });
                                            }
                                            else {
                                                displayJobAlert();
                                            }
                                        }

                                        function displayJobAlert() {
                                            $('#job-alert-out-container').removeClass('hidden');
                                            gJobs.dialogHelper.setTabIndexOnJobAlertsPopup("#setJobAlertDialog");
                                        }
                                    }
                                });
                        }
                    })

            } else {
                // TODO: replace with redirect to invalid login/password page
                self.loginErrorMessage("");
                self.loginErrorMessage(data.errorMessage);
                //gJobs.screenReadersService.setAriaLiveNotification(data.errorMessage);
                $(".standalone-validation-error").focus();
                $(document).trigger(Events.CommonEventsNames.LoginFailed);


            }
        };

        var currentUserNameFromUrlParam = window.utils.getUrlParameter('onLoadShowLoginWithUserName');
        if (!currentUserNameFromUrlParam) {
            currentUserNameFromUrlParam = '';
        }

        //Username or email for login.
        self.username = ko.observable().extend({
            required: {},
            composite: {
                validators: {
                    alphaNumericWithUnderscore: {},
                    email: {}
                },
                validationMessage: 'Invalid username or email.'
            },
        });

        self.password = ko.observable('').extend({ required: {} });
        self.showJobAlert = ko.observable(false);
        self.loginErrorMessage = ko.observable('');

        self.signInFormHeadingText = ko.observable('Sign in to apply');

        self.validate = function () {

            var isValid = true;

            self.username.validate();
            if (self.username.hasError()) {
                isValid = false;
            }

            self.password.validate();
            if (self.password.hasError()) {
                isValid = false;
            }

            return isValid;
        };

        self.login = function () {
            if (self.validate()) {               

                OnlineApp.Helpers.layoutHelper.showOnlineAppInnerSpinner();

                var promise;
                self.isBusy(true);

                promise = OnlineApp.Services.authenticationService
                    .login(self.username(), self.password(), undefined, undefined, self.showJobAlert())
                    .always(function () {
                        self.isBusy(false);
                    })
                    .fail(fail)
                    .done(success);

                jawsReaderIEFormFix();

                return promise;
            } else {
                OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement(undefined, function($firstTabbingElement) {
                    gJobs.screenReadersService.onceNotification({
                        $element: $firstTabbingElement,
                        message: savingProgress + 'Entered form is invalid. Please fix the errors. '
                    });
                });
            }

            // TODO: replace call to jQuery
            return $.when();
        };

        self.isActive = ko.observable(true);

        self.isBusy = ko.observable(false);

        self.clearFields = function() {
            self.username('');
            self.username.hasError(false);

            self.password('');
            self.password.hasError(false);
        };
        $(document).on(Events.CommonEventsNames.OpenAccessMembershipDialog, function () {
            ShowAccessMembershipDialog = true;
        });    
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        SignInViewModel: SignInViewModel,
    });      

})(window);
;
(function(window, undefined) {
    'use strict';

    var fail = function () {
        toastr.warning(Resources.NotificationMessages.ServiceUnavailable);
        OnlineApp.Helpers.layoutHelper.hideOnlineAppInnerSpinner();
        OnlineApp.Helpers.layoutHelper.hideOnlineAppSpinner();
    };

    var jawsReaderIEFormFix = function () {
        // Focus on an empty span to prevent JAWS from reading the whole SignIn form in IE.
        if (gJobs.browserDetector.isIE()) {
            gJobs.screenReadersService.silenceScreenreader();
        }
    };

    var captchaHelper = OnlineApp.Helpers.loginCaptchaHelper;

    // TODO: think about separating email/confirmEmail, username and password to separate entities inside of VM
    function RegisterViewModel() {
        var self = this;
        self.firstFieldHasFocus = ko.observable(false);
        self.isSubmitted = ko.observable(false);
        self.showJobAlert = ko.observable(false);

        self.textCaptchaViewModel = new OnlineApp.ViewModels.TextCaptchaViewModel();

        OnlineApp.Services.captchaService.isCaptchaRequiredForRegister()
            .done(function(isCaptchaRequired) {
                if (isCaptchaRequired) {
                    self.textCaptchaViewModel.getTextCaptchaQuestion();
                    self.needsCaptcha(true);
                }
            });

        var success = function (data) {

            //captchaHelper.resetCaptcha();

            OnlineApp.Helpers.layoutHelper.hideOnlineAppInnerSpinner();
            if (data.success) {
                if (data.forceRedirectUrl) {
                    window.location = data.forceRedirectUrl;
                    return;
                }

                var applicationViewModel = OnlineApp.ViewModels.applicationViewModel;

                applicationViewModel.load();
                applicationViewModel.isAuthorized(true);

                //Audit successfull register action

                if (!applicationViewModel.definitionsViewModel) {
                    applicationViewModel.definitionsViewModel = new OnlineApp.ViewModels.DefinitionsViewModel();
                }

                gJobs.screenReadersService.setAriaLiveNotification('Account created. You are now logged in.');

                var menuStep = applicationViewModel.definitionsViewModel.menuStep.findItemByField('text', 'Register');
                /* 
                    Alexei Skachykhin: In a context of Government Jobs, jobId may not even exists.
                                       Direct attempt to dereference missing observable causes TypeError.
                */
                var jobId = ko.utils.unwrapObservable(applicationViewModel.jobId);
                OnlineApp.Services.auditService.setAction(jobId, menuStep.id);

                var isInJobContext = !!jobId;

                $(document).trigger(OnlineApp.Events.CommonEventsNames.Register, {
                    identity: {
                        userName: self.username(),
                        email: self.email()
                    },
                    isInJobContext: isInJobContext
                });

                // trigger native Event
                document.dispatchEvent(new CustomEvent(Events.CommonEventsNames.Angular.Register));
                self.isUserRegisteredInCurrentSession(true);

                OnlineApp.Services.jobAlertService.isJobAlertsEnabled()
                    .done(function (isJobAlertsEnabled) {
                        if (isJobAlertsEnabled) {
                            OnlineApp.Services.jobAlertService.isJobAlertCanBeCreated(OnlineApp.Helpers.Url.getJsonFromUrl(location.search))
                                .done(function () {
                                    if (self.showJobAlert()) {
                                        $(document).on(Events.CommonEventsNames.CloseAccessMembershipDialog, function (event) {
                                            $('#job-alert-out-container').removeClass('hidden');
                                        });
                                    }
                                });
                        }
                    })
            } else {
                var promise;

                if (data.isCaptchaRequired) {
                    promise = self.textCaptchaViewModel.resetCaptcha()
                        .then(function() {
                            self.needsCaptcha(true);
                        });
                } else {
                    promise = $.when(function() { return true; });
                }

                promise.then(function() {
                    self.registerErrorMessage("");
                    self.email.validationMessage("");
                    switch (data.errorPropertyName) {
                        case 'Email':
                            self.email.hasError(true);
                            self.email.validationMessage(data.errorMessage);
                            self.email.isValidationMessageVisible(true);
                            self.hasEmailChangedAfterError(false);
                            self.externalEmailError(data.errorMessage);
                            OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement();
                            break;
                        case 'Username':
                            self.username.hasError(true);
                            self.username.validationMessage(data.errorMessage);
                            self.username.isValidationMessageVisible(true);
                            self.hasUsernameChangedAfterError(false);
                            self.externalUsernameError(data.errorMessage);
                            OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement();
                            break;
                        case 'Password':
                            self.password.hasError(true);
                            self.password.validationMessage(data.errorMessage);
                            self.password.isValidationMessageVisible(true);
                            self.hasPasswordChangedAfterError(false);
                            OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement();
                            break;
                        case 'Captcha':
                            self.textCaptchaViewModel.userAnswer.hasError(true);
                            self.textCaptchaViewModel.userAnswer.validationMessage(data.errorMessage);
                            self.textCaptchaViewModel.userAnswer.isValidationMessageVisible(true);
                            OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement();
                            break;
                        default:
                            self.registerErrorMessage(data.errorMessage);
                            $('.form-validation-error:visible').first().focus();
                            $('.form-validation-error:visible').first().on("blur",
                                function() {
                                    OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement();
                                    $(this).off("blur");
                                });
                            break;
                    }
                });

                return promise;
            }
        };

        self.createAccountFormHeadingText = ko.observable('Create a new account');

        self.needsCaptcha = ko.observable(false);

        self.username = ko.observable('').extend({
            required: {},
            alphaNumericWithUnderscore: {
                validationMessage: 'Username may contain only alphanumerics and underscore.',
                showValidationMessage: true
            }
        });
        self.isUsernameSelected = ko.observable(false);
        self.isUsernameAvailable = ko.computed(function () {
            return self.username() && !self.username.hasError();
        });
        self.isUsernameNotAvailable = ko.observable(false);
        self.hasUsernameChangedAfterError = ko.observable(true);
        self.externalUsernameError = ko.observable('');
        self.username.subscribe(function (value) {
            if (value) {
                self.checkUsername();
            } else {
                self.isUsernameNotAvailable(false);
            }

            self.hasUsernameChangedAfterError(true);
            self.externalUsernameError('')
        });
        self.isUsernameNotValid = ko.computed(function() {
            return self.isUsernameNotAvailable() || self.username.hasError();
        });

        self.email = ko.observable('').extend({ required: {}, email: {} });

        /* TODO - make refactoring of the code below - remove redundant variables */
        self.isEmailSelected = ko.observable(false);
        self.isEmailAllowed = ko.observable(false);
        self.isEmailAvailable = ko.computed(function () {
            return self.email() && !self.email.hasError();
        });
        self.isEmailNotAvailable = ko.observable(false);
        self.isEmailTooltipFocusable = ko.observable(true);
        self.hasEmailChangedAfterError = ko.observable(true);
        self.externalEmailError = ko.observable('');
        self.email.subscribe(function (value) {
            if (value) {
                self.checkEmail();
            } else {
                self.isEmailNotAvailable(false);
            }

            self.hasEmailChangedAfterError(true);
            self.externalEmailError('');
        });
        self.isEmailNotValid = ko.computed(function () {
            return self.isEmailNotAvailable() || self.email.hasError();
        });

        self.password = OnlineApp.ViewModels.Common.PasswordExtender({ required: {}, password: {} });
        self.passwordStrength = ko.observable('');
        self.isPasswordSelected = ko.observable(false);

        self.isInPasswordBlock = ko.observable(false);
        self.passwordRequirements = Resources.AdditionalInfoMessages.passwordRequirements;
        self.hasPasswordChangedAfterError = ko.observable(true);
        self.password.subscribe(function(value) {
            self.hasPasswordChangedAfterError(true);
        });
        self.inPasswordBlock = function () {
            self.isInPasswordBlock(true);
        };
        self.outOfPasswordBlock = function () {
            if (self.hasPasswordChangedAfterError()) {
                // set handling to the end of event queue
                setTimeout(function() {
                    if (self.isInPasswordBlock() && !self.isPasswordSelected() && !self.password.isConfirmPasswordSelected()) {
                        self.isInPasswordBlock(false);

                        self.password.validate();
                    }
                }, 0);
            }
        };

        self.outOfEmailBlock = function () {
            if (self.hasEmailChangedAfterError()) {
                // set handling to the end of event queue
                setTimeout(function () {
                    self.email.validate();
                }, 0);
            }
        };

        self.outOfUsernameBlock = function () {
            if (self.hasUsernameChangedAfterError()) {
                // set handling to the end of event queue
                setTimeout(function () {
                    self.username.validate();
                }, 0);
            }
        };

        self.showPasswordConfirmation = ko.computed(function() {
            return self.isInPasswordBlock() || !self.password.isPasswordConfirmed();
        });

        self.isPasswordAllowed = ko.computed(function() {
            return !self.password.hasError() && self.password.isPasswordConfirmed() && self.password();
        });

        self.registerErrorMessage = ko.observable('');

        self.validate = function () {
            var isValid = true;

            self.email.validate();
            if (self.email.hasError() || !self.hasEmailChangedAfterError()) {
                isValid = false;
            }

            self.username.validate();
            if (self.username.hasError() || !self.hasUsernameChangedAfterError()) {
                isValid = false;
            }

            self.password.validate();
            if (self.password.hasError() || !self.password.isPasswordConfirmed()
                || !self.hasPasswordChangedAfterError()) {
                isValid = false;
            }

            self.textCaptchaViewModel.validate();
            if (self.needsCaptcha() && self.textCaptchaViewModel.userAnswer.hasError()) {
                isValid = false;
            }

            return isValid;
        };

        self.checkUsername = function () {
            self.username.validate();
        };

        self.checkEmail = function () {
            self.email.validate();
            
        };

        self.emailIsValidNotificationMessage = ko.computed(function () {
            if (!self.isSubmitted()) {
                return '';
            }
            return !self.email() || self.email.hasError() ? 'email is not valid' : 'email is valid';
        });

        self.passwordsAreValidNotificationMessage = ko.computed(function () {
            return self.password() && self.password.isPasswordConfirmed() ? 'passwords match' : '';
        });

        self.register = function () {
            if (self.validate()) {
                var savingProgress = "Saving... ";
                gJobs.screenReadersService.setAriaLiveNotification(savingProgress);

                OnlineApp.Helpers.layoutHelper.showOnlineAppInnerSpinner();

                self.isBusy(true);

                if (self.needsCaptcha()) {

                    OnlineApp.Services.authenticationService
                    .register(self.username(),
                        self.password(),
                        self.email(),
                        self.textCaptchaViewModel.userAnswer())
                    .always(function () {
                        self.isBusy(false);
                    })
                    .fail(function (data) {
                        //fail with providedAnswer==false means that user closed the captcha modal without answering
                        if (!(data && data.providedAnswer === false)) {
                            fail();
                        }
                    })
                    .done(success);

                    var message = gJobs.common.analytics.messages.captchaMessage;
                    gJobs.common.analytics.trackLoginEvent(message + ' (CreateAccount)');
                } else {

                    OnlineApp.Services.authenticationService
                        .register(self.username(), self.password(), self.email())
                        .always(function () {
                            self.isBusy(false);
                        })
                        .done(success)
                        .fail(fail);
                }
                jawsReaderIEFormFix();
                self.isSubmitted(true);
            } else {
                self.isSubmitted(true);

                if (!self.hasEmailChangedAfterError() && !self.textCaptchaViewModel.hasError()) {
                    self.email.hasError(true);
                    self.email.validationMessage(self.externalEmailError());
                    self.email.isValidationMessageVisible(true);
                }

                if (!self.hasUsernameChangedAfterError() && !self.textCaptchaViewModel.hasError()) {
                    self.username.hasError(true);
                    self.username.validationMessage(self.externalUsernameError());
                    self.username.isValidationMessageVisible(true);
                }

                var $firstInvalidField = OnlineApp.Helpers.layoutHelper.tabbing.getFirstElement();

                var notificationContainerId = 'register-error-notification';
                var savingProgressContainerId = 'saving-progress-notification';

                gJobs.screenReadersService.onceAriaLabelledByNotification({
                    notificationContainerIds: savingProgressContainerId + ',' + notificationContainerId,
                    $element: $firstInvalidField
                });

                $firstInvalidField.focus();
            }
        };

        self.isActive = ko.observable(false);

        self.isUserRegisteredInCurrentSession = ko.observable(false);

        self.isBusy = ko.observable(false);

        self.clearFields = function () {
            self.username('');
            self.username.hasError(false);

            self.email('');
            self.email.hasError(false);

            self.password.clearFields();
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        RegisterViewModel: RegisterViewModel,
    });

})(window);
;
(function (window, undefined) {
    'use strict';

    var captchaHelper = OnlineApp.Helpers.loginCaptchaHelper;

    function LoginViewModel() {
        var self = this;
        self.schoolJobsConstant = window.SchoolJobSiteConstant;
        self.signInViewModel = new OnlineApp.ViewModels.SignInViewModel();
        self.registerViewModel = new OnlineApp.ViewModels.RegisterViewModel();

        self.loginFacebook = function (data, event) {
            var $externalSignInForm = $(event.target).closest('.form-external-signin');
            var showJobAlert = data.signInViewModel.showJobAlert();
            FB.login(function (loginResponse) {
                if (loginResponse.authResponse) {
                    $('<input>').attr({
                        type: 'hidden',
                        name: 'accessToken',
                        value: loginResponse.authResponse.accessToken
                    }).appendTo($externalSignInForm);

                    $('<input>').attr({
                        type: 'hidden',
                        name: 'provider',
                        value: 'Facebook'
                    }).appendTo($externalSignInForm);

                    if (window.enableTwoFactorAuthentication) {
                        sessionStorage.setItem(OnlineApp.SessionKeys.PostBackUrl, window.location.href);
                    }

                    if (showJobAlert) {
                        sessionStorage.setItem(OnlineApp.LocalStorageKeys.ShowJobAlertPopup, "true");
                    }

                    $externalSignInForm.trigger('submit');
                }
            }, { auth_type: 'reauthenticate', scope: 'email,public_profile' });
        }

        self.signInUrl = getSignInUrl();
        self.toggleModels = function (viewModel, e) {
            var isSignInActive = self.signInViewModel.isActive();
            var $container;
            var isStandaloneBlock = false;
            var isHeaderBlock = false;

            if (e) {
                if (e.currentTarget.id == 'login-button' || e.currentTarget.id == 'signup-button') {
                    isHeaderBlock = true;
                }

                $container = $(e.target).parents(".sign-in-sign-up-container");
                isStandaloneBlock = $container.parents("#standalone-sign-in-block").length > 0;
            }

            if (isSignInActive && e) {
                $(document).trigger(OnlineApp.Events.CommonEventsNames.RegisterAccountLinkClicked, e);
            }

            if (isSignInActive) {
                self.signInViewModel.clearFields();
            }
            else {
                self.registerViewModel.clearFields();
            }

            self.signInViewModel.isActive(!isSignInActive);
            self.registerViewModel.isActive(isSignInActive);

            if (self.registerViewModel.isActive() && self.registerViewModel.needsCaptcha())
                captchaHelper.renderCaptcha();

            $(document).trigger('layoutUpdated');

            self.registerViewModel.firstFieldHasFocus(isStandaloneBlock ? isSignInActive : false);
            self.signInViewModel.firstFieldHasFocus(isStandaloneBlock ? !isSignInActive : false);

            if (e && !isHeaderBlock) {
                if (isSignInActive) {
                    $(document).trigger(OnlineApp.Events.CommonEventsNames.RegisterAccountFormOpened, $container);
                } else {
                    $(document).trigger(OnlineApp.Events.CommonEventsNames.LoginFormOpened, $container);
                }
            }
        };

        self.onSignInLinkClick = function (e) {

            if (self.signInViewModel.isActive()) {
                self.signInViewModel.clearFields();
            } else {
                self.registerViewModel.clearFields();
            }

            if (gJobs && gJobs.signInForm && gJobs.signInForm.show && !gJobs.signInForm.isOpen()) {
                gJobs.signInForm.show();
            }
            setTimeout(function () {
                gJobs.signInForm.focusFirstTabbableElement();

                if (self.signInViewModel.isActive()) {
                    $(document).trigger(OnlineApp.Events.CommonEventsNames.LoginFormOpened);
                } else {
                    $(document).trigger(OnlineApp.Events.CommonEventsNames.RegisterAccountFormOpened);
                }
            });

            
        };

        self.onEmployerKeydown = function (el, e) {
            if (e.keyCode === $.ui.keyCode.SPACE) {
                window.location.href = $(e.target).attr("href");
            }
            return true;
        };



        function getSignInUrl() {
            var queryString = '/Oauth/Login?ReturnUrl=';

            if (window.location.hash && window.location.hash == '#_=_') {
                window.location.hash = '';
            }

            var currentUrl = encodeURIComponent(window.location.href);
            queryString += currentUrl;

            return queryString;
        };


    }

    


    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        LoginViewModel: LoginViewModel
    });

})(window);;
(function(window, undefined) {
    'use strict';

    function TextCaptchaViewModel(keyForTextCaptchaAnswer) {
        var self = this;
        var isRefreshClicked = false;
        var keyForAnswer = keyForTextCaptchaAnswer ? keyForTextCaptchaAnswer : "";

        self.question = ko.observable();
        self.userAnswer = ko.observable('').extend({ required: {}});
        self.isBusy = ko.observable(false);
        self.customLabelHtmlContent = ko.observable("");
        self.customUserAnswerInputId = ko.observable("");

        self.getTextCaptchaQuestion = function () {
            self.isBusy(true);

            return OnlineApp.Services.captchaService.getCaptcha(keyForAnswer).done(function (question) {
                if (question) {
                    self.question(question);
                    gJobs.screenReadersService.setAriaLiveNotification('New captcha question is loaded', '.text-captcha-container .loaded-notification:visible');
                }
                if (isRefreshClicked) {
                    $('.reset-captcha').focus();
                }
                else {
                    $('#skip-to-content-button').focus();
                }
            }).then(function () {
                self.isBusy(false);
                if (isRefreshClicked) {
                    $('.reset-captcha').focus();
                    isRefreshClicked = false;
                }
                else {
                    $('#skip-to-content-button').focus();
                }
            });
        }

        self.validate = function() {
            return self.userAnswer.validate();
        }

        self.hasError = function() {
            return self.userAnswer.hasError();
        }

        self.refreshCaptcha = function () {
            isRefreshClicked = true;
            self.resetCaptcha();
        }

        self.resetCaptcha = function (hasError, errorMessage, customUserAnswerInputId, updatedCaptchaQuestion) {
            self.userAnswer('');
            self.userAnswer.hasError(hasError);
            self.userAnswer.validationMessage(errorMessage);
            self.userAnswer.isValidationMessageVisible(hasError);

            if (updatedCaptchaQuestion) {
                self.question(updatedCaptchaQuestion);
                gJobs.screenReadersService.setAriaLiveNotification('New captcha question is loaded', '.text-captcha-container .loaded-notification:visible');
                $('#skip-to-content-button').focus();
            } else {
                self.getTextCaptchaQuestion();
            }
        }
        
        self.setCustomLabelHtmlContent = function (htmlContent) {
            if (self.customLabelHtmlContent() !== htmlContent) {
                self.customLabelHtmlContent(htmlContent);
            }
        }

        self.setCustomUserAnswerInputId = function (customUserAnswerInputId) {
            if (self.customUserAnswerInputId() !== customUserAnswerInputId) {
                self.customUserAnswerInputId(customUserAnswerInputId);
            }
        }

        self.getCaptchaLabelHtmlContent = function () {
            var customLabelHtmlContent = self.customLabelHtmlContent();

            if (customLabelHtmlContent) {
                return customLabelHtmlContent;
            } else {
                return "Please verify that you are not a robot<span class='sr-only'>.</span>";
            }
        }

        self.getCustomIdForUserAnswerCaptcha = function () {
            var customUserAnswerInputId = self.customUserAnswerInputId();
            if (customUserAnswerInputId) {
                return customUserAnswerInputId;
            } else {
                return 'text-captcha-user-answer';
            }
        }
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        TextCaptchaViewModel: TextCaptchaViewModel,
    });

})(window);
;
(function (window, undefined) {
    'use strict';

    /* override for linked in plugin */
    window.processLinkedInResults = function (profiles) {
        OnlineApp.ViewModels.applicationViewModel.importResumeViewModel.sendLinkedInProfile(profiles.values[0]);
    };

    var inputResumeInputId = "input-import-resume";
    var PASSWORD_PROTECTED_FILE_ERROR_CODE = 'PASSWORD_PROTECTED_FILE';
    var PASSWORD_PROTECTED_WARNING_SELECTOR = '.password-protected-warning-container:first';

    function triggerResumeImportCompleteEvent(source) {
        if (OnlineApp.Events) {
            var event = jQuery.Event(OnlineApp.Events.CommonEventsNames.ResumeImportComplete);
            event.source = source;

            if ($('#profile-settings').length === 0) {
                event.application = 'Application';
            }
            else {
                event.application = 'Profile';
            }

            $(document).trigger(event);
        }
    }

    function ImportResumeViewModel() {
        var self = OnlineApp.ViewModels.Base.DataViewModel.apply(this, arguments) || this;

        self.currentlyUploadingFile = ko.observable('');
        self.fileUploadError = ko.observable('');
        self.resumeUploadComplete = ko.observable(false);
        self.supportsResumeUploadProgress = ko.observable(true);

        self.fileIsPasswordProtected = ko.observable(false);

        self.currentlyUploadingResume = ko.computed(function () {
            return self.currentlyUploadingFile() !== '';
        });
        
        function getFileExtension(fileName) {
            var re = /(?:\.([^.]+))?$/;
            return re.exec(fileName)[1];
        }

        var supportedFileTypes = ["txt", "doc", "docx", "pdf"];

        self.fileExtensionAllowed = function (fileName) {
            var extension = getFileExtension(fileName);
            if (extension === '' || extension === null)
                return false;

            return $.inArray(extension.toLowerCase(), supportedFileTypes) !== -1;
        };

        self.attachFileUpload = function(e) {
            self.fileUploader = $(e).fileupload({
                url: '/api/importresume/importresume',
                dataType: "json",
                dropZone: $(e).closest('form'),

                add: function(e, data) {
                    self.fileIsPasswordProtected(false);

                    if (data.files[0].size === 0) {
                        self.currentlyUploadingFile(data.files[0].name);
                        self.fileUploadError(Resources.FileUploadMessages.invalidFile);

                        return false;
                    }

                    if (data.files[0].name && !self.fileExtensionAllowed(data.files[0].name)) {
                        self.currentlyUploadingFile(data.files[0].name);
                        self.fileUploadError(Resources.FileUploadMessages.unsupportedExtensionWithAllowed(
                            supportedFileTypes.map(function (item) { return "." + item }).join(", ")
                        ));

                        return false;
                    }

                    if (data.files[0].size && data.files[0].size > maximumFileUploadSizeInKB * 1024) {
                        self.currentlyUploadingFile(data.files[0].name);
                        self.fileUploadError(Resources.FileUploadMessages.fileTooLarge());

                        return false;
                    }

                    self.fileUploadJQXHR = data.submit();
                    window.focus(); //return focus to main frame. Needed in case of iframe uploads because otherwise clicking buttons doesn't work
                },

                send: function(e, data) {
                    self.currentlyUploadingFile(data.files[0].name);
                    self.fileUploadError('');
                    self.fileIsPasswordProtected(false);
                    if (data.dataType && data.dataType.substr(0, 6) === 'iframe') {
                        self.supportsResumeUploadProgress(false);
                    }
                },

                progress: function(e, data) {
                    if (self.supportsResumeUploadProgress()) {
                        var progress = parseInt(data.loaded / data.total * 100, 10);
                        $('#resume-import-progress .bar').css('width', progress + '%');
                    }
                },

                done: function(e, data) {
                    if (data.result && data.result.isSuccess === true) {
                        gJobs.screenReadersService.setAriaLiveNotification("Successfully uploaded file" + data.files[0].name);
                        self.resumeUploadComplete(true);
                        triggerResumeImportCompleteEvent("fileUpload");
                    } else {
                        if (data.result && data.result.errorCode === PASSWORD_PROTECTED_FILE_ERROR_CODE) {
                            self.currentlyUploadingFile('');
                            self.fileIsPasswordProtected(true);
                            gJobs.screenReadersService.setAriaLiveNotification($(PASSWORD_PROTECTED_WARNING_SELECTOR).text());
                            $('#import-resume-upload-button').focus();
                        } else {
                            self.fileUploadError("An error occurred uploading file " + self.currentlyUploadingFile() + ". Maximum file size is " + Math.round(maximumFileUploadSizeInKB / 1024) + " MB.");
                        }
                    }
                },

                fail: function(e, data) {
                    self.fileUploadError("An error occurred uploading file " + self.currentlyUploadingFile() + ". Maximum file size is " + Math.round(maximumFileUploadSizeInKB / 1024) + " MB.");
                }
            });
        };

        self.preventDragAndDropOnEntireTab = function (e) {
            $(e).bind('dragenter drop dragover', function (e) { e.preventDefault(); });
        };

        self.skipSection = function () {
            // menu clicks are attached and handled in applicationViewModel

            var resumeVm = OnlineApp.ViewModels.applicationViewModel.resumeTemplateViewModel;

            if (!resumeVm.isResumeTemplateApplied()) {
                resumeVm.startNewResumeTemplate();

                triggerResumeImportCompleteEvent("skipSection");
            }
        };

        self.showFileSelect = function () {
            var fileUploadInput = document.getElementById(inputResumeInputId);
            if (fileUploadInput) {
                fileUploadInput.click();
            }
        };

        self.cancelResumeUpload = function() {
            self.fileUploadJQXHR.abort();
            self.currentlyUploadingFile('');
        };

        self.goBackFromError = function() {
            self.currentlyUploadingFile('');
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels.Test', {
        ImportResumeViewModel: ImportResumeViewModel
    });

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        ImportResumeViewModel: ImportResumeViewModel
    });
})(window);;
(function (window, undefined) {
    'use strict';

    function AttachmentTypeViewModel(attachmentTypeId, name) {
        var self = this;

        self.id = ko.observable(attachmentTypeId);
        self.name = ko.observable(name);

        self.fromDataModel = function (data) {
            self.id(data.id());
            self.name(data.name());
        };
    }

    function AttachmentHistoryViewModel(clientFilename, attachmentHistoryId) {
        var self = this;

        self.clientFilename = clientFilename;
        self.attachmentHistoryId = attachmentHistoryId;
    }

    function AttachedDocumentViewModel(attachmentType, required, fileExtensionAllowedChecker, attachmentHistoryList, supportedFileTypesDescription, allAttachments) {
        var self = this;

        OnlineApp.ViewModels.FileUploadViewModel.call(self);

        var LAST_VISIBLE_ATTACHMENT_SELECTOR = 'attachment-download-link:visible:last';
        var isUploadone = false;
        var PASSWORD_PROTECTED_FILE_ERROR_CODE = 'PASSWORD_PROTECTED_FILE';
        var PASSWORD_PROTECTED_WARNING_SELECTOR = '.password-protected-warning-container:first';

        self.attachmentType = attachmentType;
        self.hasBeenSentToTopResume = ko.observable(false);
        self.allAttachments = allAttachments;
        self.required = ko.observable(required);
        self.shouldSendToTopResume = ko.observable(false);

        self.uploadedFileId = ko.observable('');
        self.fileToUpload = ko.observable();
        self.uploadedFile = ko.observable();

        self.isPostingToTopResume = ko.observable(false);
        self.postingToTopResumeComplete = ko.observable(false);
        self.postedToTopResume = ko.observable(false);
        self.topResumeError = ko.observable("");

        self.hasKnownAttachmentType = ko.computed(function () {
            return (self.attachmentType.id() !== null);
        });

        self.attachmentType.id.subscribe(function (newValue) {
            if (newValue) {
                // workaround for IE to get focus back to the window and set on the upload button
                // TODO: need to find more proper solution
                gJobs.screenReadersService.stopNotification('.onlineapp-app-container .tab-pane:visible');
                setTimeout(function () {
                    $("button.attachment-upload-button").focus();
                });
            }
        });

        self.fileDownloadUrl = ko.computed(function () {
            return "/api/attachments/downloadAttachment/"
                + "?jobId=" + OnlineApp.ViewModels.applicationViewModel.jobId()
                + "&attachmentId=" + self.uploadedFileId();
        });

        self.swallowClickIfCannotUpload = function () {
            // either let click through or stop event
            return self.hasKnownAttachmentType();
        };

        self.isResumeAttachmentType = function () {
            return self.attachmentType.name() === 'Resume';
        };

        self.isFirstResume = ko.computed(
            function () {
                if (!self.isResumeAttachmentType()) return false;
                for (var i = 0; i < self.allAttachments().length; i++) {
                    if (self.allAttachments()[i].isResumeAttachmentType()) {
                        return self.allAttachments()[i] === self;
                    }
                }
                return false;
            });

        self.onFileAdd = (function () {
            var base = self.onFileAdd;

            return function (e, data) {
                self.fileIsPasswordProtected(false);

                if (!self.hasKnownAttachmentType()) return false;

                //we set upload url here because we don't know it before attachmentType is set
                $(this).data('blueimpFileupload').options.url =
                    '/api/attachments/uploadAttachment'
                    + '?jobId=' + OnlineApp.ViewModels.applicationViewModel.jobId()
                    + '&attachmentTypeId=' + self.attachmentType.id()
                    + '&__RequestVerificationToken=' + $('input[name="__RequestVerificationToken"]').attr('value');

                if (data.files[0].size === 0) {
                    self.currentlyUploadingFile(data.files[0].name);
                    self.fileUploadError(Resources.FileUploadMessages.invalidFile);

                    return false;
                }

                if (data.files[0].name && !fileExtensionAllowedChecker(data.files[0].name)) {
                    self.currentlyUploadingFile(data.files[0].name);
                    self.fileUploadError(Resources.FileUploadMessages.unsupportedExtensionWithAllowed(supportedFileTypesDescription));

                    $('.upload-file-status > button.btn-primary').focus();

                    return false;
                }

                if (data.files[0].size && data.files[0].size > maximumFileUploadSizeInKB * 1024) {
                    self.currentlyUploadingFile(data.files[0].name);
                    self.fileUploadError(Resources.FileUploadMessages.fileTooLarge());

                    return false;
                }

                self.fileToUpload(data.files[0]);

                base(e, data);
            };
        })();

        self.onUploadDone = (function () {

            var base = self.onUploadDone;

            return function (e, data) {

                if (data.result && data.result.status === 'OK') {
                    isUploadone = true;
                    self.uploadedFileId(data.result.attachmentId);
                    self.uploadedFile(self.fileToUpload());

                    //set new attachment history list
                    attachmentHistoryList(
                        $.map(
                            data.result.newAttachmentHistory,
                            function (attHist) {
                                return new AttachmentHistoryViewModel(
                                    attHist.clientFilename,
                                    attHist.attachmentHistoryEntryId);
                            }));
                } else if (data.result && data.result.errorCode === PASSWORD_PROTECTED_FILE_ERROR_CODE) {
                    self.currentlyUploadingFile('');
                    self.fileIsPasswordProtected(true);

                    gJobs.screenReadersService.setAriaLiveNotification($(PASSWORD_PROTECTED_WARNING_SELECTOR).text());

                    $("button.attachment-upload-button").focus();

                    return false;
                }

                $(document)
                    .trigger(OnlineApp.Events.CommonEventsNames.DocumentAttached);

                base(e, data);

                gJobs.common.analytics.trackApplicationEvent({
                    action: 'upload',
                    eventLabel: 'attachment',
                    sendToAllTrackers: true,
                    data: { 'metric4': 1, 'metric6': 1 }
                });

                gJobs.screenReadersService.setNotificationOnElement(
                    {
                        text: data.files[0].name + ' attachment has been successfully loaded',
                        $element: $(LAST_VISIBLE_ATTACHMENT_SELECTOR)
                    });
            };
        })();

        self.canSendToTopResume = ko.computed(
            function () {

                if (isUploadone) {
                    if (self.shouldSendToTopResume() && self.fileUploadComplete()) {
                        $(".top-resume-upload").prop("disabled", false);
                        setTimeout(function () {

                            $('.top-resume-upload').focus();
                            $('#att-send-to-top-resume').focus();

                        }, 100);
                    }
                    else {
                        $(".top-resume-upload").prop("disabled", true);
                        setTimeout(function () {
                            $('.top-resume-upload').blur();
                        }, 100);
                    }
                }
                return self.shouldSendToTopResume() && self.fileUploadComplete();
            });

        self.canSendToTopResume.subscribeChanged(
            function (newValue, oldValue) {
                if (!newValue !== !oldValue) {
                    var text = "Upload to TopResume button ";
                    if (!newValue) {
                        text += "disabled";
                    } else {
                        text += "enabled";
                    }
                    setTimeout(
                        function() {
                            $("#aria-live-message-container")
                                .html(text);
                        }, 100);
                }
            });

        self.sendToTopResume = function () {

            if (!self.canSendToTopResume())
                return;

            var currentFocusedElement = $(':focus');
            var focusableElements = $(':focusable');
            var index = focusableElements.index(currentFocusedElement);
            var nextFocusableElement = focusableElements[index + 1];
            nextFocusableElement.focus();

            if (self.hasBeenSentToTopResume()) {
                self.postingToTopResumeComplete(true);

                OnlineApp.Helpers.layoutHelper.tabbing.updateIndices();
                $(".top-resume-result").focus();
                return;
            }

            self.isPostingToTopResume(true);
            $("#aria-live-message-container").html("Uploading to TopResume");

            gJobs.common.analytics.trackEvent('topresume', 'apply');
            
            $.post(
                "/api/topResume/submitToTopResume",
                {
                    jobId: OnlineApp.ViewModels.applicationViewModel.jobId(),
                    attachmentId: self.uploadedFileId(),
                    isForCareerPage: gJobs.areaInfoService.getCurrentArea() === gJobs.areaInfoService.areaNames.Career,
                    utmSource: (new URLSearchParams(window.topResume.links.newUserRegistration.replaceAll('&amp;', '&'))).get('utm_source')
                })
                .done(
                    function (response) {
                        if (!response.succeeded) {
                            self.topResumeError(response.message);
                        } else {
                            self.postedToTopResume(true);
                        }
                    })
                .fail(
                    function (response) {
                        self.topResumeError(response.statusText);
                    })
                .always(
                    function () {
                        self.isPostingToTopResume(false);
                        self.postingToTopResumeComplete(true);
                        OnlineApp.Helpers.layoutHelper.tabbing.updateIndices();
                        $(".top-resume-result").focus();
                    });
        };

        self.showFileSelect = (function () {

            var base = self.showFileSelect;

            return function (data, evnt) {
                if (self.hasKnownAttachmentType()) {
                    base(data, evnt);
                }
            };
        })();

        self.showHistorySelection = function (data, event) {
            var $targetElement = $(event.target);
            var $attachmentsHistoryForm = $targetElement.closest('form');
            var $attachmentsHistoryButton = $attachmentsHistoryForm.find('.upload-history-button-container .attachment-history-button');
            var popup = $attachmentsHistoryForm.find('.attachments-history-popover').clone(true);

            var isOnlineAppOpenInFlyout = OnlineApp.Services.pageContextService.isInsideFlyout();

            var container, offset,
                attachmentsHistoryButtonOffset = $attachmentsHistoryButton.offset();

            if (isOnlineAppOpenInFlyout) {
                var $flyoutContainer = OnlineApp.Services.pageContextService.getOnlineAppFlyoutContainer();
                var $tabContent = $flyoutContainer.find('.tab-content.onlineapp-tabs');
                container = $tabContent.length ? $tabContent : $flyoutContainer;

                offset = {
                    top: attachmentsHistoryButtonOffset.top - $flyoutContainer.offset().top + $flyoutContainer.scrollTop(),
                    left: attachmentsHistoryButtonOffset.left - $flyoutContainer.offset().left + $flyoutContainer.scrollLeft()
                };
            } else {
                container = $('body');
                offset = attachmentsHistoryButtonOffset;
            }

            announceRecentUploadsListState();

            popup
                .addClass('cloned')
                .css(offset)
                .appendTo(container)
                .show();

            popup.on('keyup', function (e) {
                e.stopPropagation();

                if (e.which === $.ui.keyCode.ESCAPE) {
                    OnlineApp.ViewModels.applicationViewModel.attachmentsViewModel.hideAllAttachmentHistoryMenus();
                }
            });

            popup.on('keydown', function(e) {
                if (e.which !== $.ui.keyCode.TAB) {
                    return;
                }

                var shouldGoOutsideUp = popup.find('a:first').is(e.target) && e.shiftKey;
                var shouldGoOutsideDown = popup.find('a:last').is(e.target) && !e.shiftKey;

                if (!shouldGoOutsideUp && !shouldGoOutsideDown) {
                    return;
                }

                if (shouldGoOutsideDown) {
                    var $nextButton = $('.attachments-tab .btn-next');
                    gJobs.focusService.replaceLastElement($nextButton);
                }

                hideAllAttachmentHistoryMenus();
                return false;
            });

            popup.find('.scroll-container').mCustomScrollbar({
                scrollInertia: 150,
                advanced: { autoScrollOnFocus: true }
            });

            $targetElement.closest('.attachments-tab').find('.attachments-history-overlay').removeClass('hide');

            var $focusTarget = popup.find('a:first');
            gJobs.focusService.setFocus($focusTarget);
        };

        self.attachFileUploader = function (e) {
            self.fileUploader = $(e).fileupload({
                dataType: "json",
                dropZone: $(e).closest('form').find('.box'),
                add: self.onFileAdd,
                send: self.onFileSend,
                progress: self.onUploadProgress,
                done: self.onUploadDone,
                fail: self.onUploadFail
            });
        };

        self.setFromHistory = function (attachmentHistory) {
            self.fileUploadError('');
            self.fileIsPasswordProtected(false);
            var setFromHistoryPromise = OnlineApp.Services.attachmentsService
                .setAttachmentFromHistory(
                    OnlineApp.ViewModels.applicationViewModel.jobId(),
                    attachmentType.id(),
                    attachmentHistory.attachmentHistoryId);

            OnlineApp.Helpers.ajaxResponseValidator.ensurePromiseFailsOnInvalidData(setFromHistoryPromise, function (data) {
                return data && data.status === 'OK';
            })
                .done(function (data) {
                    self.fileUploadComplete(true);

                    if (data && data.error === PASSWORD_PROTECTED_FILE_ERROR_CODE) {
                        self.currentlyUploadingFile('');
                        self.fileIsPasswordProtected(true);

                        gJobs.screenReadersService.setAriaLiveNotification($(PASSWORD_PROTECTED_WARNING_SELECTOR).text());

                        $("button.attachment-upload-button").focus();

                        return false;
                    }

                    self.uploadedFileId(data.attachmentId);
                    self.hasBeenSentToTopResume(data.hasBeenSentToTopResume);

                    //set new attachment history list
                    attachmentHistoryList($.map(data.newAttachmentHistory, function (attHist) {
                        return new AttachmentHistoryViewModel(attHist.clientFilename, attHist.attachmentHistoryEntryId);
                    }));

                    gJobs.screenReadersService.setNotificationOnElement({
                        text: attachmentHistory.clientFilename +
                            ' attachment has been added from history',
                        $element: $(LAST_VISIBLE_ATTACHMENT_SELECTOR)
                    });
                })
                .fail(function () {
                    self.fileUploadError("Could not select attachment from history. Please try again.");
                });

            self.supportsUploadProgress(false);
            self.fileUploadCancelable(false);
            self.fileUploadComplete(false);
            self.currentlyUploadingFile(attachmentHistory.clientFilename);

            hideAllAttachmentHistoryMenus();
        };
    }

    function AttachmentsViewModel() {
        var config = { endpoint: "attachments", passJobId: true };
        var self = OnlineApp.ViewModels.Base.DataViewModel.call(this, config) || this;

        self.attachments = ko.observableArray([]);

        self.savedItemsCount = ko.computed(function () {
            return $.grep(self.attachments(), function (att) { return att.uploadedFileId() !== ''; }).length;
        });

        self.allowedAttachmentTypes = ko.observableArray([]);

        self.shouldShowAddSupplementalAttachmentButton = ko.computed(function () {
            return self.allowedAttachmentTypes().length > 0;
        });

        self.supportedFileTypes = ko.observableArray([]);

        self.getSupportedFileTypesWithPeriods = function () {
            return $.map(self.supportedFileTypes(), function (fileType) {
                return "." + fileType;
            });
        };

        self.supportedFileTypesDescription = ko.computed(function () {
            return self.getSupportedFileTypesWithPeriods().join(", ");
        });

        self.supportedFileTypesFilter = ko.computed(function () {
            return self.getSupportedFileTypesWithPeriods().join(",");
        });

        self.attachmentHistoryList = ko.observableArray([]);

        self.shouldShowHistorySelection = ko.computed(function () {
            return self.attachmentHistoryList().length > 0;
        });

        self.addSupplementalAttachment = function () {
            self.attachments.push(
                new AttachedDocumentViewModel(
                    new AttachmentTypeViewModel(null, null),
                    false,
                    self.fileExtensionAllowed,
                    self.attachmentHistoryList,
                    self.supportedFileTypesDescription(),
                    self.attachments));
        };

        self.deleteAttachment = function (attachment, event) {
            var container = $(event.target).closest('.box-container');
            var fileName = attachment.currentlyUploadingFile();
            var deleteAttachmentPromise = OnlineApp.Services.attachmentsService
                .deleteAttachment(OnlineApp.ViewModels.applicationViewModel.jobId(), attachment.uploadedFileId());

            OnlineApp.Helpers.ajaxResponseValidator.ensurePromiseFailsOnInvalidData(deleteAttachmentPromise)
                .fail(function () {
                    toastr.warning("Error deleting attachment. Please try again.");
                });

            if (attachment.required()) {
                attachment.currentlyUploadingFile('');
                attachment.uploadedFileId('');
            } else {
                self.attachments.remove(attachment);
            }

            var nextButton = $(container).find('.attachment-upload-button');
            if (!nextButton.length) {
                nextButton = $('.attachments-tab .btn-app-add:visible').first();
            }

            gJobs.screenReadersService.onceNotification({
                $element: nextButton,
                message: fileName + ' deleted successfully. '
            });

            nextButton.focus();
        };

        self.fromDataModel = function (data) {
            self.supportedFileTypes(
                $.map(data.allowedAttachmentExtensions, function (ext) {
                    return ext.toLowerCase();
                }));
            if (data.enableSupplementalAttachments == true) {
                self.allowedAttachmentTypes(
                    $.map(data.allowedAttachmentTypes, function (at) {
                        return new AttachmentTypeViewModel(at.attachmentTypeId, at.name, at.hasBeenSentToTopResume);
                    }));
            }
            else {
                self.allowedAttachmentTypes(
                    $.map(data.attachmentTypes, function (at) {
                        return new AttachmentTypeViewModel(at.attachmentTypeId, at.name, at.hasBeenSentToTopResume);
                    }));
            }

            var requiredAttachmentTypes = $.grep(data.attachmentTypes, function (attType) {
                return attType.required;
            });

            //first cover required attachment types
            self.attachments($.map(requiredAttachmentTypes, function (rat) {
                return new AttachedDocumentViewModel(
                    new AttachmentTypeViewModel(rat.attachmentTypeId, rat.name),
                    true,
                    self.fileExtensionAllowed,
                    self.attachmentHistoryList,
                    self.supportedFileTypesDescription(),
                    self.attachments);
            }));

            var undisplayedAttachments = [];
            for (var i = 0; i < data.attachments.length; i++) {
                var attachment = window.utils.firstOrDefault(self.attachments(), function (att) {
                    return att.attachmentType.id() === data.attachments[i].attachmentTypeId && att.uploadedFileId() === '';
                });

                if (attachment) {
                    attachment.currentlyUploadingFile(data.attachments[i].clientFilename);
                    attachment.uploadedFileId(data.attachments[i].attachmentId);
                    attachment.fileUploadComplete(true);
                } else {
                    undisplayedAttachments.push(data.attachments[i]);
                }
            }

            //now go over all attachments received from the server that are not yet displayed
            for (i = 0; i < undisplayedAttachments.length; i++) {
                var attachmentType = window.utils.firstOrDefault(data.attachmentTypes, function (oat) {
                    return oat.attachmentTypeId === undisplayedAttachments[i].attachmentTypeId;
                });
                var attachment = new AttachedDocumentViewModel(
                    new AttachmentTypeViewModel(attachmentType.attachmentTypeId, attachmentType.name),
                    false,
                    self.fileExtensionAllowed,
                    self.attachmentHistoryList,
                    self.supportedFileTypesDescription(),
                    self.attachments);

                attachment.currentlyUploadingFile(undisplayedAttachments[i].clientFilename);
                attachment.uploadedFileId(undisplayedAttachments[i].attachmentId);
                attachment.fileUploadComplete(true);
                attachment.hasBeenSentToTopResume(undisplayedAttachments[i].hasBeenSentToTopResume);

                self.attachments.push(attachment);
            }

            self.attachmentHistoryList($.map(data.attachmentHistory, function (attHist) {
                return new AttachmentHistoryViewModel(attHist.clientFilename, attHist.attachmentHistoryEntryId);
            }));
        };

        self.preventDragAndDropOnEntireTab = function (e) {
            $(e).bind('dragenter drop dragover', function (e) { e.preventDefault(); });
        };

        self.allAttachmentsUploaded = ko.computed(function () {
            var attachmentMissing = false;
            for (var i = 0; i < self.attachments().length; i++) {
                if (self.attachments()[i].required() && self.attachments()[i].uploadedFileId() === '')
                    attachmentMissing = true;
            }

            return !attachmentMissing;
        });

        self.shouldEnableAddSupplementalAttachmentButton = ko.computed(function () {
            var shouldEnableAddSupplementalAttachmentButton = !window.utils.exists(self.attachments(), function (att) {
                return !att.attachmentType.id() || (!att.required() && att.currentlyUploadingFile() === '');
            });
            shouldEnableAddSupplementalAttachmentButton = shouldEnableAddSupplementalAttachmentButton && self.allAttachmentsUploaded();
            return shouldEnableAddSupplementalAttachmentButton;
        });

        self.isInEditMode = ko.observable(false);

        self.validateChanges = function () {
            return self.allAttachmentsUploaded();
        };

        self.clearEmptySupplementaryAttachments = function () {
            for (var i = self.attachments().length - 1; i >= 0; i--) {
                var attachment = self.attachments()[i];
                if (!attachment.required() && attachment.currentlyUploadingFile() === '')
                    self.attachments.remove(attachment);
            }
        };

        self.clearSupplementaryAttachmentsWithErrors = function () {
            for (var i = self.attachments().length - 1; i >= 0; i--) {
                var attachment = self.attachments()[i];

                if (attachment.fileUploadError() !== '') {
                    if (!attachment.required()) {
                        self.attachments.remove(attachment);
                    } else {
                        attachment.currentlyUploadingFile('');
                    }
                }
            }
        };

        self.validate = ko.computed(function () {
            var isValid = self.allAttachmentsUploaded();

            self.hasError(!isValid);
            return isValid;
        });

        self.hideAllAttachmentHistoryMenus = hideAllAttachmentHistoryMenus;

        self.fileExtensionAllowed = function (fileName) {
            var extension = getFileExtension(fileName);
            if (extension === '' || extension === null)
                return false;

            return $.inArray(extension.toLowerCase(), self.supportedFileTypes()) != -1;
        };

        self.selectAttachmentTypeAfterRender = function () {
            OnlineApp.Helpers.layoutHelper.tabbing.updateIndices();
        };
    }

    function getFileExtension(fileName) {
        var re = /(?:\.([^.]+))?$/;
        return re.exec(fileName)[1];
    }

    function hideAllAttachmentHistoryMenus() {
        $('.attachments-history-popover.cloned').remove();
        $('.attachments-history-overlay').addClass('hide');

        announceRecentUploadsListState(true);

        gJobs.focusService.restoreFocus();
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels.Test', {
        AttachmentsViewModel: AttachmentsViewModel
    });

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        AttachmentsViewModel: AttachmentsViewModel
    });


    function announceRecentUploadsListState(collapsed) {
        var stateMessage = collapsed ? 'collapsed' : 'expanded';

        var $attachmentHistoryButton = $('.attachment-history-button');
        $attachmentHistoryButton
            .siblings('.ui-helper-hidden-accessible')
            .text('')
            .text('Recent uploads list is ' + stateMessage);
    }

    $(document).one("koTemplatesLoaded.attachments", function () {
        if (OnlineApp.Controllers && OnlineApp.Controllers.navigationMenuController) {
            OnlineApp.Controllers.navigationMenuController.onTab('show', function (e) {
                if (e.relatedTarget) {
                    var tabId = $(e.relatedTarget).attr("href");
                    if (tabId === '#attachments-tab' || tabId === '#review-tab') {
                        OnlineApp.ViewModels.applicationViewModel.attachmentsViewModel.clearEmptySupplementaryAttachments();
                        OnlineApp.ViewModels.applicationViewModel.attachmentsViewModel.clearSupplementaryAttachmentsWithErrors();
                    }
                }
            });
        }
    });
})(window);;
(function (window, undefined) {
    'use strict';

    function CompensationViewModel() {

        var self = OnlineApp.ViewModels.Base.BaseViewModel.apply(this, arguments) || this;

        // TODO: investigate whether there is any case with null settings?
        var showAnnualSalary = OnlineApp.FieldSettings ? OnlineApp.FieldSettings.salaryMinYr.visible : true;
        var showHourlySalary = OnlineApp.FieldSettings ? OnlineApp.FieldSettings.salaryMinHr.visible : true;

        self.minimumAnnualSalary = ko.observable();
        self.minimumHourlySalary = ko.observable();

        self.rates = ko.computed(function () {
            var hourly = self.minimumHourlySalary() + '',
                hourlySign = hourly.indexOf('$') === -1 ? '$' : '',
                annual = self.minimumAnnualSalary() + '',
                annualSign = annual.indexOf('$') === -1 ? '$' : '';

            var hSalary = showHourlySalary && self.minimumHourlySalary()
                ? hourlySign + self.minimumHourlySalary() + '/hr' : '';
            var aSalary = showAnnualSalary && self.minimumAnnualSalary()
                ? annualSign + self.minimumAnnualSalary() + '/year' : '';

            return hSalary + (hSalary != '' && aSalary != '' ? ', ' : '') + aSalary;
        }).extend({ ignoreOnSerialization: true });

        self.validate = function() {
            self.minimumAnnualSalary.validate();
            self.minimumHourlySalary.validate();

            return !self.hasError();
        };

        self.hasError = function() {
            var hasError =
                self.minimumAnnualSalary.hasError() ||
                self.minimumHourlySalary.hasError();

            return hasError;
        };

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            self.minimumAnnualSalary(data.minimumAnnualSalary);
            self.minimumHourlySalary(data.minimumHourlySalary);
        };

    }

    function RelocationViewModel() {

        var self = OnlineApp.ViewModels.Base.BaseViewModel.apply(this, arguments) || this;


        self.willingToRelocate = ko.observable();

        self.relocationComments = ko.observable();

        self.relocationCommentsText = ko.computed(function() {
            return self.relocationComments() ? utils.normalizeNewlines(self.relocationComments()) : "";
        }).extend({ ignoreOnSerialization: true });


        self.willingToRelocateText = ko.computed(function () {
            var relocationValue = self.willingToRelocate();
            if (!relocationValue) {
                return "";
            }

            var relocationTypes = OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.relocationType.items();
            var relocation = relocationTypes[relocationValue];

            if (!relocation) {
                return "";
            }

            return relocation.text;
        }).extend({ ignoreOnSerialization: true });


        self.validate = function () {
            self.relocationComments.validate();
            self.willingToRelocate.validate();

            return !self.hasError();
        };
        self.hasError = function () {
            var hasError =
                self.relocationComments.hasError() ||
                self.willingToRelocate.hasError();

            return hasError;
        };

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            if (data.willingToRelocate != null) {
                self.willingToRelocate(data.willingToRelocate.toString());
            }
            self.relocationComments(data.relocationComments);
        };
    }


    function PreferencesViewModel() {
        var config = {
            endpoint: "preferences",
            passResumeTemlateId: true,
            get: false // data is loaded in parent View-Model
        };

        var self = OnlineApp.ViewModels.Base.EditableViewModel.call(this, config) || this;


        self.compensation = new CompensationViewModel();
        self.shiftTypes = ko.observableArray();
        self.relocation = new RelocationViewModel();
        self.positionTypes = ko.observableArray();
        self.workTypes = ko.observableArray();

        self.objective = ko.observable();

        self.objectiveText = ko.computed(function() {
            return self.objective() ? utils.normalizeNewlines(self.objective()) : "";
        }).extend({ ignoreOnSerialization: true });
        
        self.shiftTypesText = ko.computed(function () {
            var shiftTypesValues = self.shiftTypes();
            if (!shiftTypesValues || !shiftTypesValues.length || shiftTypesValues.length === 0) {
                return "";
            }

            var shiftTypesDefinitions = OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.shiftType.items();

            var shiftTypesTexts = ko.utils.arrayMap(
                                    shiftTypesValues,
                                    function (type) {
                                        var def = shiftTypesDefinitions[type];
                                        if (!def) return "";

                                        return def.text;
                                    });
            return shiftTypesTexts.join(", ");
        }).extend({ ignoreOnSerialization: true });
        self.positionTypesText = ko.computed(function () {
            var positionTypesValues = self.positionTypes();
            if (!positionTypesValues || !positionTypesValues.length || positionTypesValues.length === 0) {
                return "";
            }

            var positionTypesDefinitions =
                OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.positionType.items();

            var positionTypesTexts = ko.utils.arrayMap(
                                     positionTypesValues,
                                     function (type) {
                                         var def = positionTypesDefinitions[type];
                                         if (!def) return "";

                                         return def.text;
                                     });
            return positionTypesTexts.join(", ");
        }).extend({ ignoreOnSerialization: true });
        self.workTypesText = ko.computed(function () {
            var workTypesValues = self.workTypes();
            if (!workTypesValues || !workTypesValues.length || workTypesValues.length === 0) {
                return "";
            }

            var workTypesDefinitions = OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.workType.items();

            var workTypesTexts = ko.utils.arrayMap(
                                     workTypesValues,
                                     function (type) {
                                         var def = workTypesDefinitions[type];
                                         if (!def) return "";

                                         return def.text;
                                     });
            return workTypesTexts.join(", ");
        }).extend({ ignoreOnSerialization: true });


        self.getValidationConfig = function () {

            var fieldSettings = OnlineApp.FieldSettings;

            var config = {
                'all': {
                    'objective': {
                        required: {
                            enabled: !!fieldSettings ?
                            fieldSettings.objective.required :
                                false
                        },
                        length: {
                            enabled: !!fieldSettings ? fieldSettings.objective.visible : true,
                            max: 500,
                            validationMessage: "Objective is too long and is limited to 500 characters"
                        },
                        disallowHtml: {}
                    },
                    'compensation.minimumAnnualSalary': {
                        required: {
                            enabled: !!fieldSettings ?
                            fieldSettings.salaryMinYr.required :
                                false
                        },
                        salary: {
                            enabled:  !!fieldSettings ? fieldSettings.salaryMinYr.visible : true,
                        }
                    },
                    'compensation.minimumHourlySalary': {
                        required: {
                            enabled: !!fieldSettings ?
                            fieldSettings.salaryMinHr.required :
                                false
                        },
                        salary: {
                            enabled:  !!fieldSettings ? fieldSettings.salaryMinHr.visible : true,
                        }
                    },
                    'relocation.willingToRelocate': {
                        required: {
                            enabled: !!fieldSettings ?
                            fieldSettings.relocateID.required :
                                false
                        },
                        regexp: {
                            //obsolete templates can have 0. we dont show that option in gui, and will treat zero as invalid (see enum WillingToRelocate)
                            pattern: !!(fieldSettings && fieldSettings.relocateID.required) ? /^[1-4]$/ : /^[0-4]$/
                        }
                    },
                    'relocation.relocationComments': {
                        required: {
                            enabled: !!fieldSettings ?
                            fieldSettings.relocateComments.required :
                                false
                        },
                        length: {
                            enabled:  !!fieldSettings ? fieldSettings.relocateComments.visible : true,
                            max: 500
                        },
                        disallowHtml: {}
                    },
                    'positionTypes': {
                        required: {
                            enabled: !!fieldSettings ?
                            fieldSettings.positionType.required :
                                false
                        }
                    },
                    'workTypes': {
                        required: {
                            enabled: !!fieldSettings ?
                            fieldSettings.workType.required :
                                false
                        }
                    },
                    'shiftTypes': {
                        required: {
                            enabled: !!fieldSettings ?
                            fieldSettings.shiftType.required :
                                false
                        }
                    }
                }
            };

            return config;
        };

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            var shiftTypes = ko.utils.arrayMap(
                data.shiftTypes,
                function (type) {
                    // convert ints to strings, ko checked binding works with array of strings only
                    return type + "";
                });

            var positionTypes = ko.utils.arrayMap(
                                    data.positionTypes,
                                    function (type) {
                                        return type + "";
                                    });

            var workTypes = ko.utils.arrayMap(
                                data.workTypes,
                                function (type) {
                                    return type + "";
                                });

            self.compensation.fromDataModel(data.compensation);
            self.shiftTypes(shiftTypes);
            self.relocation.fromDataModel(data.relocation);
            self.positionTypes(positionTypes);
            self.workTypes(workTypes);
            self.objective(data.objective);

            if (data.getValidationConfig) {
                var validationConfig = data.getValidationConfig();
                self.registerValidation(validationConfig);
            }
        };

        self.saveChanges = (function (base) {
             return function (item, e) {
                return base(item, e).always(function () {
                    self.validate();
                });
             };
        })(self.saveChanges);
    }


    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        PreferencesViewModel: PreferencesViewModel
    });

})(window);;
(function (window, undefined) {
    'use strict';

    var layoutHelper = OnlineApp.Helpers.layoutHelper;

    function DriverLicense() {
        var self = OnlineApp.ViewModels.Base.ValidatableViewModel.apply(this, arguments) || this;

        self.state = ko.observable();
        self.stateName = ko.computed(function () {
            if (!self.state())
                return "";

            var stateDefinition = ko.utils.arrayFirst(
                OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.states.items(),
                function (state) {
                    return state.id == self.state();
                });

            if (stateDefinition != null) {
                return stateDefinition.name;
            }

            return "";
        });

        self.number = ko.observable();

        self.licenseClass = ko.observable();
        self.licenseClassName = ko.computed(function () {
            if (!self.licenseClass())
                return "";

            var licenseDefinition = ko.utils.arrayFirst(
                OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.driversLicenseClasses.items(),
                function (licenseClass) {
                    return licenseClass.id == self.licenseClass();
                });

            if (licenseDefinition != null) {
                return licenseDefinition.name;
            }

            return "";
        });

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            self.state(data.state);
            self.number(data.number);
            self.licenseClass(data.licenseClass);
        };


        self.getValidationConfig = function () {

            var config = {
                'all': {
                    'number': {
                        length: {
                            max: 50
                        }
                    },
                    'state': {},
                    'licenseClass': {}
                }
            };

            return config;
        };


        (function () {
            self.registerValidation(
                self.getValidationConfig()
            );
        })();
    }

    function SsnViewModel() {
        var self = OnlineApp.ViewModels.Base.EditableViewModel.apply(this, arguments) || this;

        self.ssnFieldsLength = [3, 2, 4];
        self.ssnMasks = self.ssnFieldsLength.map(function (length) {
            return (new Array(length + 1)).join('x'); // Repeating 'x' length times
        });

        self.ssnLast4Digits = ko.observable('');
        var initLast4Digits = '';

        self.ssnValues = [ko.observable(''), ko.observable(''), ko.observable('')];
        self.ssnFull = ko.computed({
            read: function () {
                var ssnFullString = self.ssnValues[0]() + '-' + self.ssnValues[1]() + '-' + self.ssnValues[2]();
                return ssnFullString === '--' ? '' : ssnFullString;
            },
            write: function (newValue) {
                var ssnValues = newValue.split('-');
                self.ssnValues[0](ssnValues[0] || '');
                self.ssnValues[1](ssnValues[1] || '');
                self.ssnValues[2](ssnValues[2] || '');
            }
        });

        for (var i = 0; i < 2; ++i) {
            (function (i) {
                self.ssnValues[i].subscribe(function (newValue) {
                    if (!newValue || newValue.length !== self.ssnFieldsLength[i]) {
                        return;
                    }
                    self.isFocused.forEach(function (valueAccessor) {
                        valueAccessor(false);
                    });
                    self.isFocused[i + 1](true);
                });
            })(i);
        }
        self.ssnValues[2].subscribe(function (newValue) {
            if (typeof (newValue) === 'string' && newValue.length === self.ssnFieldsLength[2]) {
                self.ssnLast4Digits(newValue);
            } else {
                self.ssnLast4Digits(initLast4Digits);
            }
        });

        self.ssnMasked = ko.computed(function () {
            var lastDigits = self.ssnLast4Digits();
            if (lastDigits) {
                return self.ssnMasks[0] + '-' + self.ssnMasks[1] + '-' + lastDigits;
            }
            return '';
        });

        self.isFieldVisited = [ko.observable(false), ko.observable(false), ko.observable(false)];
        self.isFocused = [ko.observable(false), ko.observable(false), ko.observable(false)];

        self.fromDataModel = function (data) {
            if (typeof data === 'string') {
                self.ssnLast4Digits(data);
            } else {
                self.ssnFull(data.ssnFull);
                self.ssnLast4Digits(data.ssnLast4Digits);
            }
            initLast4Digits = self.ssnLast4Digits();
        };
    }

    function PersonalInfoViewModel() {
        var config = {
            endpoint: "personalInfo",
            get: false // data is loaded in parent View-Model
        };

        var self = OnlineApp.ViewModels.Base.EditableViewModel.call(this, config) || this;

        self.hasDriverLicense = ko.observable();

        self.hasDriverLicense.subscribe(function(newValue) {
            if (newValue === "Yes") {
                self.driverLicense.validate();

                // Allow KO template to display fields so they are visible when updating indices
                setTimeout(function() {
                    layoutHelper.tabbing.updateIndices();
                }, 0);
            }
        });

        var initialSsn;
        self.isSsnValid = ko.observable(true).extend({ ignoreOnSerialization: true });

        self.driverLicense = new DriverLicense();
        self.ssn = new SsnViewModel();
        self.hasProofOfLegalRight = ko.observable();
        self.highestEducationLevel = ko.observable();
        self.jobId = ko.observable();

        self.dayOfBirth = ko.observable();
        self.monthOfBirth = ko.observable();
        self.dateOfBirth = ko.computed(function () {
            if (!self.dayOfBirth() && !self.monthOfBirth()) {
                return "";
            }

            var monthStr = "XX";
            var dayStr = "XX";
            if (self.monthOfBirth())
                monthStr = self.monthOfBirth().toString();
            if (self.dayOfBirth())
                dayStr = self.dayOfBirth().toString();

            return monthStr + "/" + dayStr;
        });

        self.visible = ko.computed(function () {
            var result = false,
                savedFieldSettings = OnlineApp.FieldSettings;

            // if field settings defined check for personal info section parts visibility
            if (savedFieldSettings !== undefined) {
                result = result || ((savedFieldSettings.driverLicense !== undefined && savedFieldSettings.driverLicense.visible)
                    || (savedFieldSettings.driverLicenseStateID !== undefined && savedFieldSettings.driverLicenseStateID.visible)
                    || (savedFieldSettings.driverLicenseNumber !== undefined && savedFieldSettings.driverLicenseNumber.visible)
                    || (savedFieldSettings.driverLicenseClassID !== undefined && savedFieldSettings.driverLicenseClassID.visible)
                    || (savedFieldSettings.monthDayBirth !== undefined && savedFieldSettings.monthDayBirth.visible)
                    || (savedFieldSettings.ssn !== undefined && savedFieldSettings.ssn.visible)
                    || (savedFieldSettings.legalWork !== undefined && savedFieldSettings.legalWork.visible)
                    || (savedFieldSettings.highestEducationLevelID !== undefined && savedFieldSettings.highestEducationLevelID.visible));
            }

            return result;
        }).extend({ ignoreOnSerialization: true });

        // todo: create "knockout selected changed" to change education level name
        self.highestEducationLevelText = ko.computed(function () {
            var eduLevel = self.highestEducationLevel();
            if (!eduLevel) {
                return "No level specified";
            }

            var eduLevelDefinitions = OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.educationLevels.items();

            if (eduLevelDefinitions.length == 0) {
                return "No level specified";
            }

            var eduName = $.grep(eduLevelDefinitions, function (eduLevelDef) { return eduLevelDef.id === eduLevel })[0].name;
            return eduName;
        }).extend({ ignoreOnSerialization: true });

        self.getValidationConfig = function () {

            var fieldSettings = OnlineApp.FieldSettings;

            var isSsnRequiredValidatorEnabled = function () {
                if (!!fieldSettings) {
                    return fieldSettings.ssn.required && !self.ssn.ssnLast4Digits();
                }
                return false;
            };

            // Do not validate ssn until the user sets focus on every ssn field.
            // Also validate, when user haven't visited all ssn fields and trying to submit the form.
            var isSsnValidatorEnabled = function () {
                if (!!fieldSettings) {
                    var areAllVisited = self.ssn.isFieldVisited[0]() && self.ssn.isFieldVisited[1]() && self.ssn.isFieldVisited[2]();
                    return fieldSettings.ssn.visible && (areAllVisited || self.isSubmitted);
                }
                return false;
            };

            var isServerSsnValidatorEnabled = function () {
                if (!!fieldSettings) {
                    var doesFullSsnValueExist = self.ssn.ssnFull() != '';
                    return fieldSettings.ssn.visible && !doesFullSsnValueExist;
                }
                return false;
            };

            var config = {
                'all': {
                    'ssn.ssnFull': {
                        required: {
                            enabled: isSsnRequiredValidatorEnabled
                        },
                        ssn: {
                            enabled: isSsnValidatorEnabled
                        },
                        serverSsn: {
                            isSsnValid: self.isSsnValid,
                            enabled: isServerSsnValidatorEnabled
                        }
                    },
                    'dayOfBirth': {
                        required: {
                            enabled: !!fieldSettings ?
                                !!fieldSettings.monthDayBirth.required :
                                false
                        },
                        definitionAwareValue: {
                            definitionItems: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.day.items
                        }
                    },
                    'monthOfBirth': {
                        required: {
                            enabled: !!fieldSettings ?
                                !!fieldSettings.monthDayBirth.required :
                                false
                        },
                        definitionAwareValue: {
                            definitionItems: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.month.items
                        }
                    },
                    'hasDriverLicense': {
                        required: {
                            enabled: !!fieldSettings ?
                                fieldSettings.driverLicense.required :
                                false
                        }
                    },
                    'driverLicense.state': {
                        required: {
                            onlyIf: function () {
                                var driverLicenseVisible = !!fieldSettings ? fieldSettings.driverLicense.visible : false;
                                var driverLicenseStateRequired = !!fieldSettings ? fieldSettings.driverLicenseStateID.required : false;

                                var hasDriverLicense = (self.hasDriverLicense() === 'Yes');
                                if (self.editableItem()) {
                                    hasDriverLicense = (self.editableItem().hasDriverLicense() === 'Yes');
                                }

                                return driverLicenseStateRequired && (hasDriverLicense || !driverLicenseVisible);
                            }
                        },
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.states
                        }
                    },
                    'driverLicense.number': {
                        required: {
                            onlyIf: function () {
                                var driverLicenseVisible = !!fieldSettings ? fieldSettings.driverLicense.visible : false;
                                var driverLicenseNumberRequired = !!fieldSettings ? fieldSettings.driverLicenseNumber.required : false;

                                var hasDriverLicense = (self.hasDriverLicense() === 'Yes');
                                if (self.editableItem()) {
                                    hasDriverLicense = (self.editableItem().hasDriverLicense() === 'Yes');
                                }

                                return driverLicenseNumberRequired && (hasDriverLicense || !driverLicenseVisible);
                            }
                        },
                        length: {
                            max: 30,
                            enabled: !!fieldSettings ? fieldSettings.driverLicenseNumber.visible : false
                        },
                        disallowHtml: {}
                    },
                    'driverLicense.licenseClass': {
                        required: {
                            onlyIf: function () {
                                var driverLicenseVisible = !!fieldSettings ? fieldSettings.driverLicense.visible : false;
                                var driverLicenseClassRequired = !!fieldSettings ? fieldSettings.driverLicenseClassID.required : false;

                                var hasDriverLicense = (self.hasDriverLicense() === 'Yes');
                                if (self.editableItem()) {
                                    hasDriverLicense = (self.editableItem().hasDriverLicense() === 'Yes');
                                }

                                return driverLicenseClassRequired && (hasDriverLicense || !driverLicenseVisible);
                            }
                        },
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.driversLicenseClasses
                        }
                    },
                    'hasProofOfLegalRight': {
                        required: {
                            enabled: !!fieldSettings ?
                                fieldSettings.legalWork.required :
                                false
                        }
                    },
                    'highestEducationLevel': {
                        required: {
                            enabled: !!fieldSettings ?
                                fieldSettings.highestEducationLevelID.required :
                                false
                        },
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.educationLevels
                        }
                    }
                }
            };

            return config;
        };

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            self.isSsnValid(data.isSsnValid);
            self.hasDriverLicense(data.hasDriverLicense);
            self.driverLicense.fromDataModel(data.driverLicense);
            self.ssn.fromDataModel(data.ssn);
            initialSsn = self.ssn.ssnMasked();
            self.hasProofOfLegalRight(data.hasProofOfLegalRight);
            self.highestEducationLevel(data.highestEducationLevel);

            if (OnlineApp.ViewModels != null && OnlineApp.ViewModels.applicationViewModel != null && OnlineApp.ViewModels.applicationViewModel.jobId != null && OnlineApp.ViewModels.applicationViewModel.jobId() > 0) {
                self.jobId(OnlineApp.ViewModels.applicationViewModel.jobId());
            }

            self.dayOfBirth(data.dayOfBirth);
            self.monthOfBirth(data.monthOfBirth);
        };

        var validationConfig = self.getValidationConfig();
        self.registerValidation(validationConfig);

        self.radioButtonOptions = ko.observable({
            doYouHaveDriversLicence: [
                {
                    value: 'Yes',
                    label: 'Yes',
                    name: 'pi-radioSet-license',
                    id: 'personal-info-driver-license-yes'
                },
                {
                    value: 'No',
                    label: 'No',
                    name: 'pi-radioSet-license',
                    id: 'personal-info-driver-license-no'
                }
            ],
            doYouHaveLegalRightToWork: [
                {
                    value: 'Yes',
                    label: 'Yes',
                    name: 'pi-radioSet-workproof',
                    id: 'personal-info-proof-of-legal-work-yes'
                },
                {
                    value: 'No',
                    label: 'No',
                    name: 'pi-radioSet-workproof',
                    id: 'personal-info-proof-of-legal-work-no'
                }
            ]
        });

        //we need to pass only the full-SSN string to the server, not the entire SsnViewModel
        self.toDataModel = (function (base) {
            return function () {
                var dataModel = base.apply(this);
                dataModel.ssn = self.ssn.ssnFull();
                return dataModel;
            };
        })(self.toDataModel);

        //after the new ssn is saved, erase it for security reasons
        self.saveChanges = (function (base) {
            return function (item, e) {

                // Get fieldSettings from application or profile view model
                var fieldSettings = OnlineApp.FieldSettings;

                // If driver license radio group is visible and user does not have a driver license - strip data from driver license fields 
                if (fieldSettings && fieldSettings.driverLicense.visible && self.editableItem().hasDriverLicense() === "No") {
                    self.editableItem().driverLicense.state(null);
                    self.editableItem().driverLicense.number(null);
                    self.editableItem().driverLicense.licenseClass(null);
                }

                item.isBusy(true);

                var promise = $.when(function () { return true; });

                var isResumeLoadedInCurrentSession = OnlineApp.ViewModels.applicationViewModel.importResumeViewModel &&
                    OnlineApp.ViewModels.applicationViewModel.importResumeViewModel.resumeUploadComplete();
                if (!isResumeLoadedInCurrentSession && initialSsn && self.editableItem && self.editableItem().ssn.ssnFull()) {
                    var deferred = $.Deferred();
                    OnlineApp.Controllers.notificationController.showCreateNewAccountNotification(function () {
                        deferred.then(function () {
                            return OnlineApp.Services.authenticationService.logout().done(
                                function () {
                                    sessionStorage.setItem('shouldCreateNewAccount', "true");
                                    $(window).on('beforeunload', function () {
                                        $(window).scrollTop(0);
                                    });
                                    location.reload();
                                });
                        });

                        deferred.resolve(false);
                    }, function () {
                        deferred.resolve(true);
                    });
                    promise = promise.then(function () { return deferred; });
                }

                promise = promise.then(function (saveAllowed) {
                    if (saveAllowed) {
                        self.editableItem().isSubmitted = true;
                        return base(item, e);
                    }

                    return window.undefined;
                });

                promise = promise.done(function () {
                    self.ssn.ssnFull('');
                    self.isSsnValid(true);
                }).always(function () {
                    item.isBusy(false);
                    self.validate();
                });

                return promise;
            };
        })(self.saveChanges);
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        PersonalInfoViewModel: PersonalInfoViewModel
    });

})(window);;
(function (window, undefined) {
    'use strict';


    function GeneralInfoViewModel() {
        var config = {
            endpoint: "generalInfo",
            passResumeTemlateId: true
        };

        var self = OnlineApp.ViewModels.Base.CompositeEditableViewModel.call(this, config) || this;


        self.contactInfo = new OnlineApp.ViewModels.ContactInfoViewModel({ isEmailVerificationNotificationEnabled: false });
        self.personalInfo = new OnlineApp.ViewModels.PersonalInfoViewModel();
        self.preferences = new OnlineApp.ViewModels.PreferencesViewModel();

        self.load = (function (base) {
            return function () {
                base.apply(self, arguments);              

                // looks like legacy code and should be removed after a round of testing
                //self.contactInfo.registerValidation(
                //    self.contactInfo.getValidationConfig()
                //);

                self.personalInfo.registerValidation(
                    self.personalInfo.getValidationConfig()
                );

                self.preferences.registerValidation(
                    self.preferences.getValidationConfig()
                );


                var isRegisteredInCurrentSession =
                    OnlineApp.ViewModels.applicationViewModel.loginViewModel.registerViewModel.isUserRegisteredInCurrentSession();

                if (isRegisteredInCurrentSession) {
                    self.contactInfo.beginEdit(self.contactInfo, { });
                    self.contactInfo.editableItem().suppressValidationErrors();

                    if (self.personalInfo.visible() === true) {
                        self.personalInfo.beginEdit(self.personalInfo);
                        self.personalInfo.editableItem().suppressValidationErrors();
                    }

                    if (OnlineApp.FieldSettings.preferences.visible !== undefined
                        && OnlineApp.FieldSettings.preferences.visible === true) {
                        self.preferences.beginEdit(self.preferences);
                        self.preferences.editableItem().suppressValidationErrors();
                    }
                }
            };
        })(self.load);

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            if (data.contactInfo) {
                self.contactInfo.fromDataModel(data.contactInfo);
            }

            if (data.personalInfo) {
                self.personalInfo.fromDataModel(data.personalInfo);
            }

            if (data.preferences) {
                self.preferences.fromDataModel(data.preferences);
            }
        };

        self.showAlertValidationIcon = ko.computed(function () {
            if (self.contactInfo.isDiscardChange()) {
                return false;
            }
            else {
                if (self.contactInfo && self.contactInfo.hasError()
                    || (self.personalInfo && self.personalInfo.hasError())
                    || (self.preferences && self.preferences.hasError())) {
                    return true;
                }
                else {
                    return false;
                }
               
            }
        });

        self.showCheckValidationIcon = ko.computed(function () {
            if (self.contactInfo.isDiscardChange()) {
                return true;
            }
            else {
                if (self.contactInfo && self.contactInfo.hasError()
                    || (self.personalInfo && self.personalInfo.hasError())
                    || (self.preferences && self.preferences.hasError())) {
                    return false;
                }
                else {
                    return true;
                }
               
            }
        });

        (function () {
            self.addParts([
                self.contactInfo,
                self.personalInfo,
                self.preferences
            ]);
        }());
    }


    OnlineApp.Namespace.extend('OnlineApp.ViewModels.Test', {
        GeneralInfoViewModel: GeneralInfoViewModel
    });

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        GeneralInfoViewModel: GeneralInfoViewModel
    });

})(window);;
(function (window, undefined) {
    'use strict';

    function CheckEmployeeIdViewModel() {

        var self = OnlineApp.ViewModels.Base.EditableViewModel.call(this, null) || this;

        self.employeeId = ko.observable();
        self.employerFolderName = ko.observable();

        self.jobOpportunitiesLink = ko.computed(function() {
            var departmentFolderName = AgencyPages 
                && AgencyPages.pageInfoService
                && AgencyPages.pageInfoService.getCurrentDepartmentFolderName();
            var jobOpportunitiesLink = '/careers/' + self.employerFolderName();
            if (departmentFolderName) {
                jobOpportunitiesLink += '/' + departmentFolderName;
            }

            if (window.Resources.LACountyAgencies.split(';').indexOf(self.employerFolderName()) !== -1) {
                jobOpportunitiesLink += '?examType[0]=Open';
            }

            return jobOpportunitiesLink;
        });

        self.setEmployerFolderName = function(employerFolderName) {
            self.employerFolderName(employerFolderName);
        }

        self.checkEmployeeId = function () {
            if (!self.validate()) {
                OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement();
                return;
            }
            
            var applicationViewModel = OnlineApp.ViewModels.applicationViewModel;
            
            OnlineApp.Services.authenticationService
                .checkEmployeeId(self.employeeId(), self.employerFolderName())
                .done(function(result) {
                    if (result) {
                        applicationViewModel.isEmployeeIdValid(result.isValidEmployeeId);

                        if (result.isValidEmployeeId) {
                            applicationViewModel.employeeId(self.employeeId());
                        }

                        if (result.message) {
                            self.employeeId.hasError(true);
                            self.employeeId.validationMessage(result.message);
                            self.employeeId.isValidationMessageVisible(true);
                            OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement();
                        }
                    }
                })
                .fail(function () {
                    toastr.warning("Unable to verify whether user has valid employee id" );
                });
        };

        self.getValidationConfig = function () {
            var config = {
                'all': {
                    'employeeId': {
                        required: {}
                    }
                }
            };

            return config;
        };

        (function () {
            self.registerValidation(
                self.getValidationConfig()
            );
        })();
    };

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        CheckEmployeeIdViewModel: CheckEmployeeIdViewModel
    });

})(window);;
(function (window, undefined) {
    'use strict';

    function EmailPreferencesViewModel(hidePromotionalEmailsOption) {
        var config = {
            endpoint: "emailPreferences",
            passAgencyFolderName: true,
            passJobId: true
        };
        var self = OnlineApp.ViewModels.Base.DataViewModel.call(this, config) || this;

        self.promotionalEmails = ko.observable(true);
        self.jobApplicationEmails = ko.observable(true);
        self.agencyName = ko.observable('');

        self.hidePromotionalEmailsOption = hidePromotionalEmailsOption;
        self.showOnSubmitTab = ko.observable(false);

        self.jobApplicationEmailsInfoShown = ko.observable(false);

        self.toggleJobApplicationEmailsInfo = function() {
            self.jobApplicationEmailsInfoShown(!self.jobApplicationEmailsInfoShown());
            if (self.jobApplicationEmailsInfoShown()) {
                var message = $('#job-application-option-details').text();
                gJobs.screenReadersService.setAriaLiveNotification(message);
            }
        }

        self.fromDataModel = function(data) {
            if (!data) {
                return;
            }

            self.promotionalEmails(data.promotionalEmails);
            self.jobApplicationEmails(data.jobApplicationEmails);
            self.agencyName(data.agencyName);

            if (!data.jobApplicationEmails) {
                self.showOnSubmitTab(true);
            }
        }

        self.updatePromotionalEmailsPreference = function() {
            self.save(self.toDataModel())
                .done(function() {
                    var message = 'You have been successfully ' + (self.promotionalEmails() ? 'subscribed to' : 'unsubscribed from') + " job opportunity emails.";
                    gJobs.screenReadersService.setAriaLiveNotification(message);
                })
                .fail(function() {
                    self.promotionalEmails(!self.promotionalEmails());
                });
            return true;
        }

        self.updateJobApplicationEmailsPreference = function () {
            self.save(self.toDataModel())
                .done(function () {
                    var message = 'You have been successfully ' + (self.jobApplicationEmails() ? 'subscribed to' : 'unsubscribed from') + " job application emails.";
                    gJobs.screenReadersService.setAriaLiveNotification(message);
                })
                .fail(function () {
                    self.jobApplicationEmails(!self.jobApplicationEmails());
                });
            return true;
        }

        self.onToggleFocused = function (vm, e) {
            var message = $(e.target).closest(".option-container").find(".option-description").text();
            gJobs.screenReadersService.setAriaLiveNotification(message);
        }

        self.getInboxUrl = function () {
            var redirectUrl = '/inbox';
            var currentArea = gJobs.areaInfoService.getCurrentArea();
            if (currentArea === gJobs.areaInfoService.areaNames.Career) {
                redirectUrl = AgencyPages.pageInfoService.getCurrentAgencyHomePageUrl() + redirectUrl;
            } else if (currentArea === gJobs.areaInfoService.areaNames.Agency) {
                var employerFolderName = AgencyPages.pageInfoService ?
                    AgencyPages.pageInfoService.getCurrentAgencyFolderName() :
                    gJobs.pageInfoService.getCurrentAgencyPageFolderName();
                if (employerFolderName) {
                    redirectUrl = '/AgencyInbox/' + employerFolderName;
                }
            }
            return redirectUrl;
        }

    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        EmailPreferencesViewModel: EmailPreferencesViewModel
    });
})(window);;
(function (window, undefined) {
    'use strict';

    function EmailVerificationViewModel(options) {
        var options = options ? options : {};
        
        var RESEND_VERIFICATION_CODE_ATTEMPTS_COUNT_WITHOUT_CAPTCHA = window.emailVerificationResendAttempts;
        var VERIFICATION_CODE_VERIFY_ATTEMPTS_COUNT_WITHOUT_CAPTCHA = window.emailVerificationVerifyAttempts;
        var CAPTCHA_LABEL_HTML_CONTENT_FOR_RESEND_CODE = "<span>Please answer the question to <b>resend</b> a code again</span>";
        var CAPTCHA_LABEL_HTML_CONTENT_FOR_VERIFICATION_CODE = "<span>Please answer the question to <b>verify</b> a code again</span>";
        var CAPTCHA_INVALID_MESSAGE = "Captcha is invalid";
        var CAPTCHA_USER_ANSWER_INPUT_ID_FOR_VERIFY_CODE = "captcha-user-answer-for-verify-code";
        var CAPTCHA_USER_ANSWER_INPUT_ID_FOR_RESEND_CODE = "captcha-user-answer-for-resend-code";
        var INSTRUCTIONS_MESSAGE_FOR_SENT_CODE = "We've sent a " + window.emailVerificationCodeLength +
            " digit code to your email address and the code is only valid for " + window.emailVerificationCodeDurationInMins +
            " minutes. Please enter the code below. ";

        var verificationCodeInput;
        var lastFocusableElement;

        var isUserDataInitiated = false;
        var emailWasChangedAndNewVerificationCodeSent = false;

        var self = OnlineApp.ViewModels.Base.ValidatableViewModel.apply(this, arguments) || this;

        self.enableEmailVerification = ko.observable(window.enableEmailVerification);

        self.isNeedToHideHeader = ko.observable(options.isNeedToHideHeader);
        self.isNeedToHideInstructions = ko.observable(options.isNeedToHideInstructions);
        self.verificationCodeLabelText = ko.observable(options.verificationCodeLabelText ? options.verificationCodeLabelText : "Verification code");
        self.verificationCodeAriaLabelText = ko.observable(
            options.isNeedToHideInstructions
            ? INSTRUCTIONS_MESSAGE_FOR_SENT_CODE + self.verificationCodeLabelText()
            : self.verificationCodeLabelText());
        self.useCustomVerifyButton = ko.observable(options.useCustomVerifyButton);
        
        var abstractAreaInfoService = new gJobs.AbstractAreaInfoService();

        self.textCaptchaViewModelForResendCode = new OnlineApp.ViewModels.TextCaptchaViewModel("ResendEmailVerificationCodeAnswer");
        self.textCaptchaViewModelForVerificationCode = new OnlineApp.ViewModels.TextCaptchaViewModel("VerifyEmailVerificationCodeAnswer");

        self.textCaptchaEnabled = window.textCaptcha;
        self.isNeedToShowEmailVerificationForm = ko.observable(false);
        self.isEmailVerified = ko.observable();
        self.userEmail = ko.observable();
        self.verificationAttemptsCount = ko.observable(0);
        self.resendEmailVerificationCount = ko.observable(0);
        self.isEmailVerificationSubmitButtonEnabled = ko.observable(false);
        self.emailVerificationCode = ko.observable("").extend({
            required: {},
            verificationCode: {
                regExpForValueTransform: /_/g,
                validationMessage: OnlineApp.Validation.validationMessages.invalidEmailVerificationCode
            }
        });

        self.emailVerificationCode.subscribe(function(newValue) {
            if (newValue !== "" && self.emailVerificationCode.validate(newValue)) {
                self.isEmailVerificationSubmitButtonEnabled(true);
            } else {
                self.isEmailVerificationSubmitButtonEnabled(false);
            }
            
            OnlineApp.Helpers.layoutHelper.tabbing.updateIndices();
        });

        self.changedEmailAddressWasAdded = ko.observable(false);

        function updateFieldErrorState (field, hasError, errorMessage) {
            field.hasError(hasError);
            field.isValidationMessageVisible(hasError);

            if (hasError && errorMessage) {
                field.validationMessage(errorMessage);
            }
        };

        function resetCaptcha (textCaptchaViewModel, htmlContentForLabel, captchaUserAnswerId) {
            textCaptchaViewModel.setCustomLabelHtmlContent(htmlContentForLabel);
            textCaptchaViewModel.setCustomUserAnswerInputId(captchaUserAnswerId);

            return textCaptchaViewModel.resetCaptcha(
                textCaptchaViewModel.userAnswer.hasError(),
                CAPTCHA_INVALID_MESSAGE
            );
        };

        function removeItemFromLocalStorage(key, delay) {
            setTimeout(function () {
                localStorage.removeItem(key);
            }, delay);
        }

        function checkEmailForUpdate() {
            setInterval(function() {
                if (localStorage.getItem('updatedEmail')  && localStorage.getItem('updatedEmail') !== self.userEmail()) {
                    self.userEmail(localStorage.getItem('updatedEmail'));
                    removeItemFromLocalStorage('updatedEmail', 5000);
                }
            }, 5000)
        }

        function tryFocusOnErrorCaptcha (isEmailVerificationContainerVisible, captchaUserAnswerInputId) {
            if (isEmailVerificationContainerVisible
                && lastFocusableElement.length
                && lastFocusableElement.attr('id') === captchaUserAnswerInputId
            ) {
                $("#" + captchaUserAnswerInputId).focus();
            }
        }

        self.initUserData = function (options) {
            self.emailVerificationCode('');
            updateFieldErrorState( self.emailVerificationCode, false);
            updateFieldErrorState(self.textCaptchaViewModelForResendCode.userAnswer, false);
            updateFieldErrorState(self.textCaptchaViewModelForVerificationCode.userAnswer, false);

            OnlineApp.Services.emailVerificationService
            .getUserData()
            .then(function (response) {
                var data = response.data;

                self.isEmailVerified(data.isEmailVerified);
                self.userEmail(data.userEmail);
                self.verificationAttemptsCount(data.verificaitonAttempts)
                self.resendEmailVerificationCount(data.resendEmailVerificationCount);

                if (self.isNeedToShowResendVerificationCodeCaptcha()) {
                    resetCaptcha(
                        self.textCaptchaViewModelForResendCode, 
                        CAPTCHA_LABEL_HTML_CONTENT_FOR_RESEND_CODE,
                        CAPTCHA_USER_ANSWER_INPUT_ID_FOR_RESEND_CODE
                    );
                }

                if (self.isNeedToShowVerificationCodeCaptcha()) {
                    resetCaptcha(
                        self.textCaptchaViewModelForVerificationCode, 
                        CAPTCHA_LABEL_HTML_CONTENT_FOR_VERIFICATION_CODE,
                        CAPTCHA_USER_ANSWER_INPUT_ID_FOR_VERIFY_CODE
                    );
                }

                if (!self.isEmailVerified()) {
                    checkEmailForUpdate();
                    self.isNeedToShowEmailVerificationForm(true);
                }

                isUserDataInitiated = true;

                if (options && options.changedEmailAddressWasAdded) {
                    self.isEmailVerified(false);
                    updateFieldErrorState(self.emailVerificationCode, false);
                    self.emailVerificationCode('');
                }

                self.onReady();
            });
        }

        self.onReady = function () {
            verificationCodeInput = $('#verification-code');
            verificationCodeInput.inputmask({'mask': '999999'});

            if (verificationCodeInput.length) verificationCodeInput.focus();
        }

        self.init = function () {
            if (self.enableEmailVerification()) {
                if (!isUserDataInitiated) {
                    self.initUserData();
                }

                OnlineApp.Services.emailVerificationService.trySendEmailVerificationCode();
            }
        }

        self.resetForm = function () {
            if (self.isNeedToShowVerificationCodeCaptcha()) {
                updateFieldErrorState(self.textCaptchaViewModelForVerificationCode.userAnswer, false);

                resetCaptcha(
                    self.textCaptchaViewModelForVerificationCode,
                    CAPTCHA_LABEL_HTML_CONTENT_FOR_VERIFICATION_CODE,
                    CAPTCHA_USER_ANSWER_INPUT_ID_FOR_VERIFY_CODE
                );
            }

            if (self.isNeedToShowResendVerificationCodeCaptcha()) {
                updateFieldErrorState(self.textCaptchaViewModelForResendCode.userAnswer, false);

                resetCaptcha(
                    self.textCaptchaViewModelForResendCode,
                    CAPTCHA_LABEL_HTML_CONTENT_FOR_RESEND_CODE,
                    CAPTCHA_USER_ANSWER_INPUT_ID_FOR_RESEND_CODE
                );
            }

            self.emailVerificationCode("");
            updateFieldErrorState(self.emailVerificationCode, false);
        }

        self.goToAccountSettingsPage = function() {
            var QUERY_PARAMETERS = '?fromAppProcess=true#contact';

            var linkForAccountSettings = gJobs.accountSettingsHelper.getLinkForAccountSettings();
            linkForAccountSettings += QUERY_PARAMETERS;

            sessionStorage.setItem(OnlineApp.SessionKeys.ApplicationProcessUrl, window.location.href);

            window.location = linkForAccountSettings;
        };

        self.showSuccessNotification = function (htmlContent) {
            var successEmailNotificationEventName = "successEmailNotification";
            var successEmailNotificationSelector = "success-email-notification";
            var successEmailNotification = $('#' + successEmailNotificationSelector);

            if (successEmailNotification.length !== 0) {
                successEmailNotification.html(htmlContent);
                successEmailNotification.css("display", "flex");
            } else {
                $('body').append(
                    "<div class='uses-gjobs-styles'><div id='" + successEmailNotificationSelector + "'>" + htmlContent + "</div></div>"
                );

                successEmailNotification = $('#' + successEmailNotificationSelector);
            }

            gJobs.screenReadersService.setAriaLiveNotification(successEmailNotification.text());

            $(document).on('click.' + successEmailNotificationEventName, function () {
                if (successEmailNotification.is(":visible")) {
                    successEmailNotification.css("display", "none");
                }
            });

            setTimeout(function () {
                if (successEmailNotification.is(":visible")) {
                    successEmailNotification.css("display", "none");
                }

                $(document).off('click.' + successEmailNotificationEventName);
            }, 10000)
        }

        self.showResendCodeSuccessNotification = function () {
            var htmlContent = "<div class='success-email-notification-holder'><span>A new verification code has been sent to your email address</span></div>";

            self.showSuccessNotification(htmlContent);
        }

        self.showResendCodeOnNewEmailNotification = function () {
            var htmlContent = "<div class='success-email-notification-holder'><span>A new verification code has been sent to your new email address</span></div>";
        
            self.showSuccessNotification(htmlContent);
        }

        self.showSuccessEmailVerifcationNotification = function () {
            var htmlContent = "<div class='success-email-notification-holder'><img class='email-verification-success-icon' src='/Content/Images/email-verification-success-notification-icon-white.svg' /><span>Your account (" + self.userEmail() + ") is verified</span></div>";
        
            self.showSuccessNotification(htmlContent);
        }

        self.isNeedToShowResendVerificationCodeCaptcha = function () {
            return !self.isEmailVerified() && self.textCaptchaEnabled && (self.resendEmailVerificationCount() > RESEND_VERIFICATION_CODE_ATTEMPTS_COUNT_WITHOUT_CAPTCHA);
        }

        self.isNeedToShowVerificationCodeCaptcha = function () {
            return !self.isEmailVerified() && self.textCaptchaEnabled && (self.verificationAttemptsCount() > VERIFICATION_CODE_VERIFY_ATTEMPTS_COUNT_WITHOUT_CAPTCHA);
        }

        self.resendEmailVerificationCode = function () {
            if (self.isEmailVerified()) {
                return;
            }

            if (self.isNeedToShowResendVerificationCodeCaptcha()) {
                if (!self.textCaptchaViewModelForResendCode.validate()) {
                    $('#' + CAPTCHA_USER_ANSWER_INPUT_ID_FOR_RESEND_CODE).focus();
                    return;
                };
            }

            OnlineApp.Services.emailVerificationService
            .resendEmailVerificationCode(self.textCaptchaViewModelForResendCode.userAnswer(), self.changedEmailAddressWasAdded())
            .then(function (response) {
                var isCaptchaInvalid = false;
                var data = response.data;
                var newResendEmailVerificationCount = data.resendEmailVerificationCount;
                self.resendEmailVerificationCount(newResendEmailVerificationCount);

                if (data.isResendEmailSucceeded === false) {
                    if (data.isCaptchaInvalid === true) {
                        isCaptchaInvalid = true;
                        updateFieldErrorState(self.textCaptchaViewModelForResendCode.userAnswer, true, CAPTCHA_INVALID_MESSAGE);
                    }
                } else {
                    self.showResendCodeSuccessNotification();
                }

                if (self.isNeedToShowResendVerificationCodeCaptcha()) {
                    resetCaptcha(
                        self.textCaptchaViewModelForResendCode, 
                        CAPTCHA_LABEL_HTML_CONTENT_FOR_RESEND_CODE,
                        CAPTCHA_USER_ANSWER_INPUT_ID_FOR_RESEND_CODE
                    ).always(function () {
                        if (isCaptchaInvalid) {
                            $('#' + CAPTCHA_USER_ANSWER_INPUT_ID_FOR_RESEND_CODE).focus();
                        }
                    });
                }
            });
        }


        self.getRedirectLinkForSuccessfullEmailVerification = function() {
                OnlineApp.Services
                .emailVerificationService
                .getRedirectLinkForSuccessfullEmailVerification()
                .done(function (response) {
                    var data = response.data;

                    if (data.redirectedLink !== "") {
                        window.location = data.redirectedLink;
                    }
                });
        }
        
        self.submitVerifyEmail = function () {
            self.isEmailVerificationSubmitButtonEnabled(false);

            if (self.isNeedToShowVerificationCodeCaptcha()) {
                if (!self.textCaptchaViewModelForVerificationCode.validate()) {
                    $("#" + CAPTCHA_USER_ANSWER_INPUT_ID_FOR_VERIFY_CODE).focus();
                    self.isEmailVerificationSubmitButtonEnabled(true);
                    return;
                };
            }            

            /*
                The default behavior assumes that the verify email button is not available until 
                a 6-digit code is entered, when the custom verify email button is used we cannot
                guarantee the same behavior, in this case we need to validate the email verification code

            */
            if (self.useCustomVerifyButton() && !self.emailVerificationCode.validate()) {
                updateFieldErrorState(self.emailVerificationCode, true);
                verificationCodeInput.focus();
                self.isEmailVerificationSubmitButtonEnabled(true);
                return;
            }

            var dataResponse = OnlineApp.Services
            .emailVerificationService
            .verifyEmail(self.emailVerificationCode(), self.textCaptchaViewModelForVerificationCode.userAnswer(), self.changedEmailAddressWasAdded())
            .done(function (response) {
                var isCaptchaInvalid = false;
                var data = response.data;
            
                if (data.isVerificationSucceeded === true) {   
                    self.isEmailVerified(true);

                    if (self.changedEmailAddressWasAdded()) {
                        self.userEmail(data.changedEmailAddress);
                    }

                    self.showSuccessEmailVerifcationNotification();
                    $(document).trigger(OnlineApp.Events.CommonEventsNames.EmailVerified, { changedEmailAddress: data.changedEmailAddress });
                    gJobs.localStorageHelper.updateItemForMultipleTabs(OnlineApp.LocalStorageKeys.EmailWasVerified, "true");
                } else {
                    var newVerificationAttemptsCount = self.verificationAttemptsCount() + 1;
                    self.verificationAttemptsCount(newVerificationAttemptsCount);

                    if (data.errorFieldName === "captcha") {
                        isCaptchaInvalid = true;
                        self.isEmailVerificationSubmitButtonEnabled(true);
                        updateFieldErrorState(self.textCaptchaViewModelForVerificationCode.userAnswer, true, CAPTCHA_INVALID_MESSAGE);
                    } else {
                        var errorMessage;

                        if (data.errorMessage === "error") {
                            errorMessage = "Invalid verification code";
                        } else if (data.errorMessage === "expired") {
                            errorMessage = "Code is expired. Please resend an email to get a new code";
                        }

                        updateFieldErrorState(self.emailVerificationCode, true, errorMessage);

                        verificationCodeInput.focus();
                    }

                    if (self.isNeedToShowVerificationCodeCaptcha()) {
                        resetCaptcha(
                            self.textCaptchaViewModelForVerificationCode, 
                            CAPTCHA_LABEL_HTML_CONTENT_FOR_VERIFICATION_CODE,
                            CAPTCHA_USER_ANSWER_INPUT_ID_FOR_VERIFY_CODE
                        ).always(function() {
                            if (isCaptchaInvalid) {
                                $("#" + CAPTCHA_USER_ANSWER_INPUT_ID_FOR_VERIFY_CODE).focus();
                            }
                        });
                    }
                }
            });
        }

        self.updateVerificationCodeFormAfterEmailChange = function() {
            self.isEmailVerified(false);
            self.emailVerificationCode('');
        };

        window.onstorage = function (e) {
            if (e.key === OnlineApp.LocalStorageKeys.EmailWasChanged && e.newValue === "true") {
                self.initUserData();
            } else if (e.key === OnlineApp.LocalStorageKeys.EmailWasChangedAndNewVerificationCodeSent && e.newValue === "true") {
                emailWasChangedAndNewVerificationCodeSent = true;
            } else if (e.key === OnlineApp.LocalStorageKeys.EmailWasVerified && e.newValue === "true") {
                self.isEmailVerified(true);
                self.isNeedToShowEmailVerificationForm(false);
            }
        };

        $(window).focus(function () {
            var isEmailVerificationContainerVisible = $("#verify-email-container").is(":visible");
            
            if (emailWasChangedAndNewVerificationCodeSent) {
                if (isEmailVerificationContainerVisible) {
                    OnlineApp.Services.emailVerificationService.trySendEmailVerificationCode();
                }

                self.updateVerificationCodeFormAfterEmailChange();
                emailWasChangedAndNewVerificationCodeSent = false;
            }

            if (self.isNeedToShowVerificationCodeCaptcha()) {
                resetCaptcha(
                    self.textCaptchaViewModelForVerificationCode, 
                    CAPTCHA_LABEL_HTML_CONTENT_FOR_VERIFICATION_CODE,
                    CAPTCHA_USER_ANSWER_INPUT_ID_FOR_VERIFY_CODE
                ).always(function () {
                    tryFocusOnErrorCaptcha(isEmailVerificationContainerVisible, CAPTCHA_USER_ANSWER_INPUT_ID_FOR_VERIFY_CODE);
                });
            }

            if (self.isNeedToShowResendVerificationCodeCaptcha()) {
                resetCaptcha(
                    self.textCaptchaViewModelForResendCode, 
                    CAPTCHA_LABEL_HTML_CONTENT_FOR_RESEND_CODE,
                    CAPTCHA_USER_ANSWER_INPUT_ID_FOR_RESEND_CODE
                ).always(function () {
                    tryFocusOnErrorCaptcha(isEmailVerificationContainerVisible, CAPTCHA_USER_ANSWER_INPUT_ID_FOR_RESEND_CODE);
                });
            }
        });

        $(window).blur(function () {
            lastFocusableElement = $(document.activeElement);
        });
        
        $(document).on(OnlineApp.Events.CommonEventsNames.CertifySubmitTabOpened, function () {
            self.init();
        });

        $(document).on(OnlineApp.Events.CommonEventsNames.EmailWasChanged, function (event, data) {
            self.initUserData(data);
        });
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        EmailVerificationViewModel: EmailVerificationViewModel
    });

})(window);
;
var editJobAlertIndex;
(function (window, undefined) {
    'use strict';

    var ARIA_LIVE_NOTIFICATION_CONTAINER = $("#aria-live-message-container");

    var $jobAlertPopup = $('#job-alert-out-container');
    var $deleteJobAlertPopup = $('#job-alert-preference-dialog')
    var $jobAlertAuthorizationPopup = $('#job-alert-authorization-popup');
    var $jobAlertAccessMembershipPopup = $('#job-alert-access-membership-popup');
    var $jobAlertShadow = $('#job-alert-shadow');
    var $headerShadow = $('#header-shadow');
    var $jobAlertPreferences = $('#job-alert-preferences-container');
    var $jobAlertEditView = $('#job-alert-sidebar-container');
    var $searchFormView = $('#search-form');
    var $stickyHeader = $('#sticky-header');
    var $setJobAlertBtn = $('#set-job-alert');    
    var isExistingJobAlert = false;

    var jobAlertIndex;
    var jobAlertLocationAutocompleteMenuClassName = 'job-alert-location-autocomplete-menu';
    var jobAlertKeywordAutocompleteMenuClassName = 'job-alert-keyword-autocomplete-menu';
    var jobAlertSearchFieldSelector = '#job-alert-location-search-input';
    var jobAlertKeywordSearchFieldSelector = '#job-alert-keyword-search-input';
    var displayJobAlertsLoginPopupQueryParameter = "displayJobAlertsLoginPopup";
    var facetGroupNameDataAttribute = "facet-group-name";
    var facetFilterNameDataAttribute = "facet-filter-name";
    var facetGroupNames = {
        datePosted: "Date Posted",
        remote: "Remote",
        jobType: "Job Type",
        organizations: "Top Organizations",
        categories: "Top Categories",
        salary: "Salary Estimate"
    };

    var initialLocation;
    var selectedOrganization;
    var selectedCategory;
    var selectedSalary;
    var selectedRemoteWorkOptionId;
    var selectedJobType;

    const gJobsSite = 0;
    const sJobsSite = 1;
    
    function JobAlertsViewModel() {
        //var self = this;
        var config = {
            endpoint: "jobAlertsPreferences"
        };
        var self = OnlineApp.ViewModels.Base.EditableViewModel.call(this, config) || this;

        self.jobAlerts = ko.observableArray([]);
        self.jobAlertsGJobs = ko.observableArray([]);
        self.jobAlertsSJobs = ko.observableArray([]);
        self.jobAlertPreference = ko.observable();
        self.isInEditMode = ko.observable(false);
        self.jobAlertsIsEmpty = ko.observable(false);
        self.jobAlertsGJobsIsEmpty = ko.observable(false);
        self.jobAlertsSJobsIsEmpty = ko.observable(false);
        self.frequencyPreference = ko.observable();
        self.selectedJobAlert = ko.observable();
        self.selectedFrequency = ko.observable();
        self.isInDeleteMode = ko.observable(false);
        self.isAccessMembershipEnabled = ko.observable(false);
        self.isJobAlertsEnabled = ko.observable(false);
        self.isLoggedIn = ko.observable(false);
        self.jobSeekerId = ko.observable(0);

        self.initialToggleValue = ko.observable();
        self.initialFrequencyValue = ko.observable();

        self.isJobAlertsEnabled.subscribe(function (value) {

            if (self.initialToggleValue() == null && value !== null) {
                self.initialToggleValue(value);
            }

            self.isJobAlertsEnabled(value);
            var jobAlertNotification = "Job Alert is " +
                (value ? "active" : "inactive");

            gJobs.screenReadersService.setAriaLiveNotification(jobAlertNotification);
        });

        self.showHideAriaLabel = function () {
            if ($("fieldset.radio-set.css3-radio").length > 0) {
                $("fieldset.radio-set.css3-radio").each(function (i) {
                    $("fieldset.radio-set.css3-radio")[i].removeAttribute("aria-required");
                });
            }
        }

        OnlineApp.Services.authenticationService.isLoggedIn()
            .done(function (isLoggedIn) {
                self.isLoggedIn(isLoggedIn);

                if (self.isLoggedIn()) {
                    OnlineApp.Services.jobAlertService.getAll().then(function (data) {
                        data.jobAlerts.sort(function (a, b) {
                            return a.SiteSource - b.SiteSource;
                        });
                        data.jobAlerts.forEach(function (value, i) {
                            value.Index = i;
                        })
                        self.jobAlerts(data.jobAlerts);
                        self.jobAlertsGJobs(data.jobAlerts.filter(function (jobAlertElement) {
                            return jobAlertElement.SiteSource == gJobsSite;
                        }));
                        self.jobAlertsSJobs(data.jobAlerts.filter(function (jobAlertElement) {
                            return jobAlertElement.SiteSource == sJobsSite;
                        }));

                        self.jobAlertsGJobsIsEmpty(data.jobAlerts.filter(function (g) { var countGJobs = 0; if (g.SiteSource == gJobsSite) { countGJobs++; } return countGJobs; }).length == 0);
                        self.jobAlertsSJobsIsEmpty(data.jobAlerts.filter(function (s) { var countSJobs = 0; if (s.SiteSource == sJobsSite) { countSJobs++; } return countSJobs; }).length == 0);
                        
                        self.jobAlertsIsEmpty(data.jobAlerts.length == 0);
                        
                        self.jobAlertPreference(data.jobAlertPreference);
                        self.jobSeekerId(data.jobAlertPreference.JobSeekerId);
                        self.isJobAlertsEnabled(data.jobAlertPreference.IsJobAlertEnabled);
                        self.frequencyPreference(data.jobAlertPreference.SentJobAlertsFrequency.toString());
                        self.isAccessMembershipEnabled(data.isAccessMembershipEnabled);
                    })
                }
            });



        self.isInEditMode.subscribe(function (value) {
            var $jobAlertsPreferencesTab = $('.job-alerts-preferences-tab');
            var nonEditModeClassName = 'non-edit-mode';

            if (value) {
                $jobAlertsPreferencesTab.removeClass(nonEditModeClassName);
            } else {
                $jobAlertsPreferencesTab.addClass(nonEditModeClassName);
            }
        });

        self.radioButtonOptions = ko.observable({
            frequencyPreference: [
                {
                    value: '0',
                    id: 'job-alert-frequency-preference-weekly',
                    name: 'ci-radioSet-notify',
                    label: 'Weekly'
                },
                {
                    value: '1',
                    id: 'job-alert-frequency-preference-daily',
                    name: 'ci-radioSet-notify',
                    label: 'Daily'
                }
            ]
        }).extend({ ignoreOnSerialization: true });

        self.frequencyPreference.subscribe(function (value) {
            if (!self.initialFrequencyValue()) {
                self.initialFrequencyValue(self.frequencyPreference())
            }
            self.frequencyPreference(value.toString());
        });

        self.saveChanges = function (item) {
            var frequency = self.frequencyPreference();
            var isJobAlertsEnabled = self.isJobAlertsEnabled();
            OnlineApp.Services.jobAlertService.updateJobAlertPreferences(frequency, isJobAlertsEnabled)
                .then(function (data) {
                    self.jobAlertPreference(data.jobAlertPreference);
                    self.initialToggleValue(isJobAlertsEnabled);
                    self.initialFrequencyValue(frequency);
                    self.endEdit(item);
                    self.focusEditButton(true);

                    OnlineApp.Helpers.layoutHelper.tabbing.updateIndices('.job-alerts-list');
                })
        }

        self.discardChanges = function (item) {
            self.frequencyPreference(self.initialFrequencyValue().toString());
            self.isJobAlertsEnabled(self.initialToggleValue());

            gJobs.screenReadersService.setAriaLiveNotification("Job Alert is " + (self.initialToggleValue() ? "active" : "inactive"));

            self.endEdit(item);
            self.focusEditButton();
        }

        self.focusEditButton = function (saved) {
            var $editableItemContainer = $('#job-alerts-preferences');
            var $editButton = $editableItemContainer.find('.item-edit-button');

            if (saved) {
                gJobs.screenReadersService.setAriaLiveNotification("Job Alert Preferences has been saved.");
                ARIA_LIVE_NOTIFICATION_CONTAINER.focus();
            }

            $editButton.focus();
        }

        self.beginEdit = function (item) {
            var editableItem = item.clone();

            item.isInEditMode(true);
            editableItem.isInEditMode(true);

            self.editableItem(editableItem);
            OnlineApp.Helpers.layoutHelper.tabbing.updateIndices('.job-alerts-list');
            $('#job-alerts-preferences').find(':focusable').first().focus();
        }

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            self.isJobAlertsEnabled(data.isJobAlertsEnabled);
        };

        self.openDeleteJobAlertDialog = function (jobAlert) {
            jobAlert.JobSeekerId = self.jobSeekerId();
            self.selectedJobAlert(jobAlert);
            showHideElementsOnDialog(false);
            gJobs.dialogHelper.disableTabIndexOnParentView();
            self.isInDeleteMode(true);
            showHideDeleteJobAlertPopup(true);
            hideScrollBar('html');

            jobAlertIndex = jobAlert.Index;
            gJobs.dialogHelper.setTabIndexOnJobAlertsPopup("#job-alert-preference-dialog");
            focusOnFistTabbableDialogElement($('.job-alert-preference-dialog'));
        };

        self.closeDeleteJobAlertDialog = function () {
            gJobs.screenReadersService.setAriaLiveNotification("Delete Job Alert modal is closed.");
            ARIA_LIVE_NOTIFICATION_CONTAINER.focus();

            self.isInDeleteMode(false);
            $jobAlertPreferences.addClass("hidden");
            showScrollBar('html');
            showHideDeleteJobAlertPopup(false);
            showHideElementsOnDialog(false);
            focusOnDeleteButton(jobAlertIndex);
        };

        self.deleteJobAlert = function () {
            var jobAlert = self.selectedJobAlert();
            jobAlert.JobSeekerId = self.jobSeekerId();
            var disableJobAlert = self.jobAlerts().length === 1;
            OnlineApp.Services.jobAlertService.deleteJobAlert(jobAlert.JobAlertId, disableJobAlert, jobAlert.JobSeekerId)
                .done(function (response) {
                    showHideElementsOnDialog(false);
                    gJobs.screenReadersService.setAriaLiveNotification("Job Alert was deleted.");
                    ARIA_LIVE_NOTIFICATION_CONTAINER.focus();

                    self.isInDeleteMode(false);
                    self.jobAlerts.remove(jobAlert);
                    if (jobAlert.SiteSource == gJobsSite) {
                        self.jobAlertsGJobs.remove(jobAlert);
                    }
                    if (jobAlert.SiteSource == sJobsSite) {
                        self.jobAlertsSJobs.remove(jobAlert);
                    }
                    showScrollBar('html');

                    if (disableJobAlert) {
                        self.isInEditMode(false);
                        self.jobAlertsIsEmpty(true);
                        self.jobAlertsGJobsIsEmpty(true);
                        self.jobAlertsSJobsIsEmpty(true);
                        self.isJobAlertsEnabled(false);
                    }
                    gJobs.dialogHelper.setTabIndexOnJobAlertsPopup("#setJobAlertDialog");
                    focusOnFistTabbableDialogElement($('.job-alerts-list'));
                    $headerShadow.addClass('hidden');
                })
        };

        self.editJobAlert = function (jobAlert) {
            jobAlertIndex = jobAlert.Index;
            editJobAlertIndex = jobAlert.Index;
            OnlineApp.Services.jobAlertService.getJobAlertEditModel(jobAlert)
                .done(function (response) {
                    $jobAlertEditView.html(response.data);
                    $searchFormView.html(response.searchForm);
                    window.isJobAlertEdit = true;
                    gJobs.screenReadersService.setAriaLiveNotification("Edit Job Alert flyout is openned.");
                    ARIA_LIVE_NOTIFICATION_CONTAINER.focus();
                    $jobAlertEditView.removeClass("hidden");
                    $jobAlertEditView.css({ height: window.innerHeight-95 });
                    hideScrollBar('html');
                    $('#skip-to-content-button').focus();
                    $("#account-settings").attr('aria-hidden', true);
                    $("#account-settings").attr('visible', false);
                    var $tabbableElements;
                    $tabbableElements = $('#account-settings')
                        .find(':tabbable');
                    $tabbableElements.attr('tabindex', -1);
                    $("#footer-new").hide();
                    $("#sjobs-footer-new").hide();
                })
        };

        $(document)
            .on(Events.CommonEventsNames.JobAlertUpdated, function () {
                OnlineApp.Services.jobAlertService.getAll().then(function (data) {
                    data.jobAlerts.sort(function (a, b) {
                        return a.SiteSource - b.SiteSource;
                    });
                    data.jobAlerts.forEach(function (value, i) {
                        value.Index = i;
                    })
                    self.jobAlerts(data.jobAlerts);
                    self.jobAlertsGJobs(data.jobAlerts.filter(function (jobAlertElement) {
                        return jobAlertElement.SiteSource == 0;
                    }));
                    self.jobAlertsSJobs(data.jobAlerts.filter(function (jobAlertElement) {
                        return jobAlertElement.SiteSource == 1;
                    }));
                    OnlineApp.Helpers.layoutHelper.tabbing.updateIndices('.job-alerts-list');
                })
            })
            .on(Events.CommonEventsNames.AccessMembershipDisabled, function (event, data) {
                self.isAccessMembershipEnabled(false);
                self.isJobAlertsEnabled(false);
                self.initialToggleValue(false);
                self.isInEditMode(false);
            })
            .on(Events.CommonEventsNames.AccessMembershipEnabled, function (event, data) {
                self.isAccessMembershipEnabled(true);
                self.isInEditMode(false);
            })
            .on(Events.CommonEventsNames.Login + " " + Events.CommonEventsNames.Register, function (event, data) {
                OnlineApp.Services.jobAlertService.getAll().then(function (data) {
                    data.jobAlerts.sort(function (a, b) {
                        return a.SiteSource - b.SiteSource;
                    });
                    data.jobAlerts.forEach(function (value, i) {
                        value.Index = i;
                    })
                    self.jobAlerts(data.jobAlerts);
                    self.jobAlertsGJobs(data.jobAlerts.filter(function (jobAlertElement) {
                        return jobAlertElement.SiteSource == gJobsSite;
                    }));
                    self.jobAlertsSJobs(data.jobAlerts.filter(function (jobAlertElement) {
                        return jobAlertElement.SiteSource == sJobsSite;
                    }));

                    self.jobAlertsGJobsIsEmpty(data.jobAlerts.filter(function (g) { var countGJobs = 0; if (g.SiteSource == gJobsSite) { countGJobs++; } return countGJobs; }).length == 0);
                    self.jobAlertsSJobsIsEmpty(data.jobAlerts.filter(function (s) { var countSJobs = 0; if (s.SiteSource == sJobsSite) { countSJobs++; } return countSJobs; }).length == 0);
                    
                    self.jobAlertsIsEmpty(data.jobAlerts.length == 0);
                    
                    self.jobAlertPreference(data.jobAlertPreference);
                    self.isJobAlertsEnabled(data.jobAlertPreference.IsJobAlertEnabled);
                    self.frequencyPreference(data.jobAlertPreference.SentJobAlertsFrequency.toString());
                    self.isAccessMembershipEnabled(data.isAccessMembershipEnabled);
                    $stickyHeader.hide();
                })
            })
    }

    $(document).ready(function () {
        var showJobAlertPopup = sessionStorage.getItem(OnlineApp.LocalStorageKeys.ShowJobAlertPopup);        
        if (showJobAlertPopup === 'true') {
            sessionStorage.setItem(OnlineApp.LocalStorageKeys.ShowJobAlertPopup, "false");
            sessionStorage.setItem(OnlineApp.LocalStorageKeys.RedirectToShowJobAlertPopup, "false");

            OnlineApp.Services.jobAlertService.isJobAlertCanBeCreated(OnlineApp.Helpers.Url.getJsonFromUrl(location.search))
                .done(function () {
                    showHideJobAlertPopup(true);
                });

        }
    })

    $(document).keydown(function (e) {
        if (e.keyCode == $.ui.keyCode.ESCAPE) {
            var elementsToExclude = getListOfElmentsToBeExcluded();
            if (elementsToExclude.includes(e.target.id)) {
                return;
            }

            if (e.target.id != 'gmapLink') {
                if ($(e.target).hasClass('things-to-consider-popover-trigger')
                    || $(e.target).hasClass('st-custom-button')
                    || $(e.target).hasClass('job-details-location-icon')
                    || $(e.target).hasClass('job-details-salary-icon')
                    || $(e.target).hasClass('inbox-header-id')
                    || $(e.target).hasClass('flag-left')
                    || $(e.target).hasClass('doNotSellMyPersonalInformationDialogCloseButton')) return;
                if ($('.job-alert-preferences').length && !$('.job-alert-preferences').is(':visible') && $jobAlertEditView.length && $jobAlertEditView.hasClass('hidden') && !isExistingJobAlert) return;
                var deleteModeWasActive = $('.job-alert-preferences').length && $('.job-alert-preferences').is(':visible');
                $jobAlertAuthorizationPopup.addClass('hidden');
                var closeJobAlertButton = document.getElementById("close-job-alert");
                var closeJobAlertOkButton = document.getElementById("close-job-alert-ok-button");
                var closeJobAlertDeleteButton = document.getElementById("close-job-alert-delete");

                var closeAccessMembershipAlert = document.getElementById("close-access-membership-alert");
                if (typeof (closeAccessMembershipAlert) != 'undefined' && closeAccessMembershipAlert != null) {
                    closeAccessMembershipAlert.click();
                }

                if (typeof (closeJobAlertButton) != 'undefined' && closeJobAlertButton != null) {
                    closeJobAlertButton.click();
                }
                if (typeof (closeJobAlertOkButton) != 'undefined' && closeJobAlertOkButton != null) {
                    closeJobAlertOkButton.click();
                }
                if (typeof (closeJobAlertDeleteButton) != 'undefined' && closeJobAlertDeleteButton != null) {
                    closeJobAlertDeleteButton.click();
                }
                self.closeJobAlert();
                self.closeEditMode();
                if (isExistingJobAlert) { self.showJobAlertEditView(); isExistingJobAlert = false; } else { $setJobAlertBtn.focus(); }
                if (deleteModeWasActive) {
                    var setJobAlertIndex = jobAlertIndex ? jobAlertIndex : 0;
                    focusOnDeleteButton(setJobAlertIndex);
                }
            }
        } else if (e.keyCode == $.ui.keyCode.ENTER) {
            if (e.target.className === "btn-show-results" || e.target.className === "hidden-facet clearAllFilter") {
                self.showResults();
            }
            else if (e.target.className === "btn-gjobs-secondary") {
                if (e.target.id != "set-job-alert") {
                    self.showResults(e.target.className);
                }
            }
            else if (e.target.className === "facet-link") {
                $(e.target).click();
            }
        }
    });   

    self.setJobAlert = function () {
        $stickyHeader.hide();
        $('#content').removeClass('respect-sticky-header');
        gJobs.dialogHelper.setTabIndexOnJobAlertsPopup("#setJobAlertDialog");

        if ($('#job-alert-access-membership-popup')[0]) {
            var isAccessMemberShipEnabled = false;
            $(document).on(Events.CommonEventsNames.AccessMembershipEnabled, function () {
                isAccessMemberShipEnabled = true;
            });
            $(document).on(Events.CommonEventsNames.CloseAccessMembershipDialog, function (event) {
                if (isAccessMemberShipEnabled) {
                    $jobAlertAccessMembershipPopup.remove();
                    $('#job-alert-out-container').removeClass('hidden');
                    gJobs.dialogHelper.setTabIndexOnJobAlertsPopup("#setJobAlertDialog");
                }
                else {
                    self.showHideJobAlertAcessMembershipPopup(true, false);
                }
            });
            //Event handler added to prevent displaying both landing accesmembership dialog and job alert accessmembership  popup if page refreshed post set jobalert sign in
            $(document).on(Events.CommonEventsNames.OpenAccessMembershipDialog, function () {
                self.showHideJobAlertAcessMembershipPopup(false, false);
            });
        }

        OnlineApp.Services.authenticationService.isLoggedIn()
            .done(function (isLoggedIn) {
                showHideElementsOnDialog(false);
                gJobs.dialogHelper.disableTabIndexOnParentView();
                hideScrollBar('body');
                hideScrollBar('html');
                if (isLoggedIn) {
                    if ($('#job-alert-access-membership-popup')[0]) {
                        self.showHideJobAlertAcessMembershipPopup(true, true);
                        return;
                    }
                    else
                        showHideJobAlertPopup(true);
                }
                else {
                    showHideJobAlertAuthPopup(true);
                    OnlineApp.ViewModels.applicationViewModel.loginViewModel.signInViewModel.showJobAlert(true);
                    OnlineApp.ViewModels.applicationViewModel.loginViewModel.registerViewModel.showJobAlert(true);

                    if (window.enableEmailVerificationRefinements) {
                        if (!window.utils.getUrlParameter(displayJobAlertsLoginPopupQueryParameter)) {
                            var currentUrl = addEmailVerificationParametersToUrl();
                            history.pushState(null, "", currentUrl);
                        }
                    }
                }
                gJobs.screenReadersService.setAriaLiveNotification("Set Job Alert modal is openned.");
                ARIA_LIVE_NOTIFICATION_CONTAINER.focus();
                gJobs.dialogHelper.setTabIndexOnJobAlertsPopup("#setJobAlertDialog");
                focusOnFistTabbableDialogElement(isLoggedIn ? $jobAlertPopup : $jobAlertAuthorizationPopup);
            });
    }
    self.addJobAlert = function (searchCriteria) {
        $("#add-job-alert").attr("disabled", true);
        OnlineApp.Services.jobAlertService.addJobAlert(searchCriteria)
            .done(function (response) {
                showHideElementsOnDialog(false);
                gJobs.dialogHelper.disableTabIndexOnParentView();
                $('#job-alert-out-container').html(response);
                $(document).trigger(Events.CommonEventsNames.JobAlertCreated);
                gJobs.dialogHelper.setTabIndexOnJobAlertsPopup("#setJobAlertDialog");
            })
    }

    self.updateJobAlert = function (jobAlert) {

        jobAlert.Location = document.getElementById('job-alert-location-search-input').value;
        jobAlert.Keyword = document.getElementById('job-alert-keyword-search-input').value;

        OnlineApp.Services.jobAlertService.updateJobAlert(jobAlert)
            .done(function (response) {
                showHideElementsOnDialog(false);
                gJobs.dialogHelper.disableTabIndexOnParentView();
                var updateResultMessage = "Job Alert is saved. ";
                ARIA_LIVE_NOTIFICATION_CONTAINER.focus();

                if (!response.isSuccessfull) {
                    hideScrollBar('body');
                    $jobAlertPopup.html(response.responseView);
                    gJobs.dialogHelper.disableTabIndexOnParentView();
                    showHideJobAlertPopup(true);
                    jobAlertIndex = 1;
                    isExistingJobAlert = true;
                    updateResultMessage = "Job Alert is not saved. ";
                } else {
                    showScrollBar('html');
                    $(document).trigger(Events.CommonEventsNames.JobAlertUpdated);
                }
                
                $jobAlertEditView.addClass("hidden");
                hideScrollBar('html');
                $("#footer-new").hide();
                $("#skip-to-content-button").hide();
                self.closeEditMode(updateResultMessage);
                gJobs.dialogHelper.setTabIndexOnJobAlertsPopup("#setJobAlertDialog");
                if (!response.isSuccessfull) {
                    window.isJobAlertEdit = true;
                }
            })
    };

    function showHideElementsOnDialog(hide) {
        gJobs.dialogHelper.showHideElementsOnDialog(
            {
                selector: '#body-container, #main-container,'
                    + '#footer, #footer-new, #sjobs-footer-new, .new-job-flyout, #skip-to-content-button,'
                    + '#last-focusable-element, #cookie-consent, #account-settings',
                shouldDisableRestoreTabIndex: true,
                hide: hide
            }
        );
    }

    self.closeEditMode = function (updateResultMessage) {
        window.isJobAlertEdit = false;
        var flyoutCloseMessage = "Edit Job Alert flyout is closed.";
        if (updateResultMessage) flyoutCloseMessage = updateResultMessage + flyoutCloseMessage;
        gJobs.screenReadersService.setAriaLiveNotification(flyoutCloseMessage);
        ARIA_LIVE_NOTIFICATION_CONTAINER.focus();
        showHideElementsOnDialog(false);
        $jobAlertEditView.addClass("hidden");
        showScrollBar('html');
        $("#account-settings").attr('aria-hidden', false);
        var $tabbableElements;
        $tabbableElements = $('#account-settings').find(':tabbable');
        $tabbableElements.attr('tabindex', 0);
        $("#footer-new").show();
        $("#sjobs-footer-new").show();
        $("#skip-to-content-button").show();
        gJobs.dialogHelper.setTabIndexOnJobAlertsPopup("#setJobAlertDialog");
        focusOnEditButton(jobAlertIndex);
    }

    self.keyDown = function (jobAlert, event) {
        if (event.keyCode == 13) {
            changeJobAlert(jobAlert);
        }
    }

    self.getJobAlertFilterChangePrefix = function (jobAlertFilter, facetFilterValue) {
        var filterIsAppliedPrefix = " filter is applied";
        var filterIsRemovedPrefix = " filter is removed";

        return jobAlertFilter === facetFilterValue
            ? filterIsAppliedPrefix
            : filterIsRemovedPrefix;
    }

    self.getJobAlertChangeMessage = function (jobAlert, event) {
        var facetFilterValue = $(event.target).data(facetFilterNameDataAttribute);
        var facetGroupValue = $(event.target).data(facetGroupNameDataAttribute);
 
        var message = facetGroupValue + " , " + facetFilterValue;

        if (facetGroupValue === facetGroupNames.organizations) {
            message += self.getJobAlertFilterChangePrefix(jobAlert.Organization, facetFilterValue);
        } else if (facetGroupValue === facetGroupNames.categories) {
            message += self.getJobAlertFilterChangePrefix(jobAlert.Category, facetFilterValue);
        } else if (facetGroupValue === facetGroupNames.jobType) {
            message += self.getJobAlertFilterChangePrefix(jobAlert.JobType, facetFilterValue);
        } else if (facetGroupValue === facetGroupNames.salary) {
            message += self.getJobAlertFilterChangePrefix("$" + jobAlert.MinimumSalary + "+", facetFilterValue.replace(',',''));
        } else if (facetGroupValue === facetGroupNames.datePosted) {
            message += self.getJobAlertFilterChangePrefix(jobAlert.DaysPosted, facetFilterValue);
        } else if (facetGroupValue === facetGroupNames.remote) {
            message += self.getJobAlertFilterChangePrefix(jobAlert.RemoteOptionsText, facetFilterValue);
        }

        return message;
    }

    self.changeJobAlert = function (jobAlert, event) {
        if (!jobAlert.JobAlertId || jobAlert.JobAlertId === 0) {
            jobAlert.JobAlertId = document.getElementById('job-alert-id').textContent;
        }

        selectedOrganization = null;
        selectedCategory = null;
        selectedJobType = null;

        if (jobAlert.Organization) {
            jobAlert.Organization = jobAlert.Organization[0];
            selectedOrganization = jobAlert.Organization;
        }
        if (jobAlert.Category) {
            jobAlert.Category = jobAlert.Category[0];
            selectedCategory = jobAlert.Category;
        }
        if (jobAlert.JobType) {
            jobAlert.JobType = jobAlert.JobType[0];
            selectedJobType = jobAlert.JobType;
        }
        selectedRemoteWorkOptionId = jobAlert.RemoteWorkOptionId;
        //selectedJobType = jobAlert.JobType;
        selectedSalary = jobAlert.MinimumSalary;
        jobAlert.Location = document.getElementById('job-alert-location-search-input').value;
        jobAlert.Keyword = document.getElementById('job-alert-keyword-search-input').value;
        var screenReaderChangeMessage = "";
        if (event) {
            screenReaderChangeMessage = self.getJobAlertChangeMessage(jobAlert, event);
        }
        OnlineApp.Services.jobAlertService.getAll().then(function (data) {
            data.jobAlerts.sort(function (a, b) {
                return a.SiteSource - b.SiteSource;
            });
            data.jobAlerts.forEach(function (value, i) {
                value.Index = i;
                if (value.JobAlertId == jobAlert.JobAlertId) {
                    jobAlert.SiteSource = value.SiteSource;
                }
            })

            OnlineApp.Services.jobAlertService.getJobAlertEditModel(jobAlert)
                .done(function (response) {
                    $jobAlertEditView.html(response.data);
                    $searchFormView.html(response.searchForm);

                    $jobAlertEditView.removeClass("hidden");
                    $jobAlertEditView.css({ height: window.screen.height - 95 });
                    hideScrollBar('html');
                    document.getElementById('save-job-alert').removeAttribute("disabled");
                    gJobs.screenReadersService.setAriaLiveNotification(screenReaderChangeMessage);
                    $("#skip-to-content-button").show();
                    gJobs.screenReadersService.silenceScreenreaderForBanner("");
                })
        })
    };

    self.clearFilter = function (jobAlert) {
        jobAlert.Location = document.getElementById('job-alert-location-search-input').value;
        jobAlert.Keyword = document.getElementById('job-alert-keyword-search-input').value;
        selectedCategory = null;
        selectedOrganization = null;
        selectedSalary = null;
        selectedRemoteWorkOptionId = 0;
        selectedJobType = null;
        //$("#skip-to-content-button").show();
        $("#skip-to-content-button").focus();
        OnlineApp.Services.jobAlertService.getJobAlertEditModel(jobAlert)
            .done(function (response) {
                var jobAlertId = document.getElementById('job-alert-id').textContent;
                $jobAlertEditView.html(response.data);
                document.getElementById('job-alert-id').textContent = jobAlertId;
                $searchFormView.html(response.searchForm);

                $jobAlertEditView.removeClass("hidden");
                $jobAlertEditView.css({ height: window.screen.height-95 });
                hideScrollBar('html');
                gJobs.screenReadersService.setAriaLiveNotification("Filter are cleared.");
                ARIA_LIVE_NOTIFICATION_CONTAINER.focus();
            })
    }

    self.clearFilterOnKeyDown = function (jobAlert, event) {
        if (event.keyCode == $.ui.keyCode.ENTER) {
            jobAlert.Location = document.getElementById('job-alert-location-search-input').value;
            jobAlert.Keyword = document.getElementById('job-alert-keyword-search-input').value;
            selectedCategory = null;
            selectedOrganization = null;
            selectedSalary = null;
            selectedRemoteWorkOptionId = 0;
            selectedJobType = null;
            //$("#skip-to-content-button").show();
            $("#skip-to-content-button").focus();
            OnlineApp.Services.jobAlertService.getJobAlertEditModel(jobAlert)
                .done(function (response) {
                    var jobAlertId = document.getElementById('job-alert-id').textContent;
                    $jobAlertEditView.html(response.data);
                    document.getElementById('job-alert-id').textContent = jobAlertId;
                    $searchFormView.html(response.searchForm);

                    $jobAlertEditView.removeClass("hidden");
                    $jobAlertEditView.css({ height: window.screen.height-95 });
                    hideScrollBar('html');
                    gJobs.screenReadersService.setAriaLiveNotification("Filter are cleared.");
                    ARIA_LIVE_NOTIFICATION_CONTAINER.focus();
                })
        }
    }

    self.blurInputs = function () {
        $('#job-alert-keyword-search-input').blur();
        $('#job-alert-location-search-input').blur();
    }

    self.anounceTooltip = function () {
        var isDisabled = document.getElementById('save-job-alert').disabled;
        if (isDisabled) {
            gJobs.screenReadersService.setAriaLiveNotification('To set a job alert, you must select/apply at least one filter. To apply a filter, click on the “Show results” button.');
            ARIA_LIVE_NOTIFICATION_CONTAINER.focus();
        }
    }

    self.disableSaveButton = function (e) {
        if (initialLocation === undefined) {
            initialLocation = document.getElementById('job-alert-location-search-input').value;
        }
        if (e.keyCode !== $.ui.keyCode.TAB && !e.shiftKey) {
            document.getElementById('save-job-alert').setAttribute("disabled", "disabled");
        }
    }

    self.jobAlertLocationFieldAfterRender = function () {
        var initOptions = {
            autocompleteMenuClassName: jobAlertLocationAutocompleteMenuClassName
        };

        var options = {
            searchFieldSelectors: [jobAlertSearchFieldSelector],
            additionalCssClassNames: initOptions.autocompleteMenuClassName
        };

        $(document).trigger(OnlineApp.Events.CommonEventsNames.InitSearchFieldsWithAutocomplete, options);

    };

    self.jobAlertKeywordFieldAfterRender = function () {
        var initOptions = {
            autocompleteMenuClassName: jobAlertKeywordAutocompleteMenuClassName
        };

        var options = {
            searchFieldSelectors: [jobAlertKeywordSearchFieldSelector],
            additionalCssClassNames: initOptions.autocompleteMenuClassName
        };

        $(document).trigger(OnlineApp.Events.CommonEventsNames.InitSearchFieldsWithAutocomplete, options);
    }

    self.showResults = function (className) {
        var jobAlert = [];
        jobAlert.Location = document.getElementById('job-alert-location-search-input').value;
        jobAlert.Keyword = document.getElementById('job-alert-keyword-search-input').value;
        jobAlert.JobAlertId = document.getElementById('job-alert-id').textContent;
        jobAlert.Organization = selectedOrganization;
        jobAlert.Category = selectedCategory;
        jobAlert.MinimumSalary = selectedSalary;
        jobAlert.RemoteWorkOptionId = selectedRemoteWorkOptionId;
        jobAlert.JobType = selectedJobType;

        OnlineApp.Services.jobAlertService.updateJobAlertEditModel(jobAlert)
            .done(function (response) {
                var jobAlertId = document.getElementById('job-alert-id').textContent;
                $jobAlertEditView.html(response.data);
                document.getElementById('job-alert-id').textContent = jobAlertId;
                $searchFormView.html(response.searchForm);

                $jobAlertEditView.removeClass("hidden");
                $jobAlertEditView.css({ height: window.screen.height-95 });
                hideScrollBar('html');
                document.getElementById('save-job-alert').removeAttribute("disabled");
                gJobs.screenReadersService.setAriaLiveNotification("New results are uploaded.");
                $("#skip-to-content-button").show();
                gJobs.screenReadersService.silenceScreenreaderForBanner("");
                if (className == "btn-gjobs-secondary") {
                    setFocusOnEditJobAlert(editJobAlertIndex);
                }
            })
    }
    
    self.toggleModels = function () {
        var loginModel = OnlineApp.ViewModels.applicationViewModel.loginViewModel;
        loginModel.signInViewModel.isActive(!loginModel.signInViewModel.isActive());
        loginModel.registerViewModel.isActive(!loginModel.registerViewModel.isActive());
    }

    self.closeAccessMembershipAlert = function () {
        if (window.enableStickyHeader) {
            $stickyHeader.show();
            $('#content').addClass('respect-sticky-header');
        }

        showHideElementsOnDialog(false);       

        self.showHideJobAlertAcessMembershipPopup(false, true);
        showScrollBar('html');
        $setJobAlertBtn.focus();
        checkAndRemoveEmailVerificationParam();
    }

    self.closeJobAlert = function (isAuthorizationPopup, isAddedSuccessfully, showEditPageBack) {
        if (window.enableStickyHeader) {
            if (!($jobAlertAccessMembershipPopup[0] && !$('#job-alert-access-membership-popup')[0])){
                $stickyHeader.show();
                $('#content').addClass('respect-sticky-header');
            }
        }

        showHideElementsOnDialog(false);

        gJobs.screenReadersService.setAriaLiveNotification("Set Job Alert modal is closed.");
        ARIA_LIVE_NOTIFICATION_CONTAINER.focus();

        OnlineApp.ViewModels.applicationViewModel.loginViewModel.signInViewModel.showJobAlert(false);
        OnlineApp.ViewModels.applicationViewModel.loginViewModel.registerViewModel.showJobAlert(false);

        if (isAuthorizationPopup) {
            showHideJobAlertAuthPopup(false);
            showScrollBar('html');
        }        
        else {
            showHideJobAlertPopup(false);
            if (showEditPageBack) {
                $jobAlertEditView.removeClass("hidden");
                var $tabbableElements;

                $tabbableElements = $('#account-settings')
                    .find(':tabbable');
                $tabbableElements.attr('tabindex', -1);
                $(".close-job-alert-edit-mode").attr('tabindex', 0);
                $("#job-alert-keyword-search-input").attr('tabindex', 0);
                $("#job-alert-location-search-input").attr('tabindex', 0);
                $("#show-results").attr('tabindex', 0);
                $("#save-job-alert").attr('tabindex', 0);
                $tabbableElements = $('#header-content')
                    .find(':tabbable');
                $tabbableElements.attr('tabindex', 0);
                $("#footer-new").hide();
                $tabbableElements = $jobAlertEditView
                    .find(':tabbable');
                $tabbableElements.attr('tabindex', 0);
                $("#footer-new").hide();
                $tabbableElements = $("#facet-container")
                    .find('a');
                $tabbableElements.attr('tabindex', 0);
                $('#save-job-alert').focus();
                $("#footer-new").hide();
                $stickyHeader.hide();
            }
            else {
                showScrollBar('html');
            }
        }

        if (isAddedSuccessfully) {
            OnlineApp.Services.jobAlertService.generateJobAlertAlreadyAddedView()
                .done(function (response) {
                    $('#job-alert-out-container').html(response);
                });
        }

        $setJobAlertBtn.focus();
        gJobs.dialogHelper.setTabIndexOnJobAlertsPopup("#setJobAlertDialog");

        checkAndRemoveEmailVerificationParam();        
    }

    function checkAndRemoveEmailVerificationParam() {
        if (window.enableEmailVerificationRefinements) {
            if (window.utils.getUrlParameter(displayJobAlertsLoginPopupQueryParameter)) {
                var currentUrl = removeEmailVerificationParametersFromUrl();
                history.pushState(null, "", currentUrl);
            }
        }
    }

    self.showJobAlertEditView = function () {
        $jobAlertEditView.removeClass("hidden");
        var $tabbableElements;
        $tabbableElements = $('#account-settings')
            .find(':tabbable');
        $tabbableElements.attr('tabindex', -1);
        $(".close-job-alert-edit-mode").attr('tabindex', 0);
        $("#job-alert-keyword-search-input").attr('tabindex', 0);
        $("#job-alert-location-search-input").attr('tabindex', 0);
        $("#show-results").attr('tabindex', 0);
        $("#save-job-alert").attr('tabindex', 0);
        $tabbableElements = $('#header-content')
            .find(':tabbable');
        $tabbableElements.attr('tabindex', 0);
        $tabbableElements = $jobAlertEditView
            .find(':tabbable');
        $tabbableElements.attr('tabindex', 0);
        $tabbableElements = $("#facet-container")
            .find('a');
        $tabbableElements.attr('tabindex', 0);
        hideScrollBar('html');
        $("#footer-new").hide();
        $('#save-job-alert').focus();
    }

    self.isAuthorized = ko.observable(false);

    self.loginLoaded = function () {
        $(document).trigger('JobAlertsViewModel:ViewLoaded');
    };

    self.goToAccountSettingsPage = function () {
        var accountSettingsPagePath = gJobs.accountSettingsHelper.getLinkForAccountSettings();

        window.open(accountSettingsPagePath, '_blank');
    };

    self.enrollAcessMembership = function () {
        OnlineApp.Services.dataService.accessMembership.post({
            wantsToUpgrade: true,
            credential: null
        }).done(function (data) {
            gJobs.common.analytics.trackEvent(
                'Access Membership Page',
                'Upgraded'
            );

            $jobAlertAccessMembershipPopup.remove();
            gJobs.screenReadersService.setAriaLiveNotification("Access Membership Enrolled and Set Job Alert modal is opened.");
            ARIA_LIVE_NOTIFICATION_CONTAINER.focus();
            $('#job-alert-out-container').removeClass('hidden');
            gJobs.dialogHelper.setTabIndexOnJobAlertsPopup("#setJobAlertDialog");
        });
    };

    self.showHideJobAlertAcessMembershipPopup = function (show, showShadow) {
        hideScrollBar('body');
        hideScrollBar('html');
        if (show) {
            $jobAlertAccessMembershipPopup.removeClass('hidden');
            if (showShadow) {
                $jobAlertShadow.removeClass('hidden');
                $headerShadow.removeClass('hidden');
            }
            gJobs.screenReadersService.setAriaLiveNotification("Enroll in Free Access Membership modal is opened.");
            ARIA_LIVE_NOTIFICATION_CONTAINER.focus();
            gJobs.dialogHelper.setTabIndexOnJobAlertsPopup('#job-alert-access-membership-popup');
            focusOnFistTabbableDialogElement($jobAlertAccessMembershipPopup);

        } else {
            $jobAlertAccessMembershipPopup.addClass('hidden');
            if (showShadow) {
                $jobAlertShadow.addClass('hidden');
                $headerShadow.addClass('hidden');
            }
            gJobs.screenReadersService.setAriaLiveNotification("Enroll in Free Access Membership modal is closed.");
            ARIA_LIVE_NOTIFICATION_CONTAINER.focus();
        }
    };

    function hideScrollBar(element) {
        $(element).css({ 'overflow': 'hidden' });
    }

    function showScrollBar(element) {
        $(element).css({ 'overflow-y': 'scroll' });
    }

    function focusOnFistTabbableDialogElement(element) {
        element.find(":tabbable").first().focus();
    }

    function focusOnEditButton(index) {
        if (index == undefined) {
            if (!$('.job-alert-edit-btn')[0]) return;
            $('.job-alert-edit-btn')[0].focus();
            setTimeout(function () { $('.job-alert-edit-btn')[0].focus(); }, 1500);
        }
        else {
            $('#skip-to-content-button').show();
            $('.job-alert-edit-btn')[index].focus();
            setTimeout(function () { $('.job-alert-edit-btn')[index].focus(); }, 1500);
        }
    }

    function setFocusOnEditJobAlert(i) {
        showHideElementsOnDialog(false);
        $jobAlertEditView.addClass("hidden");
        showScrollBar('html');
        $("#account-settings").attr('aria-hidden', false);
        var $tabbableElements;
        $tabbableElements = $('#account-settings').find(':tabbable');
        $tabbableElements.attr('tabindex', 0);
        $("#footer-new").show();
        $("#skip-to-content-button").show();
        if ($('.job-alert-edit-btn').length > 0) {
            $('.job-alert-edit-btn')[i].focus();
            setTimeout(function () { $('.job-alert-edit-btn')[i].focus(); }, 1500);
        }
    }

    function focusOnDeleteButton(index) {
        if (index !== undefined) {
            $('.job-alert-delete-btn')[index].focus();
        }
    }

    function showHideDeleteJobAlertPopup(show) {
        if (show) {
            $jobAlertShadow.removeClass('hidden');
            $deleteJobAlertPopup.removeClass('hidden');
            $headerShadow.removeClass('hidden');
        } else {
            $jobAlertShadow.addClass('hidden');
            $deleteJobAlertPopup.addClass('hidden');
            $headerShadow.addClass('hidden');
        }
    }

    function showHideJobAlertPopup(show) {
        if (show) {
            $jobAlertShadow.removeClass('hidden');
            $jobAlertPopup.removeClass('hidden');
            $headerShadow.removeClass('hidden');
        } else {
            $jobAlertShadow.addClass('hidden');
            $jobAlertPopup.addClass('hidden');
            $headerShadow.addClass('hidden');
        }
    }

    function showHideJobAlertAuthPopup(show) {
        hideScrollBar('body');
        hideScrollBar('html');
        if (show) {
            $jobAlertAuthorizationPopup.removeClass('hidden');
            $jobAlertShadow.removeClass('hidden');
            $headerShadow.removeClass('hidden');
        } else {
            $jobAlertAuthorizationPopup.addClass('hidden');
            $jobAlertShadow.addClass('hidden');
            $headerShadow.addClass('hidden');
        }
    }    

    function removeEmailVerificationParametersFromUrl() {
        var currentUrl = window.location.href.replace(/&?(displayJobAlertsLoginPopup)=([^&]$|[^&]*)/ig, "");

        return currentUrl;
    }

    function addEmailVerificationParametersToUrl() {
        var currentUrl = window.location.search + "&displayJobAlertsLoginPopup=true";

        return currentUrl;
    }

    $(document).ready(function() {
        if (window.enableEmailVerificationRefinements) {
            if (window.utils.getUrlParameter(displayJobAlertsLoginPopupQueryParameter)) {
                self.setJobAlert();
            }
        }
    });

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        jobAlertsViewModel: JobAlertsViewModel
    });

})(window); ;
(function(window, undefined) {
    'use strict';

    // defines question template types for Knockout
    // value is a template id
    var QuestionTemplateType = {
        DropDownSingle: "DropDownSingle",
        DropDownMultiple: "DropDownMultiple",
        RadioGroup: "RadioGroup",
        CheckboxGroup: "CheckboxGroup",
        RadioYesNo: "RadioYesNo",
        Text: "Text"
    };

    // Question-Answer flat view model
    // represents one question-answer instance

    function QuestionWithAnswerViewModel() {
        var self = OnlineApp.ViewModels.Base.ValidatableViewModel.apply(this, arguments) || this;

        var noAnswerText = "No answer(s) specified";

        self.questionID = ko.observable();
        self.questionSqlID = ko.observable();
        self.questionText = ko.observable();
        self.questionType = ko.observable();
        self.questionGroup = ko.observable();
        self.questionOptions = ko.observable();
        self.isRequired = ko.observable();

        self.answerID = ko.observable();
        self.answerType = ko.observable();
        self.textAnswer = ko.observable();

        // checkboxes and multiselects are bound to arrays
        // whereas radio button - to just values
        self.selectAnswers = ko.observableArray([]);
        self.selectAnswer = ko.computed({
            read: function() {
                var values = self.selectAnswers();
                return (values && values.length) ? values[0] : undefined;
            },
            write: function(newValue) {
                var intValue = parseInt(newValue);

                if (isNaN(intValue)) {
                    self.selectAnswers([]);
                    return;
                }

                self.selectAnswers([intValue]);
            },
            owner: self
        });

        self.questionLabel = ko.computed(function () {
            var text = self.questionText();
            return utils.stripHtmlTags(text);
        });

        self.stripString = function (question) {
            /*
                lowercase entire question text
                remove all words except first 10
                remove all letters except alphanumeric, dash and space
                replace multiple whitespace with single space
                replace space with dash
                replace multiple dashes with single dash
            */
            var stripped = question
                .toLowerCase()
                .replace(/[^0-9a-z -]/gi, '')
                .replace(/(([^\s]+\s\s*){10})(.*)/,"$1")
                .replace(/\s\s+/g, ' ')
                .replace(/\s/g, "-")
                .replace(/--+/g, "-")
            ;
            return stripped;
        };

        self.getHTMLNameOrIdFromQuestionText = function(tabPrefix, sectionPrefix, sufix) {
            return (tabPrefix || '') + (sectionPrefix || '') + self.stripString(self.questionText()) + self.stripString(sufix || '');
        };

        self.getLabelledBy = function(tabPrefix, sectionPrefix, sufix) {
            return 'label-' + self.getHTMLNameOrIdFromQuestionText(tabPrefix, sectionPrefix, sufix);
        };

        self.questionNumberText = function(index) {
            var number = index + 1;
            return number < 10 ? "0" + number : "" + number;
        };

        self.onRadioGroupEnter = function (context, ev) {
            var $currentTarget = $(ev.currentTarget);

            // this attribute was required to show the question text in jaws hot keys
            $currentTarget.removeAttr('aria-label');

            var $target = $(ev.target);

            var questionAnswer = $target.attr('aria-label');
            var questionText = 'Question ' + $currentTarget.data('question-number') + '. ' + self.questionLabel();

            // set notification to prevent from truncated announcement of question text
            $target.attr('aria-label', questionText + questionAnswer);

            $target.one('blur', function () {
                $target.attr('aria-label', questionAnswer);
                $currentTarget.attr('aria-label', questionText);
            });
        };

        self.draftJobApplicationQuestionType = ko.observable();

        self.templateType = ko.computed(function() {
            /*  <QuestionType>
                Text = 1,
                ScrollingText = 2,
                DropDownSingle = 3,
                Checkbox = 4,
                Radio = 5,
                DropDownYesNo = 6,
                DropDownMultiple = 7,
            */

            /*  <QuestionGroup>
                Text = 1,
                Select = 2,
                YesNo = 3
            */

            // "Text" template by default
            var templateType = QuestionTemplateType.Text;

            if (self.questionType() === 6 && self.questionGroup() === 3) {
                templateType = QuestionTemplateType.RadioYesNo;
            } else if (self.questionType() === 7 && self.questionGroup() === 2) {
                templateType = QuestionTemplateType.DropDownMultiple;
            } else if (self.questionType() === 3 && self.questionGroup() === 2) {
                templateType = QuestionTemplateType.DropDownSingle;
            } else if (self.questionType() === 5 && self.questionGroup() === 2) {
                templateType = QuestionTemplateType.RadioGroup;
            } else if (self.questionType() === 4 && self.questionGroup() === 2) {
                templateType = QuestionTemplateType.CheckboxGroup;
                //templateType = QuestionTemplateType.DropDownMultiple;
            }

            return templateType;
        });

        self.readonlyAnswerText = ko.computed(function() {
            var templateType = self.templateType();
            var selectAnswers = self.selectAnswers();
            var options = self.questionOptions();
            var text = self.textAnswer();

            switch (templateType) {
            case QuestionTemplateType.RadioYesNo:
                if (selectAnswers && selectAnswers[0] == '1') { // allow implicit type conversion from 1 to '1' if needed
                    return 'Yes';
                } else if (selectAnswers && selectAnswers[0] == '0') {
                    return 'No';
                } else if (text == '1') {
                    return 'Yes';
                } else if (text == '0') {
                    return 'No';
                } else {
                    return noAnswerText;
                }
            case QuestionTemplateType.RadioGroup:
            case QuestionTemplateType.DropDownSingle:
                if (!selectAnswers) {
                    return noAnswerText;
                }

                // in radio group - only one is selected
                var selectedValue = selectAnswers.join();

                for (var i in options) {
                    var option = options[i];
                    if (option.sqlID == selectedValue) {
                        return option.optionTitle;
                    }
                }
                return noAnswerText;
            case QuestionTemplateType.Text:
                if (!!text) {
                    return utils.normalizeNewlines(text);
                }
                return noAnswerText;
            case QuestionTemplateType.DropDownMultiple:
            case QuestionTemplateType.CheckboxGroup:
                if (!selectAnswers) {
                    return noAnswerText;
                }

                var optionNames = [];

                for (var o in options) {
                    var option = options[o];

                    for (var s in selectAnswers) {
                        var selectedValue = selectAnswers[s];

                        if (option.sqlID == selectedValue) {
                            optionNames.push(option.optionTitle);
                        }
                    }
                }

                return optionNames.length > 0 ? optionNames.join(", ") : noAnswerText;
            default:
                return noAnswerText;
            }
        });

        self.fromDataModel = function(data) {
            self.questionID(data.questionID);
            self.questionSqlID(data.questionSqlID);
            self.questionText(data.questionText);
            self.questionType(data.questionType);
            self.questionGroup(data.questionGroup);
            self.questionOptions(data.questionOptions);
            self.isRequired(data.isRequired);

            self.answerID(data.answerID);
            self.answerType(data.answerType);
            self.textAnswer(data.textAnswer);

            // ?? investigate - make array of strings for correct processing
            self.selectAnswers(data.selectAnswers || []);

            if (self.templateType() === QuestionTemplateType.CheckboxGroup) {
                // make array of strings for correct processing
                var selectAnswers = ko.utils.arrayMap(self.selectAnswers(), function(item) {
                    return item + "";
                });
                self.selectAnswers(selectAnswers);
            }

            if (self.templateType() === QuestionTemplateType.RadioYesNo) {
                if (!data.selectAnswers) {
                    // don't put anything by default
                    //self.selectAnswers([0]);
                    //self.selectAnswer(0);
                } else {
                    self.selectAnswer(data.selectAnswers[0]);
                }
            }

            /*
                Validation
            */

            var config = {
                'all': {}
            };

            if (self.templateType() === QuestionTemplateType.Text) {
                config.all.textAnswer = {
                    disallowHtml: {}
                };
            }

            if (self.isRequired()) {
                if (self.templateType() === QuestionTemplateType.Text) {
                    if (!config.all.textAnswer) {
                        config.all.textAnswer = { };
                    }
                    config.all.textAnswer.required = { };
                } else {
                    config.all.selectAnswer = {
                        required: {}
                    };
                }
            }

            if (config.all.textAnswer || config.all.selectAnswer){
                self.registerValidation(config);
            }

            return self;
        };

        // track only a couple of properties
        self.dirtyFlag = new ko.dirtyFlag({
            textAnswer: self.textAnswer,
            selectAnswers: self.selectAnswers
        });
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels.Questions', {
        QuestionWithAnswerViewModel: QuestionWithAnswerViewModel
    });

})(window);;
(function(window, undefined) {
    'use strict';

    var vm = OnlineApp.ViewModels;

    function QuestionsBaseViewModel() {

        var self = vm.Base.EditableViewModel.apply(this, arguments) || this;

        // 3.4.5 The AWQ/SQ pages will support auto-save functionality
        // every 10 seconds as the job seeker fills in the answers.
        // see implementation below
        var timerDelayMs = 10000;
        var timeoutId = null;

        // flag to determine first-time visit
        // we need to suppressValidationErrors only the first time user visits questions tab
        var visited = false;

        function getQuestionsWithAnswers() {
            // "=" equal sign is necessary here if we pass string as a POST data
            // http://stackoverflow.com/questions/13771032/post-string-to-asp-net-web-api-application-returns-null
            //return "=" + ko.toJSON(self.questionsWithAnswers());

            // however "=" is not necessary if we wrap json into the object
            // { JsonQas: getQuestionsWithAnswers() }
            var qas = ko.utils.arrayMap(self.questionsWithAnswers(), function(item) {
                return {
                    questionID: item.questionID(),
                    questionSqlID: item.questionSqlID(),
                    questionType: item.questionType(),

                    answerID: item.answerID(),
                    answerType: item.answerType(),
                    textAnswer: item.textAnswer(),

                    selectAnswers: item.selectAnswers()
                };
            });

            return ko.toJSON(qas);
        }

        function getQuestionsWithAnswersForAutosave() {
            var qas = ko.utils.arrayMap(self.questionsWithAnswers(), function(item) {

                var textAnswer = item.textAnswer();

                if (item.questionType() === 1 || item.questionType() === 2) {
                    if (!OnlineApp.Validation.disallowHtmlValidator.validate(textAnswer, {})) {
                        textAnswer = '';
                    }
                }

                return {
                    questionID: item.questionID(),
                    questionSqlID: item.questionSqlID(),
                    questionType: item.questionType(),

                    answerID: item.answerID(),
                    answerType: item.answerType(),
                    textAnswer: textAnswer,

                    selectAnswers: item.selectAnswers()
                };
            });
            return ko.toJSON(qas);
        }

        self.enableAutosave = ko.observable(true);

        self.questionsWithAnswers = ko.observableArray();

        self.verbiage = ko.observable();

        self.displayButtonsBlock = ko.observable(true);

        // 3.4.4 It is possible that there is a job with no AWQs and/or SQs.
        // In that case, the UI does not display these sections to the end user
        // if there are no questions to be included.
        self.displaySection = ko.observable(true);

        self.areAnswersPrepopulated = ko.observable(false);

        self.validate = function() {
            var isValid = true;

            var itemToValidate = self.editableItem() || self;
            ko.utils.arrayForEach(itemToValidate.questionsWithAnswers(), function(q) {
                if (!q.validate()) {
                    isValid = false;
                }
            });

            self.hasError(!isValid);

            return isValid;
        };

        self.suppressValidationErrors = function () {
            var itemToValidate = self.editableItem() || self;

            ko.utils.arrayForEach(itemToValidate.questionsWithAnswers(), function(q) {
                self.suppressValidationErrorsFor(q);
            });
        };

        self.hasError = ko.observable(false);

        self.fromDataModel = function(data) {
            if (!data || !data.questionsWithAnswers ||
                !(data.questionsWithAnswers.length && data.questionsWithAnswers.length > 0)) {

                self.displaySection(false);
                return;
            }

            self.questionsWithAnswers(ko.utils.arrayMap(data.questionsWithAnswers, function(item) {
                var viewModel = new vm.Questions.QuestionWithAnswerViewModel();
                return viewModel.fromDataModel(item);
            }));

            self.verbiage = data.verbiage;
            self.areAnswersPrepopulated = data.isPrepopulated;

            // when we load and set everything
            // we mark model as clean
            self.resetIsDirty();

            if (self.enableAutosave()) {
                // when model becomes dirty
                // we autosave its state and mark it as clean
                self.isDirty.subscribe(function (isDirty) {

                    if (!timeoutId && isDirty && self.isInEditMode()) {
                        //console.log("dirty - setting timeout");

                        timeoutId = window.setTimeout(function () {
                            window.clearTimeout(timeoutId); // ?? not working
                            timeoutId = null;

                            // model might be already saved (clean) when user went and submitted the app really fast (very rare case)
                            if (self.isDirty()) {
                                // reset isDirty flag when autosave is triggered
                                self.resetIsDirty();

                                // save answers
                                self.saveChanges(null, true);

                                $(document).trigger("questionsAutosaved");
                            }
                        }, timerDelayMs);
                    }
                });
            }
        };

        self.beginEdit = (function(base) {
            return function(item, e) {

                if (!item) {
                    self.isInEditMode(true);
                    self.editableItem(self);

                    if (OnlineApp.Events) {
                        $(document).trigger(
                            OnlineApp.Events.CommonEventsNames.EditableItemBeginEdit, {
                                item: item,
                                isQuestionsItem: true
                            });
                    }
                } else {
                    base(item);
                }

                // suppressValidationErrors - do not show validation errors when we open questions tab
                if (!visited) {
                    self.suppressValidationErrors();
                    visited = true;
                } else {
                    self.validate();
                }
            };
        })(self.beginEdit);

        self.endEdit = (function(base) {
            return function(item) {
                if (!item) {
                    item = self;
                }

                var editedItem = base(item);

                // set edited item as readonly
                item.fromViewModel(editedItem);

                return editedItem;
            };
        })(self.endEdit);

        self.saveChanges = (function(base) {
            return function(item, e) {
                // to end editing call base method
                // don't call base here!
                // base(item);

                // second param might come as event source
                // we are faiting for a flag
                var triggeredByAutosave = (typeof e === "boolean" && e === true);

                // if triggered via autosave function => no validation
                var proceedSaving = triggeredByAutosave ? true : self.validate();

                if (proceedSaving) {
                    // set readonly state
                    return self.save({
                        JsonQuestionsWithAnswers: triggeredByAutosave ? getQuestionsWithAnswersForAutosave() : getQuestionsWithAnswers(),
                        Autosave: true // saves questions without server-validation
                    }, triggeredByAutosave).done(function() {

                        if (!triggeredByAutosave && e) {
                            var containerMetrics = getParentContainerMetrics(e.target);
                            var $editableItemContainer = getParentContainer(e.target).parent();

                            var editedItem = self.endEdit(item);
                            // set edited item as readonly
                            item.fromViewModel(editedItem);

                            sendEndEditEvent(containerMetrics, $editableItemContainer);
                        }
                    }); // bypass validation if needed
                } else if (!triggeredByAutosave) {
                    var validationFailedEvent =
                        jQuery.Event(OnlineApp.Events.CommonEventsNames.PreSaveValidationFailed);
                    validationFailedEvent.target = e.target;
                    $(document).trigger(validationFailedEvent);
                }
            };
        })(self.saveChanges);

        self.dirtyItems = ko.computed(function() {
            var itemToCheck = self.editableItem() || self;

            return ko.utils.arrayFilter(itemToCheck.questionsWithAnswers(), function(q) {
                return q.dirtyFlag.isDirty();
            });
        });

        self.isDirty = ko.computed(function() {
            var isDirty = self.dirtyItems().length > 0;

            //console.log(isDirty ? "Dirty" : "Clean");

            return isDirty;
        });

        self.resetIsDirty = function() {
            var itemToReset = self.editableItem() || self;

            ko.utils.arrayForEach(itemToReset.questionsWithAnswers(), function(q) {
                return q.dirtyFlag.reset();
            });
        };

        function getParentContainerMetrics(child) {

            var $container = getParentContainer(child);

            if (!$container) {
                return null;
            }

            var metrics = {
                offset: $container.offset(),
                position: $container.position(),
                padding: parseInt($container.css('padding-top') || 0),
                containerScroll: $container.scrollParent().scrollTop()
            };

            return metrics;
        }

        function getParentContainer(child) {
            if (!child) {
                return null;
            }

            var $container = $(child).closest('.edit-dialog');

            return $container;
        }

        var sendEndEditEvent = function (containerMetrics, $container, dontScrollAfterEditing) {
            var editCompleteEvent = jQuery.Event(OnlineApp.Events.CommonEventsNames.EditItemComplete);
            editCompleteEvent.targetMetrics = containerMetrics;
            editCompleteEvent.editableItemContainer = $container;
            editCompleteEvent.dontScrollAfterEditing = dontScrollAfterEditing;
            $(document).trigger(editCompleteEvent);
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels.Questions', {
        QuestionsBaseViewModel: QuestionsBaseViewModel
    });

})(window);;
(function(window, undefined) {
    'use strict';

    var vm = OnlineApp.ViewModels;

    function QuestionsReadonlyViewModel() {
        var self = vm.Base.BaseViewModel.apply(this, arguments) || this;

        self.questionsWithAnswers = ko.observableArray([]);

        self.fromDataModel = function(data) {
            if (!data) {
                return;
            }

            self.questionsWithAnswers(ko.utils.arrayMap(data, function(item) {
                var viewModel = new vm.Questions.QuestionWithAnswerViewModel();
                return viewModel.fromDataModel(item);
            }));
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels.Questions', {
        QuestionsReadonlyViewModel: QuestionsReadonlyViewModel
    });

})(window);;
(function(window, undefined) {
    'use strict';

    var vm = OnlineApp.ViewModels;

    function AgencyWideQuestionsViewModel() {
        var config = {
            endpoint: 'agencyWideQuestions',
            passJobId: true
        };

        var self = vm.Questions.QuestionsBaseViewModel.call(this, config) || this;


        self.saveChanges = (function (base) {
            return function () {
                // $(document).trigger(OnlineApp.Events.CommonEventsNames.QuestionsSaved, 'AgencyWide');

                return base.apply(self, arguments);
            };
        })(self.saveChanges);
    }

    function SupplementaryQuestionsViewModel() {
        var config = {
            endpoint: 'supplementaryQuestions',
            passJobId: true
        };

        var self = vm.Questions.QuestionsBaseViewModel.call(this, config) || this;


        self.saveChanges = (function (base) {
            return function () {
                // $(document).trigger(OnlineApp.Events.CommonEventsNames.QuestionsSaved, 'Supplementary');

                return base.apply(self, arguments);
            };
        })(self.saveChanges);
    }

    function QuestionsViewModel() {

        var self = vm.Base.CompositeEditableViewModel.apply(this, arguments) || this;


        self.questionsTabActive = ko.observable(false);

        self.agencyWideQuestionsViewModel = new AgencyWideQuestionsViewModel();

        self.supplementaryQuestionsViewModel = new SupplementaryQuestionsViewModel();



        self.initSwitchingTabsBehavior = function() {
            if (OnlineApp.Controllers && OnlineApp.Controllers.navigationMenuController) {
                OnlineApp.Controllers.navigationMenuController.onTab('shown', function(e) {

                    var tabId = $(e.target).attr("href");

                    // hide autosave message if we are not in the context of Questions tab
                    var autosaveNotification = $(".autosave");
                    autosaveNotification.hide();

                    self.questionsTabActive(false);

                    if (tabId == "#questions-tab") {
                        self.switchSectionsToEditMode();
                        self.hideButtonsBlock();

                        autosaveNotification.show();

                        self.questionsTabActive(true);
                    } else if (tabId == "#review-tab") {
                        self.switchSectionsToReadonlyMode();
                        self.showButtonsBlock();
                    }
                });
            }
        };

        self.load = function() {
            self.agencyWideQuestionsViewModel.load();
            self.supplementaryQuestionsViewModel.load();
        };


        self.switchSectionsToEditMode = function() {
            if (!self.agencyWideQuestionsViewModel.isInEditMode()) {
                self.agencyWideQuestionsViewModel.beginEdit();
            }

            if (!self.supplementaryQuestionsViewModel.isInEditMode()) {
                self.supplementaryQuestionsViewModel.beginEdit();
            }
        };

        self.switchSectionsToReadonlyMode = function() {
            if (self.agencyWideQuestionsViewModel.isInEditMode()) {
                self.agencyWideQuestionsViewModel.endEdit();
            }

            if (self.supplementaryQuestionsViewModel.isInEditMode()) {
                self.supplementaryQuestionsViewModel.endEdit();
            }
        };

        self.displaySection = ko.computed(function() {
            return self.agencyWideQuestionsViewModel.displaySection() ||
                self.supplementaryQuestionsViewModel.displaySection();
        });

        self.showButtonsBlock = function() {
            self.agencyWideQuestionsViewModel.displayButtonsBlock(true);
            self.supplementaryQuestionsViewModel.displayButtonsBlock(true);
        };

        self.hideButtonsBlock = function() {
            self.agencyWideQuestionsViewModel.displayButtonsBlock(false);
            self.supplementaryQuestionsViewModel.displayButtonsBlock(false);
        };

        self.saveChanges = function() {
            self.agencyWideQuestionsViewModel.saveChanges(null, true);
            self.supplementaryQuestionsViewModel.saveChanges(null, true);
        };

        (function () {
            self.addParts([
                self.agencyWideQuestionsViewModel,
                self.supplementaryQuestionsViewModel
            ]);
        })();

    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels.Questions', {
        QuestionsViewModel: QuestionsViewModel
    });

})(window);;
(function(window, undefined) {
    'use strict';

    var notificationIntervalId = null;
    $(document).on("questionsAutosaved", function() {
        var autosaveNotification = $(".autosave");
        var qvm = OnlineApp.ViewModels.applicationViewModel.questionsViewModel;

        // check if jQuery found anything
        if (autosaveNotification.length) {
            autosaveNotification.text("Saved a moment ago");

            if (qvm.questionsTabActive()) {
                autosaveNotification.show();
            }

            var autosavedAt = new Date();
            var notificationDelaySeconds = 30;
            var timePassedSeconds = 0;

            if (notificationIntervalId) {
                window.clearInterval(notificationIntervalId);
                notificationIntervalId = null;
            }

            notificationIntervalId = window.setInterval(function() {
                timePassedSeconds += notificationDelaySeconds;

                if (timePassedSeconds === notificationDelaySeconds) {
                    autosaveNotification.text("Saved " + notificationDelaySeconds + " seconds ago");
                } else if (timePassedSeconds === notificationDelaySeconds * 2) {
                    autosaveNotification.text("Saved a minute ago");
                } else {
                    autosaveNotification.text("Saved at " + window.utils.formatDateTimeAMPM(autosavedAt));
                    window.clearInterval(notificationIntervalId);
                    notificationIntervalId = null;
                }
            }, notificationDelaySeconds * 1000);
        }
    });

})(window);;
(function(window, undefined) {
    'use strict';

    var layoutHelper = OnlineApp.Helpers.layoutHelper;

    var _fieldSettings = {};

    function InstitutionViewModel() {

        var self = OnlineApp.ViewModels.Base.EditableViewModel.apply(this, arguments) || this;
        var _prefix = 'education';

        self.id = ko.observable();
        self.schoolName = ko.observable();
        self.address = new OnlineApp.ViewModels.Common.AddressViewModel(_prefix);
        self.schoolType = new OnlineApp.ViewModels.Common.SchoolTypeViewModel();

        self.degree = new OnlineApp.ViewModels.Common.SchoolDegreeViewModel();
        self.unitsCompleted = ko.observable();
        self.unitType = ko.observable();
        self.collegeMajorMinor = ko.observable();
        self.highSchoolHighestLevel = new OnlineApp.ViewModels.Common.HighSchoolHighestLevelViewModel();
        self.phone = ko.observable();
        self.website = ko.observable();
        self.startYear = ko.observable();
        self.endYear = ko.observable();
        self.startMonth = ko.observable();
        self.startMonthName = ko.computed(function() {
            return OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.month.findItemById(self.startMonth()).text;
        });
        self.endMonth = ko.observable();
        self.endMonthName = ko.computed(function() {
            return OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.extendedMonth.findItemById(self.endMonth()).text;
        });
        self.endMonthIsPresent = ko.observable(false).extend({ ignoreOnSerialization: true });
        self.endMonth.subscribe(function(value) {
            var isPresent = value === 14;
            if (isPresent) {
                self.endYear(undefined);
            }
            self.endMonthIsPresent(isPresent);
        });
        self.startDateIsOlderThanEndDate = ko.observable();
        self.isGraduated = ko.observable();
        self.isGedReceived = ko.observable();

        self.educationSeparator = ko.computed(function () {
            var endMonth = self.endMonth();
            var endYear = self.endYear();

            var isEndDateEmpty = false;
            if(!endMonth && !endYear)
                return "";

            return "-";
        }).extend({ ignoreOnSerialization: true });


        self.currentSchoolDegrees = ko.observableArray([]);

        self.fieldStates = {
            highSchoolHighestLevel: ko.computed(function () {
                return (self.schoolType.id() === 1);
            }),
            collegeMajorMinor: ko.computed(function () {
                return (self.schoolType.id() !== 1);
            }),
            collegeUnitsCompleted: ko.computed(function () {
                return (self.schoolType.id() !== 1);
            }),
            collegeUnitType: ko.computed(function () {
                return (self.schoolType.id() !== 1);
            }),
            gedReceived: ko.computed(function () {
                return (self.schoolType.id() === 1);
            }),
            doNotCollectHighSchoolDates: ko.computed(function () {
                if (self.schoolType.id() === 1) {
                    var employerSettings = OnlineApp.ViewModels.applicationViewModel.employerSettings;
                    if (employerSettings) {
                        return employerSettings.doNotCollectHighSchoolEduDates;
                    }
                }
                return false;
            }).extend({ ignoreOnSerialization: true })
        };

        self.isStartYearRequired = ko.computed(function(){
            if (self.fieldStates.doNotCollectHighSchoolDates()) {
                return false;
            }
            return (!!_fieldSettings ? !!_fieldSettings.educationStartDate.required : false)
                || (self.startMonth() > 0 && self.startMonth() < 13);
        });

        self.isEndYearRequired = ko.computed(function(){
            if (self.endMonthIsPresent() || self.fieldStates.doNotCollectHighSchoolDates()) {
                return false;
            }
            return (!!_fieldSettings ? !!_fieldSettings.educationEndDate.required : false)
                    || (self.endMonth() > 0 && self.endMonth() < 13);
        });

        self.isViewBoxVisible = {
            general: function () {
                return _fieldSettings.educationSchoolType.visible ||
                       _fieldSettings.educationSchoolName.visible ||
                       _fieldSettings.educationCity.visible ||
                       _fieldSettings.educationState.visible ||
                       _fieldSettings.educationCountry.visible ||
                       _fieldSettings.educationWebsite.visible;
            },

            degrees: function () {
                return _fieldSettings.educationMajorMinor.visible ||
                       _fieldSettings.educationDegree.visible ||
                       _fieldSettings.educationUnitsCompleted.visible ||
                       _fieldSettings.educationUnitType.visible;
            },

            dates: function () {
                return !self.fieldStates.doNotCollectHighSchoolDates() &&
                       (_fieldSettings.educationStartDate.visible ||
                       _fieldSettings.educationEndDate.visible);
            }
        };

        self.getCurrentSchoolDegrees = function () {

            var schoolDegrees = OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.schoolDegrees.items(),
                schoolTypeId = self.schoolType.id(),
                currentSchoolDegrees = $.grep(schoolDegrees, function(degree) {
                    return degree.schoolType === schoolTypeId;
                });

            self.currentSchoolDegrees(currentSchoolDegrees);
            self.currentSchoolDegrees.extend({ ignoreOnSerialization: true });
            OnlineApp.Helpers.layoutHelper.updateSchoolDegreeCustomSelect();
        };

        self.getCurrentSchoolDegreesAsync = function() {
            var promise = OnlineApp.Services.dataService.definitions.schoolDegrees
                .get(null, {
                    schoolTypeId: self.schoolType.id()
                })
                .done(function(data) {
                    self.currentSchoolDegrees(data);

                    OnlineApp.Helpers.layoutHelper.updateSchoolDegreeCustomSelect();
                });

            return promise;
        };

        self.getValidationConfig = function () {

            var getDatesForTimespanValidator = function() {
                return {
                    startMonth: self.startMonth,
                    startYear: self.startYear,
                    endMonth: self.endMonth,
                    endYear: self.endYear
                };
            };

            var settings = OnlineApp.ViewModels.applicationViewModel.applicationSettings || {};

            var config = {
                'all': {
                    // school validation block
                    'schoolType.id': {
                        required: {},
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.schoolTypes,
                            validationMessage: 'This field is required'
                        }
                    },
                    'schoolName': {
                        required: {},
                        length: {
                            max: 100
                        },
                        disallowHtml: {}
                    },
                    'degree.id': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.educationDegree.required :
                                false
                        },
                        definitionAwareValue: {
                            definitionItems: self.currentSchoolDegrees,
                            validationMessage: 'This field is required'
                        }
                    },
                    'unitsCompleted': {
                        required: {
                            enabled: [
                                !!_fieldSettings ? !!_fieldSettings.educationUnitsCompleted.required : false,
                                self.fieldStates.collegeUnitsCompleted
                            ]
                        },
                        numeric: {
                            enabled: [
                                settings.MandatoryEducationHistoryUnits != null,
                                self.fieldStates.collegeUnitsCompleted
                            ],
                            allowFloat: true,
                            min: 1
                        },
                        length: {
                            max: 10
                        },
                        disallowHtml: {}
                    },
                    'unitType': {
                        required: {
                            enabled: [
                                !!_fieldSettings ? !!_fieldSettings.educationUnitType.required : false,
                                self.fieldStates.collegeUnitType
                            ]
                        }
                    },
                    'collegeMajorMinor': {
                        required: {
                            enabled: [
                                !!_fieldSettings ?
                                    !!_fieldSettings.educationMajorMinor.required :
                                    false,
                                self.fieldStates.collegeMajorMinor
                            ]
                        },
                        length: {
                            max: 100
                        },
                        disallowHtml: {}
                    },
                    'address.city': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.educationCity.required :
                                false
                        },
                        length: {
                            max: 50
                        },
                        disallowHtml: {}
                    },
                    'address.state.id': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.educationState.required :
                                false
                        },
                        state: {
                            onlyIf: function () {
                                return self.address.country.id() && self.address.state.id();
                            },
                            states: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.states.items(),
                            countryId: self.address.country.id
                        }
                    },
                    'address.country.id': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.educationCountry.required :
                                false
                        },
                    },
                    'website': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.educationWebsite.required :
                                false
                        },
                        length: {
                            max: 100
                        },
                        url: {}
                    },

                    // year validation block
                    'startYear': {
                        required: {
                            enabled: [
                                function() {
                                    return self.isStartYearRequired();
                                }
                            ]
                        },
                        year: {},
                        timespanStartIsNotAfterEnd: getDatesForTimespanValidator()
                    },
                    'endYear': {
                        required: {
                            enabled: [
                                function () {
                                    return self.isEndYearRequired();
                                }
                            ]
                        },
                        year: {},
                        timespanStartIsNotAfterEnd: getDatesForTimespanValidator()
                    },
                    'startMonth': {
                        required: {
                            enabled: [
                                function () {
                                    if (self.fieldStates.doNotCollectHighSchoolDates()) {
                                        return false;
                                    }
                                    return (!!_fieldSettings ? !!_fieldSettings.educationStartDate.required : false);
                                }
                            ]
                        },
                        month: {},
                        timespanStartIsNotAfterEnd: getDatesForTimespanValidator()
                    },
                    'endMonth': {
                        required: {
                            enabled: [
                                function () {
                                    if (self.fieldStates.doNotCollectHighSchoolDates()) {
                                        return false;
                                    }
                                    return (!!_fieldSettings ? !!_fieldSettings.educationEndDate.required : false);
                                }
                            ]
                        },
                        extendedMonth: {},
                        timespanStartIsNotAfterEnd: getDatesForTimespanValidator()
                    },
                    'startDateIsOlderThanEndDate': {
                        timespanStartIsNotAfterEnd: getDatesForTimespanValidator(),
                        dependsOn: [self.startYear, self.startMonth, self.endYear, self.endMonth]
                    },
                    'isGraduated': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.educationDidYouGraduate.required :
                                false
                        }
                    }
                }
            };

            return config;
        };

        self.fromDataModel = function(data) {
            if (!data) {
                return;
            }

            self.id(data.id);
            self.schoolType.fromDataModel(data.schoolType);
            self.schoolName(data.schoolName);
            self.address.fromDataModel(data.address);
            self.degree.fromDataModel(data.degree);
            self.unitsCompleted(data.unitsCompleted);
            self.unitType(data.unitType);
            self.collegeMajorMinor(data.collegeMajorMinor);

            self.highSchoolHighestLevel.fromDataModel(data.highSchoolHighestLevel);
            self.phone(data.phone);
            self.website(data.website);
            self.startYear(data.startYear);
            self.endYear(data.endYear);
            if (self.endMonth() === 14) {
                self.endYear(undefined);
            }
            self.startMonth(data.startMonth);
            self.endMonth(data.endMonth);
            self.isGraduated(data.isGraduated);
            self.isGedReceived(data.isGedReceived);

            return self;
        };

        /*
            Subscriptions
        */

        self.schoolType.id.subscribe(function () {
            // async no longer needed - all definitions are fetched in one single call
            // self.getCurrentSchoolDegreesAsync();
            self.getCurrentSchoolDegrees();

            layoutHelper.tabbing.updateIndices();
        });

        /*
            Validation
        */
        (function () {
            self.registerValidation(
                self.getValidationConfig()
            );
        })();
    }

    function EducationViewModel() {
        var config = {
            endpoint: "educations",
            passResumeTemlateId: true,
            passJobId: true
        };

        _fieldSettings = OnlineApp.FieldSettings;

        var self = OnlineApp.ViewModels.Base.EditableCollectionViewModel.call(this, config) || this;

        self.itemTemplate = ko.observable(InstitutionViewModel);

        self.sortedItems = ko.computed(function () {
            var items = self.items().slice(0);
            items.sort(function (a, b) { return utils.compareYearAndMonth(a.startYear(), a.startMonth(), b.startYear(), b.startMonth()); });
            return items;
        });

        self.radioButtonOptions = ko.observable({
            didYouGraduate: [
                {
                    value: 'Yes',
                    label: 'Yes',
                    id: 'did-you-graduate-yes',
                    name: 'did-you-graduate'
                },
                {
                    value: 'No',
                    label: 'No',
                    id: 'did-you-graduate-no',
                    name: 'did-you-graduate'
                }
            ],
            didYouReceiveGED: [
                {
                    value: 'Yes',
                    label: 'Yes',
                    id: 'ged-yes',
                    name: 'ged'
                },
                {
                    value: 'No',
                    label: 'No',
                    id: 'ged-no',
                    name: 'ged'
                }
            ]
        });
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels.Test', {
        EducationViewModel: EducationViewModel
    });

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        EducationViewModel: EducationViewModel
    });
})(window);;
(function (window, undefined) {
    'use strict';

    function DisabilityViewModel() {
        var config = {
            endpoint: 'disability',
            passJobId: true
        };

        var self = OnlineApp.ViewModels.Base.EditableViewModel.call(this, config) || this;

        self.isFromDataModelChange = false;

        self.shouldShowDisabilityForm = ko.observable(false);
        self.hasDisability = ko.observable();
        self.date = ko.observable();

        self.hasDisability.subscribe(function (newValue) {
            if (newValue && !self.isFromDataModelChange) {
                self.saveAnswer(newValue);
            } else {
                self.isFromDataModelChange = false;
            }
        });

        self.nextButtonClick = function () {
            OnlineApp.ViewModels.applicationViewModel.showSubmitStep(true);
        };

        self.saveAnswer = function (answer) {
            self.save({
                hasDisability: answer
            });
        };

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            var applicationVM = OnlineApp.ViewModels.applicationViewModel;

            if (applicationVM && applicationVM.generalInfoViewModel && applicationVM.generalInfoViewModel.contactInfo) {
                self.fullName = ko.computed(function () {
                    var nameViewModel = applicationVM.generalInfoViewModel.contactInfo.name;
                    return nameViewModel.firstName() + " " + nameViewModel.lastName();
                });
            }

            self.shouldShowDisabilityForm(data.isEnabledDisabilityForm);

            if (data.isEnabledDisabilityForm) {
                self.date(self.getFormattedDate());

                if (data.hasDisability !== null) {
                    var hasDisability = OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.disabilityAnswer.findItemById(data.hasDisability + 1).text;
                    self.isFromDataModelChange = true;
                    self.hasDisability(hasDisability);
                }
            }
        };

        self.getFormattedDate = function () {
            var date = new Date(),
                formattedDatePart = function (date) {
                    return date < 10 ? '0' + date : date;
                };

            return formattedDatePart(date.getMonth() + 1) + '/' + formattedDatePart(date.getDate()) + '/' + date.getFullYear();
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        DisabilityViewModel: DisabilityViewModel
    });
})(window);;
(function (window, undefined) {
    'use strict';

    var layoutHelper = OnlineApp.Helpers.layoutHelper;

    var _fieldSettings = {};

    function PositionViewModel() {

        var self = OnlineApp.ViewModels.Base.EditableViewModel.apply(this, arguments) || this;
        var _prefix = 'workExperience';

        self.id = ko.observable();
        self.companyName = ko.observable();
        self.address = new OnlineApp.ViewModels.Common.AddressViewModel(_prefix);
        self.phone = ko.observable();
        self.website = ko.observable();
        self.position = ko.observable();
        self.weeklyHours = ko.observable();
        self.monthlySalary = ko.observable();
        self.numberOfSupervisedEmployees = ko.observable();
        self.startMonth = ko.observable();
        self.startMonthName = ko.computed(function () {
            return OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.month.findItemById(self.startMonth()).text;
        });
        self.startYear = ko.observable();
        self.endMonth = ko.observable();
        self.endMonthName = ko.computed(function () {
            return OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.extendedMonth.findItemById(self.endMonth()).text;
        });
        self.endMonthIsPresent = ko.observable(false).extend({ ignoreOnSerialization: true });

        self.endMonth.subscribe(function (value) {
            var isPresent = (value === 14);
            if (isPresent) {
                self.endYear(undefined);
            }

            var visibleControlsChanged = (self.endMonthIsPresent() !== isPresent);
            self.endMonthIsPresent(isPresent);

            if (visibleControlsChanged) {
                layoutHelper.tabbing.updateIndices();
            }
        });
        self.endYear = ko.observable();

        self.startDateIsOlderThanEndDate = ko.observable();
        self.startDateIsFutureDate = ko.observable();

        self.supervisor = new OnlineApp.ViewModels.Common.SupervisorViewModel(_prefix);

        self.dutiesSummary = ko.observable();

        self.dutiesSummaryComputed = ko.pureComputed({
            read: self.dutiesSummary,
            write: function (value) {                
                self.dutiesSummary(utils.stripHtmlTags(value)); 
            },
            owner: self
        });

        self.dutiesSummaryText = ko.computed(function() {
            return self.dutiesSummary() ? utils.normalizeNewlines(self.dutiesSummary()) : "";
        }).extend({ ignoreOnSerialization: true });

        self.canContactEmployer = ko.observable();

        self.canContactEmployer.subscribe(function (newValue) {
            if (newValue === "Yes") {
                // Allow KO template to display fields so they are visible when updating indices
                setTimeout(function () {
                    layoutHelper.tabbing.updateIndices();
                }, 0);
            }
        });

        self.reasonForLeaving = ko.observable();

        self.reasonForLeavingText = ko.computed(function() {
            return self.reasonForLeaving() ? utils.normalizeNewlines(self.reasonForLeaving()) : "";
        }).extend({ ignoreOnSerialization: true });

        self.isViewBoxVisible = {
            general: function() {
                return _fieldSettings.workExperienceCompanyName.visible ||
                       _fieldSettings.workExperienceAddress.visible ||
                       _fieldSettings.workExperienceCity.visible ||
                       _fieldSettings.workExperienceState.visible ||
                       _fieldSettings.workExperienceZipCode.visible ||
                       _fieldSettings.workExperienceCountry.visible ||
                       _fieldSettings.workExperiencePhone.visible ||
                       _fieldSettings.workExperienceWebsite.visible ||
                       _fieldSettings.workExperienceMayWeContactEmployer.visible;
            },

            position: function () {
                return _fieldSettings.workExperiencePositionTitle.visible ||
                       _fieldSettings.workExperienceHoursPerWeek.visible ||
                       _fieldSettings.workExperienceMonthlySalary.visible ||
                       _fieldSettings.workExperienceEmployeesSupervised.visible;
            },

            workDates: function () {
                return _fieldSettings.workExperienceStartDate.visible ||
                       _fieldSettings.workExperienceEndDate.visible ||
                       _fieldSettings.workExperienceReasonForLeaving.visible;
            },

            supervisor: function() {
                return _fieldSettings.workExperienceSupervisorName.visible ||
                       _fieldSettings.workExperienceSupervisorTitle.visible;
            },

            dutiesSummary: function() {
                return _fieldSettings.workExperienceDutiesSummary.visible;
            }
        };

        self.getValidationConfig = function () {
            var getDatesForTimespanValidator = function() {
                return {
                    startMonth: self.startMonth,
                    startYear: self.startYear,
                    endMonth: self.endMonth,
                    endYear: self.endYear
                };
            };

            var getStartDate = function () {
                return {
                    month: self.startMonth,
                    year: self.startYear
                };
            };

            var config = {
                'all': {
                    'companyName': {
                        required: {
                            enabled: !!_fieldSettings ? !!_fieldSettings.workExperienceCompanyName.required : false
                        },
                        length: {
                            max: 100
                        },
                        disallowHtml: {}
                    },

                    'address.address1': {
                        required: {
                            enabled: !!_fieldSettings ? !!_fieldSettings.workExperienceAddress.required : false
                        },
                        length: {
                            max: 100
                        },
                        disallowHtml: {}
                    },

                    'address.city': {
                        required: {
                            enabled: !!_fieldSettings ? !!_fieldSettings.workExperienceCity.required : false
                        },
                        length: {
                            max: 50
                        },
                        disallowHtml: {}
                    },

                    'address.zipCode': {
                        required: {
                            enabled: !!_fieldSettings ? !!_fieldSettings.workExperienceZipCode.required : false
                        },
                        length: {
                            max: 20
                        },
                        zip: {
                            onlyIf: function () {
                                return !!_fieldSettings && !!_fieldSettings.workExperienceState.required ?
                                    self.address.country.id() :
                                    self.address.country.id() && self.address.state.abbrvState() !== undefined;
                            },
                            countryId: self.address.country.id
                        }
                    },

                    'address.state.id': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceState.required :
                                false
                        },
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.states
                        },
                        state: {
                            onlyIf: function () {
                                return self.address.country.id() && self.address.state.id();
                            },
                            states: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.states.items(),
                            countryId: self.address.country.id
                        }
                    },

                    'address.country.id': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceCountry.required :
                                false
                        },
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.countries
                        }
                    },

                    'phone': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperiencePhone.required :
                                false
                        },
                        length: {
                            max: 30
                        },
                        regexp: {
                            pattern: /^[a-zA-Z0-9-_.)(+ ]+$/,
                            validationMessage: "Invalid phone number"
                        }
                    },

                    'website': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceWebsite.required :
                                false
                        },
                        url: {},
                        length: {
                            max: 100
                        }
                    },

                    'position': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperiencePositionTitle.required :
                                false
                        },
                        disallowHtml:{}
                    },

                    'weeklyHours': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceHoursPerWeek.required :
                                false
                        },
                        regexp: { // numeric?
                            pattern: /(^\d{1,15}\.\d{1,2}$)|(^\d{1,15}$)/,
                            validationMessage: "Invalid Hours"
                        }
                    },

                    'monthlySalary': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceMonthlySalary.required :
                                false
                        },
                        regexp: { // required by default
                            pattern: /(^\d{1,14}\.\d{1,2}$)|(^\d{1,14}$)/,
                            validationMessage: "Invalid Monthly Salary"
                        }
                    },

                    'numberOfSupervisedEmployees': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceEmployeesSupervised.required :
                                false
                        },
                        regexp: { // numeric?
                            pattern: /^\d+$/,
                            validationMessage: "Invalid Employees"
                        }
                    },

                    'startMonth': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceStartDate.required :
                                false
                        },
                        month: {},
                        timespanStartIsNotAfterEnd: getDatesForTimespanValidator(),
                        isNotFutureDate: getStartDate(),
                        definitionAwareValue: {
                            definitionItems: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.month.items
                        }
                    },

                    'startYear': {
                        required: {
                            enabled: [
                                function() {
                                    return (!!_fieldSettings ? !!_fieldSettings.workExperienceStartDate.required : false)
                                        || (self.startMonth() > 0 && self.startMonth() < 13);
                                }
                            ]
                        },
                        year: {},
                        timespanStartIsNotAfterEnd: getDatesForTimespanValidator(),
                        isNotFutureDate: getStartDate(),
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.PastToPresentYear
                        }
                    },

                    'endMonth': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceEndDate.required :
                                false
                        },
                        extendedMonth: {},
                        timespanStartIsNotAfterEnd: getDatesForTimespanValidator(),
                        definitionAwareValue: {
                            definitionItems: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.extendedMonth.items
                        }
                    },

                    'endYear': {
                        required: {
                            enabled: [
                                function () {
                                    if (self.endMonthIsPresent()) {
                                        return false;
                                    }
                                    return (!!_fieldSettings ? !!_fieldSettings.workExperienceEndDate.required : false)
                                            || (self.endMonth() > 0 && self.endMonth() < 13);
                                }
                            ]
                        },
                        year: {},
                        timespanStartIsNotAfterEnd: getDatesForTimespanValidator(),
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.PastToPresentYear
                        }
                    },

                    'supervisor.name': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceSupervisorName.required :
                                false
                        },
                        length: {
                            max: 50
                        },
                        disallowHtml: {}
                    },

                    'supervisor.title': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceSupervisorTitle.required :
                                false
                        },
                        length: {
                            max: 100
                        },
                        disallowHtml: {}
                    },

                    'dutiesSummary': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceDutiesSummary.required :
                                false
                        },
                        disallowHtml: {}
                    },

                    'canContactEmployer': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceMayWeContactEmployer.required :
                                false,

                            onlyIf: function () {
                                return self.canContactEmployer() === undefined || self.canContactEmployer() === null;
                            }
                        }
                    },

                    'reasonForLeaving': {
                        required: {
                            enabled: !!_fieldSettings ?
                                !!_fieldSettings.workExperienceReasonForLeaving.required :
                                false
                        },
                        disallowHtml: {}
                    },

                    'startDateIsOlderThanEndDate': {
                        timespanStartIsNotAfterEnd: getDatesForTimespanValidator(),
                        dependsOn: [self.startYear, self.startMonth, self.endYear, self.endMonth]
                    },
                    'startDateIsFutureDate': {
                        isNotFutureDate: getStartDate()
                    }
                }
            };

            return config;
        };


        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            self.id(data.id);
            self.companyName(data.companyName);
            self.address.fromDataModel(data.address);
            self.phone(data.phone);
            self.website(data.website);
            self.position(data.position);
            self.weeklyHours(data.weeklyHours);
            self.monthlySalary(data.monthlySalary);
            self.numberOfSupervisedEmployees(data.numberOfSupervisedEmployees);
            self.startMonth(data.startMonth);
            self.startYear(data.startYear);
            self.endMonth(data.endMonth);
            self.endYear(data.endYear);
            if (self.endMonth() === 14) {
                self.endYear(undefined);
            }
            self.supervisor.fromDataModel(data.supervisor);
            self.dutiesSummaryComputed(data.dutiesSummary);
            self.reasonForLeaving(data.reasonForLeaving);
            self.canContactEmployer(data.canContactEmployer);

            return self;
        };

        /* Validation */
        (function () {
            self.registerValidation(
                self.getValidationConfig()
            );
        })();
    }

    function WorkExperienceViewModel(fieldSettings) {
        var config = {
            endpoint: "workExperience",
            passResumeTemlateId: true,
            passJobId: true
        };

        _fieldSettings = OnlineApp.FieldSettings;

        var self = OnlineApp.ViewModels.Base.EditableCollectionViewModel.call(this, config) || this;

        self.sortedItems = ko.computed(function () {
            var items = self.items().slice(0);
            items.sort(function(a, b) { return utils.compareYearAndMonth(a.endYear(), a.endMonth(), b.endYear(), b.endMonth()); });
            return items;
        });

        self.itemTemplate = ko.observable(PositionViewModel);

        self.radioButtonOptions = ko.observable({
            mayWeContactEmployer: [
                {
                    value: 'Yes',
                    label: 'Yes',
                    name: 'work-can-contact-employer',
                    id: 'work-can-contact-employer-yes'
                },
                {
                    value: 'No',
                    label: 'No',
                    name: 'work-can-contact-employer',
                    id: 'work-can-contact-employer-no'
                }
            ]
        });
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        WorkExperienceViewModel: WorkExperienceViewModel
    });

})(window);;
(function(window, undefined) {
    'use strict';

    function SingleReferenceViewModel(options) {

        var self = OnlineApp.ViewModels.Base.EditableViewModel.apply(this, arguments) || this;
        self.settings = options;

        self.id = ko.observable();
        self.referenceType = ko.observable(1);
        self.referenceTypeText = ko.computed(function () {
            var typeId = self.referenceType();
            if (typeId == null)
                return "";

            var definition = OnlineApp.ViewModels.applicationViewModel
                .definitionsViewModel.referenceType.findItemById(typeId);

            if (definition != null) {
                return definition.text;
            }

            return "";
        }).extend({ ignoreOnSerialization: true });

        self.name = new OnlineApp.ViewModels.Common.NameViewModel();
        self.title = ko.observable();
        self.address = new OnlineApp.ViewModels.Common.AddressViewModel();
        self.phone = ko.observable();
        self.emailAddress = ko.observable();

        self.getValidationConfig = function() {
            var config = {
                'all': {
                    'name.firstName': {
                        required: {},
                        length: {
                            max: 50
                        },
                        disallowHtml: {}
                    },
                    'name.lastName': {
                        required: {},
                        length: {
                            max: 50
                        },
                        disallowHtml: {}
                    },
                    'referenceType': {
                        required: {}
                    }
                    ,
                    'title': {
                        length: {
                            max: 100
                        },
                        disallowHtml: {}
                    },
                    'address.address1': {
                        length: {
                            max: 100
                        },
                        disallowHtml: {}
                    },
                    'address.address2': {
                        length: {
                            max: 100
                        },
                        disallowHtml: {}
                    },
                    'address.city': {
                        length: {
                            max: 50
                        },
                        disallowHtml: {}
                    },
                    'address.state.id': {
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.states
                        },
                        state: {
                            onlyIf: function () {
                                return self.address.country.id() && self.address.state.id();
                            },
                            states: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.states.items(),
                            countryId: self.address.country.id
                        }
                    },
                    'address.country.id': {
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.countries
                        }
                    },
                    'address.zipCode': {
                        zip: {
                            onlyIf: function () {
                                return self.address.country.id();
                            },
                            countryId: self.address.country.id
                        },
                        length: {
                            max: 20
                        },
                        dependsOn: [ self.address.country.id ]
                    },
                    'phone': {
                        required: {},
                        length: {
                            max: 50
                        },
                        disallowHtml: {}
                    },
                    'emailAddress': {
                        email: {},
                        required: {
                            enabled: function () {
                                return self.settings.isEReferencesEnabled;
                            }
                        }
                    }
                }
            };

            return config;
        };

        self.fromDataModel = function(data) {
            if (!data) {
                return;
            }

            self.settings = $.extend({}, self.settings, data.settings);

            self.id(data.id);
            self.referenceType(data.referenceType.toString());
            self.name.fromDataModel(data.name);
            self.title(data.title);
            self.address.fromDataModel(data.address);
            self.phone(data.phone);
            self.emailAddress(data.emailAddress);
        };

        /* Validation */
        (function() {
            self.registerValidation(
                self.getValidationConfig()
            );
        })();
    }

    function ReferencesViewModel(options) {
        var config = {
            endpoint: 'references',
            passResumeTemlateId: true,
            passJobId: true
        };

        var defaults = {
            isEReferencesEnabled: false,
            minimumReferencesCount: 0,
            maximumReferencesCount: 10
        }

        options = $.extend({}, defaults, options);

        var self = OnlineApp.ViewModels.Base.EditableCollectionViewModel.call(this, config) || this;

        self.itemTemplate = ko.observable(SingleReferenceViewModel.bind(null, options));

        self.isEReferencesEnabled = ko.observable(options.isEReferencesEnabled);
        self.isReferencesCountGreaterThanMin = ko.observable(true);
        self.isReferencesCountLessThanMax = ko.observable(true);

        self.remainingReferencesCountMessage = ko.computed(function() {
            return  self.itemsCount() + ' references added. Please add the remaining ' +
                    (options.minimumReferencesCount - self.itemsCount()) + ' references by clicking the Add References Button.';
        });

        self.add = (function (baseAdd) {
            return function () {
                if (!options.isEReferencesEnabled) {
                    return baseAdd();
                }

                var itemsCount = self.itemsCount();

                if (itemsCount < options.maximumReferencesCount) {
                    baseAdd();
                } else {
                    self.isReferencesCountLessThanMax(false);
                }
            };
        })(self.add);

        self.validate = (function (baseValidate) {
            return function () {
                var isValid = baseValidate();

                if (options.isEReferencesEnabled) {
                    var itemsCount = self.itemsCount();

                    var isGreaterThanMin = options.minimumReferencesCount <= itemsCount;
                    var isLessThanMax = itemsCount <= options.maximumReferencesCount;

                    isValid = isValid && isGreaterThanMin && isLessThanMax;
                    self.isReferencesCountGreaterThanMin(isGreaterThanMin);
                    self.isReferencesCountLessThanMax(isLessThanMax);
                }

                return isValid;
            };
        })(self.validate);

        self.messages = {
            insufficientReferencesCountMessage: 'A minimum of ' + options.minimumReferencesCount + ' references are required.',
            tooManyReferencesCountMessage: 'Maximum of ' + options.maximumReferencesCount + ' references allowed.'
        };

        self.radioButtonOptions = ko.observable({
            referenceTypes: [
                {
                    value: '1',
                    id: 'references-professional',
                    name: 'reference-type',
                    label: 'Professional'
                },
                {
                    value: '0',
                    id: 'references-personal',
                    name: 'reference-type',
                    label: 'Personal'
                }
            ]
        });
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels.Test', {
        ReferencesViewModel: ReferencesViewModel
    });

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        ReferencesViewModel: ReferencesViewModel
    });
})(window);;
(function(window, undefined) {
    'use strict';

    var layoutHelper = OnlineApp.Helpers.layoutHelper;

    function LicenseViewModel() {
        var self = OnlineApp.ViewModels.Base.EditableViewModel.apply(this, arguments) || this;

        self.id = ko.observable();
        self.licenseType = ko.observable();
        self.issuedMonth = ko.observable();
        self.issuedMonthName = ko.computed(function () {
            return OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.month.findItemById(self.issuedMonth()).text;
        }).extend({ ignoreOnSerialization: true });
        self.issuedYear = ko.observable();
        self.expiryMonth = ko.observable();
        self.expiryMonthName = ko.computed(function () {
            return OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.monthWithNoExpiration.findItemById(self.expiryMonth()).text;
        }).extend({ ignoreOnSerialization: true });
        self.expiryMonthIsNoExpiration = ko.observable(false).extend({ ignoreOnSerialization: true });
        self.expiryMonth.subscribe(function (value) {
            var isNoExpiration = (value === 15);
            if (isNoExpiration) {
                self.expiryYear(undefined);
            }

            var visibleControlsChanged = (self.expiryMonthIsNoExpiration() !== isNoExpiration);
            self.expiryMonthIsNoExpiration(isNoExpiration);

            if (visibleControlsChanged) {
                layoutHelper.tabbing.updateIndices();
            }
        });

        self.startDateIsOlderThanEndDate = ko.observable();
        self.startDateIsFutureDate = ko.observable();

        self.expiryYear = ko.observable();
        self.licenseNumber = ko.observable();
        self.issuingAgency = ko.observable();
        self.startDate = ko.observable();

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            self.id(data.id);
            self.licenseType(data.licenseType);
            self.issuedMonth(data.issuedMonth);
            self.issuedYear(data.issuedYear);
            self.expiryMonth(data.expiryMonth);
            self.expiryYear(data.expiryYear);
            if (self.expiryMonth() === 15) {
                self.expiryYear(undefined);
            }
            self.licenseNumber(data.licenseNumber);
            self.issuingAgency(data.issuingAgency);

            return self;
        };

        /*
            Validation
        */
        (function () {

            var getDatesForTimespanValidator = function () {
                return { startMonth: self.issuedMonth, startYear: self.issuedYear, endMonth: self.expiryMonth, endYear: self.expiryYear };
            };

            var getStartDate = function () {
                return {
                    month: self.issuedMonth,
                    year: self.issuedYear
                };
            };

            var config = {
                'all': {
                    'licenseType': {
                        required: {},
                        length: {
                            max: 100
                        },
                        disallowHtml: {}
                    },
                    'issuedMonth': {
                        required: {},
                        month: {},
                        definitionAwareValue: {
                            definitionItems: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.month.items
                        }
                    },
                    'issuedYear': {
                        required: {},
                        year: {},
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.PastToPresentYear
                        }
                    },
                    'expiryMonth': {
                        required: {},
                        monthWithNoExpiration: {},
                        definitionAwareValue: {
                            definitionItems: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.monthWithNoExpiration.items
                        }
                    },
                    'expiryYear': {
                        year: {},
                        required: {
                            onlyIf: function () {
                                return !self.expiryMonthIsNoExpiration();
                            }
                        },
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.PastToFutureYear
                        }
                    },
                    'issuingAgency': {
                        length: {
                            max: 100
                        },
                        disallowHtml: {}
                    },
                    'licenseNumber': {
                        length: {
                            max: 100
                        },
                        disallowHtml: {}
                    },
                    'startDateIsOlderThanEndDate': {
                        timespanStartIsNotAfterEnd: getDatesForTimespanValidator(),
                        dependsOn: [self.issuedYear, self.issuedMonth, self.expiryYear, self.expiryMonth]
                    },
                    'startDateIsFutureDate': {
                        isNotFutureDate: getStartDate()
                    }
                }
            };

            self.registerValidation(config);

            self.startDate.hasError = ko.computed(function() {
                return self.startDateIsFutureDate.hasError && self.startDateIsFutureDate.hasError() || 
                    self.startDateIsOlderThanEndDate.hasError && self.startDateIsOlderThanEndDate.hasError();
            });
        })();
    }

    function LicenseCollectionViewModel() {
        var config = {
            endpoint: "licenses",
            passResumeTemlateId: true,
            passJobId: true
        };

        var self = OnlineApp.ViewModels.Base.EditableCollectionViewModel.call(this, config) || this;

        self.itemTemplate = ko.observable(LicenseViewModel);
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        LicenseViewModel: LicenseViewModel,
        LicenseCollectionViewModel: LicenseCollectionViewModel
    });

})(window);;
(function(window, undefined) {
    'use strict';

    function SkillViewModel() {
        var self = OnlineApp.ViewModels.Base.EditableViewModel.apply(this, arguments) || this;

        self.id = ko.observable();
        self.name = ko.observable();
        self.totalMonthsExperience = ko.observable().extend({ ignoreOnSerialization: true });
        self.yearsExperience = ko.observable();
        self.monthsExperience = ko.observable();
        self.totalExperience = ko.computed(function () {
            var yearsExperience = self.yearsExperience();
            var years = yearsExperience && yearsExperience > 0
                ? yearsExperience + ' years'
                : '';
            var monthExperience = self.monthsExperience();
            var months = monthExperience && monthExperience > 0
                ? monthExperience + ' months'
                :'';

            return years
                + ((years != '' && months != '') ? ', ' : '')
                + months;
        }).extend({ ignoreOnSerialization: true });
        self.level = ko.observable(1);
        self.levelText = ko.computed(function () {
            var level = self.level();
            if (!level) {
                return "No level specified";
            }

            var levelDefinitions
                = OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.level.items();

            return levelDefinitions[level].text;
        }).extend({ ignoreOnSerialization: true });

        self.fromDataModel = function (data) {
            self.id(data.id);
            self.name(data.name);
            self.totalMonthsExperience(data.totalMonthsExperience);
            self.yearsExperience(data.yearsExperience);
            self.monthsExperience(data.monthsExperience);
            self.level(data.level.toString());

            return self;
        };

        /*
            Validation
        */
        (function () {
            var config = {
                'all': {
                    'name': {
                        required: {},
                        length: {
                            max: 50
                        },
                        disallowHtml: {}
                    },
                    //'totalMonthsExperience': {
                    //    required: {},
                    //    regexp: {
                    //        pattern: /^([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1][0-1][0-9][0-9]|1200)$/,
                    //        validationMessage: "Please enter numeric value from 0 to 1200"
                    //    }
                    //},
                    'yearsExperience': {
                        required: {},
                        maxValue: {
                            maxValue: 99,
                            validationMessage: "Please enter numeric value from 0 to 99"
                        },
                        numeric: {}
                    },
                    'monthsExperience': {
                        required: {},
                        maxValue: {
                            maxValue: 12,
                            validationMessage: "Please enter numeric value from 0 to 12"
                        },
                        numeric: {}
                    }
                }
            };

            self.registerValidation(config);
        })();
    }
    
    function SkillCollectionViewModel() {
        var config = {
            endpoint: "skills",
            passResumeTemlateId: true,
            passJobId: true
        };

        var self = OnlineApp.ViewModels.Base.EditableCollectionViewModel.call(this, config) || this;


        self.itemTemplate = ko.observable(SkillViewModel);

        self.radioButtonOptions = ko.observable({
            skillLevel: [
                {
                    value: '1',
                    label: 'Beginner',
                    name: 'radioSet-level',
                    id: 'btn-beginner'
                },
                {
                    value: '2',
                    label: 'Intermediate',
                    name: 'radioSet-level',
                    id: 'btn-intermediate'
                },
                {
                    value: '3',
                    label: 'Expert',
                    name: 'radioSet-level',
                    id: 'btn-expert'
                }
            ]
        });
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        SkillViewModel: SkillViewModel,
        SkillCollectionViewModel: SkillCollectionViewModel
    });

})(window);;
(function(window, undefined) {
    'use strict';

    function LanguageViewModel() {
        var self = OnlineApp.ViewModels.Base.EditableViewModel.apply(this, arguments) || this;

        self.id = ko.observable();
        self.name = ko.observable();
        self.languageID = ko.observable();
        // todo: create "knockout selected changed" to change language name
        self.languageText = ko.computed(function () {
            var langId = self.languageID();
            if (!langId) {
                return "No language specified";
            }

            var langDefinitions
                = OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.languageSkills;

            var langName = langDefinitions.findItemById(langId).name;
            self.name(langName);

            return langName;
        }).extend({ ignoreOnSerialization: true });

        self.canSpeak = ko.observable("false");
        self.canRead = ko.observable("false");
        self.canWrite = ko.observable("false");

        self.can = ko.computed(function () {
            var can = [];

            if (self.canSpeak() === "true") {
                can.push("speak");
            }
            if (self.canRead() === "true") {
                can.push("read");
            }
            if (self.canWrite() === "true") {
                can.push("write");
            }

            can = can.join(", ");

            if (can.length !== 0) {
                can = " - " + can;
            }

            return can;
        }).extend({ ignoreOnSerialization: true });

        self.canForValidation = ko.computed(function () {

            if (self.canSpeak() === "true" ||
                self.canRead() === "true" ||
                self.canWrite() === "true") {
                return "true";
            }

            return "false";
        }).extend({ ignoreOnSerialization: true });

        self.isDuplicate = ko.observable(false).extend({ ignoreOnSerialization: true });

        self.fromDataModel = function (data) {
            self.id(data.id);
            self.name(data.name);
            self.languageID(data.languageID);

            // make boolean values strings for proper bindings
            self.canSpeak(data.canSpeak + '');
            self.canRead(data.canRead + '');
            self.canWrite(data.canWrite + '');

            return self;
        };

        /*
            Validation
        */
        (function () {
            var config = {
                'all': {
                    'languageID': {
                        required: {},
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.languageSkills
                        }
                    },
                    'canForValidation': {
                        regexp: {
                            pattern: /^true$/,
                            validationMessage: "Please choose at least one of the following: Read, Write or Speak"
                        }
                    }
                }
            };

            self.registerValidation(config);
        })();
    }
    
    function LanguageCollectionViewModel() {
        var config = {
            endpoint: "languages",
            passResumeTemlateId: true,
            passJobId: true
        };

        function languageAreadyExists(language, languageCollection) {
            if (!language || !languageCollection) {
                return false;
            }


            var languageIds = ko.utils.arrayMap(languageCollection, function (item) {
                return item.languageID();
            });

            // remove value of currently editable item
            var languageToSkip = ko.utils.arrayFirst(languageCollection,
                function(item) {
                    return item.id() === language.id();
                });
            var languageToSkipIndex = ko.utils.arrayIndexOf(languageCollection,languageToSkip);
            if (languageToSkipIndex > -1) {
                languageIds.splice(languageToSkipIndex, 1);
            }

            var languageExists =
                ko.utils.arrayIndexOf(languageIds, language.languageID()) > -1;

            return languageExists;
        }

        function setDuplicatesIfTheyExist() {
            var langIDs = ko.utils.arrayMap(self.items(), function (item) {
                return item.languageID();
            });

            var duplicates = window.utils.findDuplicates(langIDs, function (e) { return parseInt(e); });
            if (duplicates.length > 0) {

                ko.utils.arrayForEach(self.items(), function (item) {
                    item.isDuplicate(false);

                    if (ko.utils.arrayIndexOf(duplicates, item.languageID()) > -1) {
                        item.isDuplicate(true);
                    }
                });
            } else {
                ko.utils.arrayForEach(self.items(), function (item) {
                    item.isDuplicate(false);
                });
            }
        }

        var self = OnlineApp.ViewModels.Base.EditableCollectionViewModel.call(this, config) || this;

        self.saveChanges = (function (base) {
            return function (item) {
                var editableItem = self.editableItem();

                if (languageAreadyExists(editableItem, self.items())) {

                    var field = editableItem.languageID;
                    field.hasError(true);
                    field.isValidationMessageVisible(true);
                    field.validationMessage("Language already exists");

                    return window.undefined;
                }

                var promise = base.apply(this, arguments);

                if (promise) {

                    promise.done(function() {
                        setDuplicatesIfTheyExist();
                    });
                }

                return promise;
            };
        })(self.saveChanges);

        self.validate = (function (base) {
            return function () {
                var duplicateExists = ko.utils.arrayFirst(
                    self.items(),
                    function(item) {
                        return item.isDuplicate();
                    });

                if (duplicateExists) {
                    return false;
                }

                return base();
            };
        })(self.validate);

        self.itemTemplate = ko.observable(LanguageViewModel);

        self.fromDataModel = (function (base) {
            return function (data) {
                base(data);

                setDuplicatesIfTheyExist();
            };
        })(self.fromDataModel);
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        LanguageViewModel: LanguageViewModel,
        LanguageCollectionViewModel: LanguageCollectionViewModel
    });

})(window);;
(function (window, undefined) {
    'use strict';


    function OfficeSkillViewModel() {

        var config = {
            endpoint: "officeskill"
        };

        var self = OnlineApp.ViewModels.Base.EditableViewModel.call(this, config) || this;


        self.wordsPerMinute = ko.observable();

        self.keystrokesPerHour = ko.observable();


        self.fromDataModel = function (data) {
            self.wordsPerMinute(data.wordsPerMinute);
            self.keystrokesPerHour(data.keystrokesPerHour);

            return self;
        };

        self.getValidationConfig = function () {
            var config = {
                'all': {
                    'wordsPerMinute': {
                        numeric: {}
                    },
                    'keystrokesPerHour': {
                        numeric: {}
                    }
                }
            };

            return config;
        };


        /*
            Validation
        */
        (function () {
            self.registerValidation(
                self.getValidationConfig()
            );
        })();
    };


    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        OfficeSkillViewModel: OfficeSkillViewModel
    });

})(window);


;
(function(window, undefined) {
    'use strict';

    var supplementalInfoTypes;

    function SupplementalInfoViewModel() {
        var self = OnlineApp.ViewModels.Base.EditableViewModel.apply(this, arguments) || this;

        self.id = ko.observable();
        self.description = ko.observable();
        self.descriptionText = ko.computed(function() {
            return self.description() ? utils.normalizeNewlines(self.description()) : "";
        }).extend({ ignoreOnSerialization: true });
        self.type = new OnlineApp.ViewModels.Common.SupplementalInfoTypeViewModel();

        self.getValidationConfig = function() {

            var config = {
                'all': {
                    'type.id': {
                        required: {},
                        deferredDefinitionAwareValue: {
                            deferredDefinitionViewModel: OnlineApp.ViewModels.applicationViewModel.definitionsViewModel.supplementalInfoTypes
                        }
                    },
                    'description': {
                        required: {},
                        length: {
                            max: 999,
                            validationMessage: "Description is too long and is limited to 999 characters"
                        },
                        disallowHtml: {}
                    }
                }
            };

            return config;
        };

        self.fromDataModel = function(data) {
            if (!data) {
                return;
            }

            //In App Review, there's no need to filter out anything, thus supplementalInfoTypes is not passed.
            if (supplementalInfoTypes) {
                var isTypeAllowed = $.grep(supplementalInfoTypes(), function (element) {
                    return element.id == data.type.id;
                }).length > 0;

                if (!isTypeAllowed) {
                    return;
                }
            }

            self.id(data.id);
            self.description(data.description);
            self.type.fromDataModel(data.type);
        };

        /*
            Validation
        */
        (function() {
            self.registerValidation(
                self.getValidationConfig()
            );
        })();
    };


    function SupplementalInfoCollectionViewModel(allowedSupplementalInfoTypes) {
        var config = {
            endpoint: "supplementalInfo",
            passResumeTemlateId: true,
            passJobId: true
        };

        supplementalInfoTypes = allowedSupplementalInfoTypes;

        var self = OnlineApp.ViewModels.Base.EditableCollectionViewModel.call(this, config) || this;

        //Supplemental info of types which are not allowed for given job are still present in items collection with their properties undefined,
        //need to remove them completely.
        self.fromDataModel = (function (base) {
            return function () {
                base.apply(this, arguments);

                var nonEmptyItems = $.grep(self.items(), function (element) {
                    return element.id() != undefined;
                });
                self.items(nonEmptyItems);
            };
        })(self.fromDataModel);

        self.itemTemplate = ko.observable(SupplementalInfoViewModel);
    };

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        SupplementalInfoViewModel: SupplementalInfoViewModel,
        SupplementalInfoCollectionViewModel: SupplementalInfoCollectionViewModel
    });

})(window);;
(function(window, undefined) {
    'use strict';


    function AdditionalInfoViewModel(appTemplateSettings, appSettings) {

        var vm = OnlineApp.ViewModels;

        var self = vm.Base.CompositeEditableViewModel.apply(this, arguments) || this;

        self.acceptAdditionalInfo = appTemplateSettings ? appTemplateSettings.acceptAdditionalInfo() : true;
        self.acceptLicense = appTemplateSettings ? appTemplateSettings.acceptLicense() : true;
        self.acceptSkill = appTemplateSettings ? appTemplateSettings.acceptSkill() : true;

        if (self.acceptSkill) {
            self.skillCollectionViewModel = new vm.SkillCollectionViewModel();
            self.languageCollectionViewModel = new vm.LanguageCollectionViewModel();
        }

        if (self.acceptAdditionalInfo) {
            //Some types of Supplemental Info may be disabled by employer.
            self.supplementalInfoTypes = ko.computed(function () {
                if (vm.applicationViewModel && vm.applicationViewModel.definitionsViewModel) {
                    var allTypes = vm.applicationViewModel.definitionsViewModel.supplementalInfoTypes.items();
                    var allowedTypes;
                    if (appSettings && appSettings.AdditionalInfoTypeFilter) {
                        var forbiddenTypeIds = $.map(appSettings.AdditionalInfoTypeFilter.split(', '), Number);

                        allowedTypes = $.grep(allTypes, function (element) {
                            return $.inArray(element.id, forbiddenTypeIds) == -1;
                        });
                    } else {
                        allowedTypes = allTypes;
                    }
                    return allowedTypes;
                } else {
                    return [];
                }
            });
            self.supplementalInfoCollectionViewModel = new vm.SupplementalInfoCollectionViewModel(self.supplementalInfoTypes);
        }

        if (self.acceptLicense) {
            self.licenseCollectionViewModel = new vm.LicenseCollectionViewModel();
        }

        self.officeSkillViewModel = new vm.OfficeSkillViewModel();

        (function () {
            // add parts based on app template settings
            var parts = [];

            parts.push(self.officeSkillViewModel);

            if (self.acceptSkill) {
                parts.push(self.skillCollectionViewModel);
                parts.push(self.languageCollectionViewModel);
            }

            if (self.acceptAdditionalInfo) {
                parts.push(self.supplementalInfoCollectionViewModel);
            }

            if (self.acceptLicense) {
                parts.push(self.licenseCollectionViewModel);
            }

            self.addParts(parts);
        })();
    };


    OnlineApp.Namespace.extend('OnlineApp.ViewModels.Test', {
        AdditionalInfoViewModel: AdditionalInfoViewModel
    });

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        AdditionalInfoViewModel: AdditionalInfoViewModel
    });

})(window);;
(function (window, undefined) {
    'use strict';

    var controlStates = {
        initial: "initial",
        progress: "progress",
        completed: "completed"
    };


    function FileUploaderViewModel(view) {
        
        var self = this;

        var elements = {
            $view: $(view),
            $fileUploader: $(view).find('input[type=file]'),
            $progressIndicator: $(view).find('.progress-indicator')
        };

        
        self.state = ko.observable(controlStates.initial);

        self.progress = ko.observable(0);

        self.selectedFile = ko.observable();


        self.selectFileToUpload = function () {
            elements.$fileUploader.click();
        };

        self.uploadSelectedFile = function () {
            self.state(controlStates.progress);
            self.progress(0);

            var selectedFile = self.selectedFile();

            var promise = OnlineApp.Services.fileUploadService
                .uploadFormData('/api/testdata/uploadFile', elements.$fileUploader, function (e) {
                    var percentOfFileUploaded = Math.round((e.loaded / e.total) * 100);
                    self.progress(percentOfFileUploaded);
                })
                .done(function () {
                    self.finishUploading();
                });
        };

        self.cancelUploading = function () {
            self.state(controlStates.initial);
            self.selectedFile(null);
        };

        self.finishUploading = function () {
            self.state(controlStates.completed);
            self.selectedFile(null);
        };



        /*
            Initializer.
        */
        (function () {
            elements.$progressIndicator.knob(); // TODO: Move to custom binding.
            ko.applyBindings(self, elements.$view[0]);
        })();
    };


    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        FileUploaderViewModel: FileUploaderViewModel
    });

})(window);;
(function(window, undefined) {
    'use strict';

    var Labels = {
        PROCEED_TO_CERTIFY_SUBMIT: 'Proceed to Certify and Submit',
        PROCEED_TO_CERTIFY: 'Proceed to Certify',
    };


    function ReviewViewModel() {

        var self = OnlineApp.ViewModels.Base.ValidatableViewModel.apply(this, arguments) || this;

        var applicationViewModel = OnlineApp.ViewModels.applicationViewModel;

        self.proceedToCertifyOrCertifyAndSubmit = function (e) {
            if (window.enableEmailVerification) {
                applicationViewModel.tryShowCertifySubmitTab();
            }

            var targetTabId = '#submit-tab';
            applicationViewModel.validateAndNavigateToTab(self, targetTabId, false, true);
        };

        self.proceedToCertifyOrCertifyAndSubmitText = ko.computed(function () {
            if (applicationViewModel.paymentViewModel.isPaymentEnabled()) {
                return Labels.PROCEED_TO_CERTIFY;
            } else {
                return Labels.PROCEED_TO_CERTIFY_SUBMIT;
            }
        });

        // TODO: check whether we have a better way to reach validateChanges from review rab

        self.isInEditMode = ko.computed(function () {
            return applicationViewModel.isInEditMode();
        });

        self.validateChanges = function() {
            return applicationViewModel.validateChanges();
        };

        self.discardChanges = function(item, e) {
            return applicationViewModel.discardChanges(item, e);
        };

        self.isDataChanged = function () {
            return applicationViewModel.isDataChanged();
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        ReviewViewModel: ReviewViewModel
    });

})(window);;
(function (window, undefined) {
    'use strict';

    function CompleteViewModel() {

        var self = OnlineApp.ViewModels.Base.CompositeEditableViewModel.call(this) || this;

        var applicationViewModel = OnlineApp.ViewModels.applicationViewModel;

        self.disabilityInfo = new OnlineApp.ViewModels.DisabilityViewModel();

        self.submit = new OnlineApp.ViewModels.SubmitViewModel();

        self.isVisibleSubmitStep = ko.observable(true);

        self.isTabAccesible = function(){
            return applicationViewModel.validate();
        };

        self.areRedirectAndPaymentSuccessful = ko.observable(false);

        self.showAlertValidationIcon = ko.computed(function() {
            if (applicationViewModel && applicationViewModel.hasError()) {
                return false;
            }
            if (self.submit.isShowAlertValidationIcon()) {
                return true;
            }
            return (!self.submit.isPaymentTabEnabled() && self.isVisited()) || 
                (applicationViewModel &&
                applicationViewModel.isShowCertifyValidationIcon &&
                applicationViewModel.isShowCertifyValidationIcon() &&
                !self.submit.isPaymentTabEnabled());
        });

        self.showCheckValidationIcon = ko.computed(function () {
            
            if (self.submit.isShowAlertValidationIcon()) {
                return false;
            }
            
            return (self.submit.isPaymentTabEnabled() && self.isVisited()) ||
                 (applicationViewModel &&
                 applicationViewModel.isShowCertifyValidationIcon &&
                 applicationViewModel.isShowCertifyValidationIcon() &&
                 self.submit.isPaymentTabEnabled());
        })

        self.goToSubmitStepClick = function () {
            self.isVisibleSubmitStep(true);

            $(document).trigger(OnlineApp.Events.CommonEventsNames.CertifySubmitTabOpened);

            // Trigger "shown" event to make screen reader announce new information block loaded.
            $('.onlineapp-app-container a[href="#submit-tab"]:visible').trigger('shown');

            applicationViewModel.navigationController.scrollTabTopToView();
        };

        self.setCanNotAccessTabNotification = function() {
            var invalidSectionsNames = $('.left-menu-nav').find('span[data-invalid="true"]').parent().find('.tab-name');
            var invalidSectionNamesText = invalidSectionsNames.toArray().map(function(section){
                return section.innerHTML; 
            }).join();

            var notificationText = 'Can not access Certify tab. Please, fix the errors in the following sections: '
                + invalidSectionNamesText;

            gJobs.screenReadersService.setNotificationOnElement({
                text: notificationText,
                $element: $('a[href="#submit-tab"]')
            });
        }

        self.updateStatus = function () {
            self.isVisibleSubmitStep(!self.disabilityInfo.shouldShowDisabilityForm());
        };

        self.disabilityInfo.shouldShowDisabilityForm.subscribe(function (newValue) {
            self.isVisibleSubmitStep(!newValue);
        });
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        CompleteViewModel: CompleteViewModel
    });
})(window);;
(function (window, undefined) {
    'use strict';

    function SubmitViewModel() {
        var config = {
            endpoint: "submit",
            passJobId: true,

        };

        var Labels = {
            SUBMIT: 'Accept & Submit',
            PROCEED_TO_PAYMENT: 'Accept & Proceed to Payment',
        };

        var ensureQuestionsAutosaved = function () {
            var qvm = OnlineApp.ViewModels.applicationViewModel.questionsViewModel;

            var ensureAgencyWideQuestions = function () {
                return qvm.agencyWideQuestionsViewModel.saveChanges(null, true);
            };

            var ensureSupplementaryQuestions = function () {
                return qvm.supplementaryQuestionsViewModel.saveChanges(null, true);
            };

            return $.when(ensureAgencyWideQuestions(), ensureSupplementaryQuestions());
        };

        var submitApplication = function () {
            var saveHandler = self.save({
                initials: self.initials(),
                textMessagingPreferences: self.showTextMessagingPreferences()
                    ? self.textMessagingPreferences.editableItem().toDataModel()
                    : null
            }, false, true);

            OnlineApp.ViewModels.applicationViewModel.isShowAllValidationIcons(true);

            //Do not submit if some of the AppVM children have not yet finished saving
            var hasBusyChildViewModel = OnlineApp.ViewModels.applicationViewModel.any(function (part) {
                return part.isBusy();
            });
            if (hasBusyChildViewModel) {
                self.isBusy(false);
                return;
            }

            // saveHandler might be null if we haven't passed validation
            self.areInitialsInvalid(!saveHandler);
            if (saveHandler) {
                saveHandler
                    .done(function (data, textStatus, jqXHR) {
                        self.isBusy(false);

                        OnlineApp.ViewModels.applicationViewModel
                            .submittedApplicationId(data.applicationId);

                        // for test purposes
                        OnlineApp.ViewModels.applicationViewModel.applicationSubmitted(true);

                        if (data.dateSubmittedText) {
                            self.dateSubmittedText(data.dateSubmittedText);
                        }
                        if (data.verbiage) {
                            self.verbiage(data.verbiage);
                        }

                        self.showPaymentLink(false);
                        if (data.paymentParameters) {

                            var customFields = OnlineApp.ViewModels.applicationViewModel.customFields();
                            if (customFields
                                && customFields["Payment_Required"]
                                && customFields["Payment_Required"].values[0] === "1") {

                                self.showPaymentLink(true);
                                self.paymentLink(customFields["Payment_Required"].data + '?' + data.paymentParameters);
                            }
                        }

                        $(document).trigger(OnlineApp.Events.CommonEventsNames.ApplicationSubmit);
                        gJobs.skipToContentService.showOnNextTab();
                    })
                    .fail(function (jqXHR, textStatus, errorThrown) {
                        self.isBusy(false);

                        var result = null;
                        try {
                            result = ko.utils.parseJson(jqXHR.responseText);
                        } catch (e) {
                        }

                        if (result && window.utils.exists(result, function (error) { return error.propertyName === "JobId"; })) {
                            OnlineApp.ViewModels.applicationViewModel.jobExpired(true);
                        } else if (result && window.utils.exists(result, function (error) { return error.propertyName === "Impersonation"; })) {
                            OnlineApp.Helpers.Notifications.showResponseMessages(result);
                        } else {
                            var isErrorMessageShown = false;

                            if (result && result.length) {
                                for (var i = 0; i < result.length; i++) {
                                    if (result[i]) {
                                        if (result[i].propertyName && result[i].errorMessage) {
                                            toastr.warning(result[i].propertyName + ' - ' + result[i].errorMessage);
                                            isErrorMessageShown = true;
                                        }
                                        else if (result[i].errorMessage) {
                                            toastr.warning(result[i].errorMessage);
                                            isErrorMessageShown = true;
                                        }
                                    }
                                }
                            }

                            if (!isErrorMessageShown) {
                                toastr.warning(Resources.NotificationMessages.EncounteredProblem);
                            }
                        }
                    });
            } else {
                self.isBusy(false);
                var validationFailedEvent = jQuery.Event(OnlineApp.Events.CommonEventsNames.PreSaveValidationFailed);

                validationFailedEvent.target = null;
                $(document).trigger(validationFailedEvent);
            }

            self.areInitialsInvalid(false);
        };

        var self = OnlineApp.ViewModels.Base.DataViewModel.call(this, config) || this;


        self.isShowAlertValidationIcon = ko.observable(false);

        self.submitApplicationEx = function () {
            if (self.isBusy()) {
                return;
            }

            self.isBusy(true);
            submitApplication();
        };


        self.verbiage = ko.observable();
        self.cityName = ko.observable();
        self.agencyLogoUrl = ko.observable();
        self.showPaymentLink = ko.observable(true);
        self.paymentLink = ko.observable();

        self.enableEmailVerification = ko.observable(window.enableEmailVerification);

        self.emailVerificationViewModel = new OnlineApp.ViewModels.EmailVerificationViewModel();
        
        if (self.enableEmailVerification()) {
            self.emailVerificationViewModel.initUserData(); 
        }
        
        self.proceedToSubmitOrPaymentText = ko.observable();

        self.isPaymentEnabled = ko.computed(function () {
            return OnlineApp.ViewModels.applicationViewModel.paymentViewModel.isPaymentEnabled();
        });

        self.applicationsLink = function () {
            if (OnlineApp.Services.pageContextService) {
                return OnlineApp.Services.pageContextService.getApplicationsPageUrl();
            } else {
                return '/Applications/Index';
            }
        };

        self.isPaymentApproved = ko.computed(function () {
            return OnlineApp.ViewModels.applicationViewModel.paymentViewModel.isPaymentApproved();
        });

        self.isPaymentTabEnabled = ko.observable(false);

        self.initials = ko.observable();
        self.areInitialsInvalid = ko.observable(false);
        self.dateSubmittedText = ko.observable();

        self.isReadyForFinalSubmission = ko.observable(true);

        self.initials.subscribe(function () {
            self.saveInitials(OnlineApp.ViewModels.applicationViewModel.jobId(), self.initials());
        });


        self.isBusy = ko.observable(false);

        self.emailPreferences = new OnlineApp.ViewModels.EmailPreferencesViewModel(true);

        self.showEmailPreferences = ko.computed(function () {
            return self.emailPreferences.showOnSubmitTab();
        });

        self.showTextMessagingPreferences = ko.observable(false);

        var textMessagingPreferencesConfig = {
            // submit tab has own get logic
            get: false
        };

        self.textMessagingPreferences = new OnlineApp.ViewModels.TextMessagingPreferencesViewModel(textMessagingPreferencesConfig);

        // ko visible binding sometimes doesn't work
        // e.g. when we import linked in
        // sth wrong with context?
        //self.showApplicationIncompleteConfirm = ko.observable(false);

        self.validate = function () {
            var isValid = self.showInitialsSection() ? self.initials.validate() : true;

            isValid = self.showTextMessagingPreferences()
                ? self.textMessagingPreferences.editableItem().validate() && isValid
                : isValid;

            if (isValid) {
                isValid = OnlineApp.ViewModels.applicationViewModel.validate();
            }

            return isValid;
        };

        self.load = (function (base) {
            return function () {
                base.apply(self, arguments);

                // load text messaging preferences data
                OnlineApp.Services.authenticationService
                    .getUserData()
                    .then(function (data) {
                        if (!data.userIdentifier) {
                            self.textMessagingPreferences.beginEdit(
                                self.textMessagingPreferences,
                                null,
                                false,
                                true);
                            self.showTextMessagingPreferences(true);
                            return;
                        }

                        var isOnGJobsPage = gJobs.areaInfoService.getCurrentArea() === gJobs.areaInfoService.areaNames.GJobs;

                        var employerFolderName = AgencyPages.pageInfoService
                                    ? AgencyPages.pageInfoService.getCurrentAgencyFolderName()
                                    : gJobs.pageInfoService.getCurrentAgencyPageFolderName();

                            if (employerFolderName) {
                                OnlineApp.Services.dataService
                                    .textMessagingPreferences
                                    .get(undefined, { agencyFolderName: employerFolderName, forOnlineApplication: true, forGJobs: isOnGJobsPage })
                                    .then(function (data) {
                                        if (data) {
                                            self.textMessagingPreferences.fromDataModel(data);
                                            self.textMessagingPreferences.beginEdit(
                                                self.textMessagingPreferences,
                                                null,
                                                false,
                                                true);
                                            self.showTextMessagingPreferences(true);
                                        }
                                    });
                            }
                    });
            };
        })(self.load);

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            if (data.verbiage) {
                self.verbiage(data.verbiage);
            }

            if (data.agencyLogoUrl) {
                self.agencyLogoUrl(data.agencyLogoUrl);
            }
        };

        self.CheckAppForSubmit = function (jobId) {
            var vmData = {
                JobId: jobId,
                CheckPayment: false
            };
            OnlineApp.Services.dataService.checkBeforeSubmit.post(vmData).done(function (response) {
                if (response.isOk)
                    self.isReadyForFinalSubmission(true);
                else
                    self.isReadyForFinalSubmission(false);
            });
        }

        self.saveInitials = function(jobId, initials) {
            var postModel = { Initials: initials };
            var postData = { JobId: jobId, Model: postModel };
            if (initials != "") {
                self.isShowAlertValidationIcon(false);
            }
            else {
                self.isShowAlertValidationIcon(true);
            }
            OnlineApp.Services.dataService.setInitials.post(postData).done(function (response) {
                if (response.message == "OK") {
                    self.CheckAppForSubmit(jobId);
                };
            });
        };
        
        self.submitClick = function (data, event) {
           
            if (!self.validate()) {
                OnlineApp.Helpers.layoutHelper.tabbing.activateFirstElement('#submit-step');
                self.isShowAlertValidationIcon(true);
                if (!self.initials.validate()) {
                    let initialsSection = document.getElementById("initials");

                    if (initialsSection) {
                        initialsSection.scrollIntoView();
                    }
                }
                return;
            }

            if (self.isBusy()) {
                return;
            }

            if (gJobs.browserDetector.isIE()) {
                gJobs.screenReadersService.silenceScreenreader();
            }

            self.isBusy(true);
            if (self.isPaymentEnabled() && !self.isPaymentApproved()) {
                var jobId = OnlineApp.ViewModels.applicationViewModel.jobId();
                var postModel = { Initials: self.initials };
                var postData = { JobId:jobId,  Model: postModel };
                OnlineApp.Services.dataService.setInitials.post(postData).done(function (response) {
                    if (response.message != "OK") {
                        // notify error here.
                    };
                });
                self.isBusy(false);
                var targetTabId = '#payment-tab';

                // enable the payment tag here (to prevent people getting to the Payment tab before certification)
                OnlineApp.ViewModels.applicationViewModel.paymentViewModel.isPaymentTabEnabled(true);
                self.isPaymentTabEnabled(true);

                OnlineApp.ViewModels.applicationViewModel.validateAndNavigateToTab(self, targetTabId);
            }
            else {
                ensureQuestionsAutosaved()
                    .then(function () {
                        submitApplication();
                    });
            }

            /*
            ensureQuestionsAutosaved()
                .then(function () {
                    submitApplication();
                });
            */
        };

        // think about relocating this code to appVM
        self.declineClick = function () {
            if (self.isBusy())
                return;

            OnlineApp.ViewModels.applicationViewModel.callbackEventName = Events.CommonEventsNames.CloseFlyout;

            OnlineApp.Controllers.notificationController.showAppIncompleteNotification(function () {
                OnlineApp.ViewModels.applicationViewModel.leaveAppClick();
            });
        };

        self.showWorkHistoryInitials = function () {
            if (OnlineApp.ViewModels.applicationViewModel.tabSettings.acceptWorkHistory() &&
                OnlineApp.ViewModels.applicationViewModel.workExperienceViewModel.items().length == 0) {
                return true;
            }

            return false;
        };

        self.showEducationHistoryInitials = function () {
            if (OnlineApp.ViewModels.applicationViewModel.tabSettings.acceptEducationHistory() &&
                OnlineApp.ViewModels.applicationViewModel.educationViewModel.items().length == 0) {
                return true;
            }

            return false;
        };

        self.showInitialsSection = function () {
            if (!self.enableEmailVerification()) {
                return self.showWorkHistoryInitials() || self.showEducationHistoryInitials();
            } else {
                return self.emailVerificationViewModel.isEmailVerified() && (self.showWorkHistoryInitials() || self.showEducationHistoryInitials());
            }
        };

        self.isEmailVerified = function () {
            if (!self.enableEmailVerification()) {
                return true;
            } else {
                return self.emailVerificationViewModel.isEmailVerified();
            }
        }

        self.proceedToSubmitOrPaymentText = ko.computed(function () {
            
            if (self.isPaymentEnabled() && !self.isPaymentApproved()) {
                return Labels.PROCEED_TO_PAYMENT;
            } else {
                return Labels.SUBMIT;
            }
        });

        $(document).on(OnlineApp.Events.CommonEventsNames.EmailVerified, function () {
             if (!self.initials.validate()) {
                let initialsSection = document.getElementById("initials");
                if (initialsSection) {
                    initialsSection.scrollIntoView();
                }
            }
        });

        /*
            Validation
        */
        (function () {
            self.initials.extend({
                required: {},
                length: {
                    max: 5
                },
                disallowHtml: {}
            });
        })();
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        SubmitViewModel: SubmitViewModel
    });

})(window);;
(function (window, undefined) {
    'use strict';

    function ChangePasswordViewModel() {
        var config = {
            endpoint: "changePassword",
            get: false
        };

        var self = OnlineApp.ViewModels.Base.EditableViewModel.call(this, config) || this;
        var changePasswordFormSelector = '#change-password form';

        self.currentPassword = ko.observable().extend({ required: {} });
        self.currentPassword.wrapValidationMessage = ko.observable(true);
        self.newPassword = OnlineApp.ViewModels.Common.PasswordExtender({ required: {}, password: {} });

        self.popoverContent = ko.observable(Resources.AdditionalInfoMessages.ThingsToConsider);
        self.passwordRequirements = Resources.AdditionalInfoMessages.passwordRequirements;

        self.isCurrentPasswordSelected = ko.observable(false);
        self.isNewPasswordSelected = ko.observable(false);
        self.hasCurrentPasswordChangedAfterError = ko.observable(true);
        self.hasNewPasswordChangedAfterError = ko.observable(true);        

        self.currentPassword.subscribe(function (value) {
            self.hasCurrentPasswordChangedAfterError(true);
        });

        self.newPassword.subscribe(function (value) {
            self.hasNewPasswordChangedAfterError(true);
        });        

        self.isCurrentPasswordSelected.subscribe(function (value) {
            if (!value && self.hasCurrentPasswordChangedAfterError()) {
                self.currentPassword.validate();
            }
        })

        self.isNewPasswordSelected.subscribe(function (value) {
            if (!value && self.hasNewPasswordChangedAfterError()) {
                self.newPassword.validate();
            }
        })
        

        self.isIE = ko.observable(gJobs.browserDetector.isIE());
        self.isInPasswordBlock = ko.observable(false);
        self.inPasswordBlock = function () {
            self.isInPasswordBlock(true);
        };
        self.outOfPasswordBlock = function () {
            // set handling to the end of event queue
            setTimeout(function () {
                if (self.isInPasswordBlock() && !self.isNewPasswordSelected() && !self.newPassword.isConfirmPasswordSelected()) {
                    self.isInPasswordBlock(false);
                }
            }, 0);
        };

        self.newPasswordSameAsOld = ko.computed(function () {
            if (self.currentPassword() === '')
                return false;

            if (self.newPassword.hasError())
                return false;

            return self.newPassword() == self.currentPassword();
        }).extend({ throttle: 1 });

        self.changePassword = function () {
            var vmData = {
                currentPassword: self.currentPassword(),
                newPassword: self.newPassword(),
                confirmNewPassword: self.newPassword.confirmPassword()
            };

            $.post("/user/changePassword", vmData, function (data) {
                if (data.shouldLogout) {
                    OnlineApp.Services.authenticationService.logout().done(function () {
                        location.reload();
                    });
                }

                if (data.isSuccess) {
                    var passwordChangedSuccessMessage = "Password changed!";
                    toastr.success(passwordChangedSuccessMessage);

                    gJobs.screenReadersService.setAriaLiveNotification(passwordChangedSuccessMessage);

                    // clear fields
                    self.currentPassword("");
                    self.currentPassword.isValidationMessageVisible(false);
                    self.currentPassword.hasError(false);

                    self.newPassword("");
                    self.newPassword.isValidationMessageVisible(false);
                    self.newPassword.hasError(false);

                    self.newPassword.confirmPassword("");
                    OnlineApp.Helpers.layoutHelper.tabbing.getFirstElement($(changePasswordFormSelector)).focus();
                }
                else {
                    switch (data.errorPropertyName) {
                        case 'Current Password':
                            self.currentPassword.hasError(true);
                            self.currentPassword.isValidationMessageVisible(true);
                            self.currentPassword.validationMessage(data.errorMessage);
                            self.hasCurrentPasswordChangedAfterError(false);
                            $('#ci-currentPassword').focus();
                            break;
                        case 'New Password':
                            self.newPassword.hasError(true);
                            self.newPassword.isValidationMessageVisible(true);
                            self.newPassword.validationMessage(data.errorMessage);
                            self.hasNewPasswordChangedAfterError(false);
                            $('#ci-newPassword').focus();
                            break;
                        case 'Confirm New Password':
                            self.newPassword.confirmPassword.hasError(true);
                            self.newPassword.confirmPassword.isValidationMessageVisible(true);                            
                            self.newPassword.confirmPassword.validationMessage(data.errorMessage);                            
                            $('#ci-newConfirmPassword').focus();
                            break;
                        default:
                            OnlineApp.Helpers.layoutHelper.tabbing.getFirstElement($(changePasswordFormSelector)).focus();
                            break;
                    }
                }

               
            });

        };

        self.validate = function () {
            self.currentPassword.validate();
            if (self.currentPassword.hasError() || !self.hasCurrentPasswordChangedAfterError()) {
                return false;
            }

            self.newPassword.validate();
            if (self.newPassword.hasError() || !self.hasNewPasswordChangedAfterError()) {
                return false;
            }

            self.newPassword.confirmNewPassword.validate()
            if (self.newPassword.confirmNewPassword.hasError()) {
                return false;
            }

            if (self.newPasswordSameAsOld()) {
                return false;
            }

            return true;
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        ChangePasswordViewModel: ChangePasswordViewModel
    });
})(window);;
(function(window, undefined) {
    'use strict';

    function ResumeTemplateViewModel() {
        var self = OnlineApp.ViewModels.Base.BaseViewModel.apply(this, arguments) || this;

        self.isResumeTemplateApplied = ko.observable(false);

        self.existingUserTemplates = ko.observableArray();
        self.resumeTemplateId = ko.observable();
        self.draftJobAppId = ko.observable();

        self.showResumeTab = ko.observable(false);
        self.showProfileTab = ko.observable(false);

        self.addResumeTemplateToDraft = function (resumeTemplateId, jobId) {
            return OnlineApp.Services.jobApplicationService.addResumeTemplateToDraft(
                jobId,
                resumeTemplateId
            );
        };

        self.getActiveOrNewJobApplication = function (resumeTemplateId, jobId, employeeId, jobReferrer, departmentFolder) {
            return OnlineApp.Services.jobApplicationService.getActiveOrNewJobApplication(
                resumeTemplateId,
                jobId,
                employeeId,
                jobReferrer,
                departmentFolder
            );
        };

        // method returns bool indicating whether we should force data load
        self.processExistingUserTemplates = function (templates, options) {

            options = $.extend({}, {
                ignoreNavigation: false,
                noTemplatesCallback: undefined,
                manyTemplatesCallback: undefined
            }, options);

            if (!templates || templates.length === 0) {
                // Resume Tab : If user has no template then we show
                // 'Upload resume' section,
                // Ones they select anyone of these or skip it,
                // we should create a ResumeTemplate and use its ID
                // to get all sub-entities.
                self.showResumeTab(true);

                var jobTitle = $('[job-title]').attr('job-title');
                var currentVirtualPageType =
                    AgencyPages && AgencyPages.pageInfoService && AgencyPages.pageInfoService.getCurrentVirtualPageProperties('resume');
                if (currentVirtualPageType) {
                    var pageViewOptions = {
                        title: 'Job Opportunities | ' + jobTitle + currentVirtualPageType.title,
                        page: currentVirtualPageType.page,
                        sendToAllTrackers: true
                    };

                    gJobs.common.analytics.trackVirtualPageView(pageViewOptions);
                }

                if (options.ignoreNavigation) {
                    return false;
                }
                
                if (options.noTemplatesCallback) {
                    options.noTemplatesCallback();
                }

            } else {
                self.existingUserTemplates(templates);

                if (templates.length === 1) {
                    // If user has one template then we will not show
                    // Resume and Profile tab and directly use
                    // this resume template ID to get all sub-entities.
                    self.resumeTemplateId(templates[0].id);

                    return true;
                } else if (templates.length > 1) {
                    // Profile Tab : If user has multiple templates (for old users)
                    // we will show the Profile tab
                    // which will list all available templates
                    // and we use its ID to get all sub-entities.
                    self.showProfileTab(true);

                    if (options.ignoreNavigation) {
                        return false;
                    }

                    if (!self.resumeTemplateId() && options.manyTemplatesCallback) {
                        options.manyTemplatesCallback();
                    }
                }
            }

            return false;
        };

        // used in html on template click
        self.selectResumeTemplate = function (item) {
            self.resumeTemplateId(item.id);
        };

        self.onResumeTemplateKeyUp = function (item, event) {
            if (event.keyCode == $.ui.keyCode.ENTER) {
                self.resumeTemplateId(item.id);
            }
        }

        // start new resume template, when none exists
        self.startNewResumeTemplate = function () {
            return OnlineApp.Services.jobApplicationService.startNewResumeTemplate()
                .done(function(resumeTemplateId) {
                    self.resumeTemplateId(resumeTemplateId);
                })
                .fail(function() {
                    toastr.warning(Resources.NotificationMessages.EncounteredProblem);
                });
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        ResumeTemplateViewModel: ResumeTemplateViewModel
    });

})(window);;
(function (window, undefined) {
    'use strict';

    var PaymentTypes = {
        CREDIT_CARD: 'creditCard',
        CHECK: 'check',
        WAIVER_FORM: 'waiverForm'
    };

    var messages = {
        WaiverFormPaymentInvalid: 'Waiver form is not uploaded.'
    };

    function PaymentBaseViewModel(paymentType, paymentName, mayBeApproved) {

        var self = this;

        self.paymentType = paymentType;
        self.paymentName = paymentName;

        if (mayBeApproved) {
            self.isPaymentApproved = ko.observable(false);
        }
    }

    // Used in Submitted Applications
    function PaymentReadOnlyViewModel() {
        var self = OnlineApp.ViewModels.Base.BaseViewModel.apply(this, arguments) || this;

        self.creditCardType = "Credit/Debit Card";
        self.checkType = "Check";
        self.waiverFormType = "Waiver Form";

        self.amount = ko.computed({
            read: function () {
                return self.applicationFee;
            },
            deferEvaluation: true
        });

        self.initPaymentTypeText = function (paymentType) {
            if (paymentType == "CreditCard")
                self.paymentType = self.creditCardType;
            else if (paymentType == "Check")
                self.paymentType = self.checkType;
            else
                self.paymentType = self.waiverFormType;
        };

        self.fromDataModel = function (data) {
            self.applicationFee = data.applicationFee;
            self.initPaymentTypeText(data.selectedPaymentType);
            self.confirmationNumber = data.confirmationNumber;
            self.clientFilename = data.clientFileName;
            self.attachmentId = data.attachmentId;
            return self;
        };
    }

    function PaymentViewModel() {
        var config = {
            endpoint: "paymentInfo",
            passJobId: true,
        };
        var self = OnlineApp.ViewModels.Base.DataViewModel.call(this, config) || this;

        var applicationViewModel = OnlineApp.ViewModels.applicationViewModel;

        //Payment tab is edit-mode only
        self.isInEditMode = ko.observable(true);
        //changes are considered always valid since user is allowed to navigate away from this tab at any moment
        self.validateChanges = ko.observable(true);

        self.isPaymentTabEnabled = ko.observable(false);
        self.isTabAccesible = function () {
            return self.isPaymentTabEnabled() && applicationViewModel.validateBeforePayment();
        };

        self.hasError = ko.observable(false);
        self.creditCardPayment = new OnlineApp.ViewModels.CreditCardViewModel();
        self.checkPayment = new OnlineApp.ViewModels.CheckViewModel();
        self.waiverFormPayment = new OnlineApp.ViewModels.WaiverFormViewModel();
        self.applicationFee = ko.observable();

        self.waiverFormOnly = ko.observable(false);

        // Some applications not getting PaymentTypeSet.
        self.isBusy = ko.observable(false);
        
        self.singleCategoryMode = ko.computed({
            read: function () {
                var bResult = false;
                if (self.paymentCategories.length == 1) {
                    // May need to make call to DB to set category here.
                    bResult = true;
                }
                return bResult;
                //return true;
            },
            deferEvaluation:true
        });

        self.vendorName = ko.observable("Notset");
        self.selectedListItem = ko.observable(-1);

        self.isPaymentCategorySelected = ko.computed({
            read: function () {
                if (self.selectedListItem() > -1)
                    return true;
                return false;
            },
            deferEvaluation: true
        });

        self.selectedPaymentCategory = ko.computed({
            read: function () {
                var pc = null;
                for (var index = 0; index < self.paymentCategories.length; ++index) {
                    if (self.paymentCategories[index].listItem == self.selectedListItem()) {
                        pc = self.paymentCategories[index];
                    }
                }
                return pc;
            },
            deferEvaluation: true
        });

        self.areAllVariablesSet = ko.computed({
            read: function () {
                return self.isPaymentCategorySelected() &&
                    self.isPaymentMethodSelected() &&
                    !self.isBusy() &&
                    self.isReadyForFinalSubmission() &&
                    (!self.isWaiverForm() ||
                    self.isWaiverFormUploaded());
            },
            deferEvaluation: true
        });

        self.paymentModels = [
            self.creditCardPayment,
            self.checkPayment,
            self.waiverFormPayment
        ];

        var emptyObject = {};

        // Internal variables for switching payments.
        self.chosen = ko.observable("");
        self.active = ko.observable(emptyObject);

        // What payment was chosen.
        self.chosenPayment = ko.computed({
            read: self.chosen,
            write: function (newValue) {
                for (var i = 0; i < self.paymentModels.length; i++) {
                    if (self.paymentModels[i].paymentName === newValue) {
                        self.activePayment(self.paymentModels[i]);
                        break;
                    }
                }

                self.chosen(newValue);
            }
        });
        self.chosenPayment.subscribe(function (newValue) {
            self.isPaymentMethodSelected(true);
            setTimeout(function() {
                OnlineApp.Helpers.layoutHelper.tabbing.updateIndices();
            });
        });

        self.onPaymentFormRendered = function () {
            OnlineApp.Helpers.layoutHelper.tabbing.updateIndices();
        }
        self.totalAmountText = ko.computed({
            read: function () {
                return "$" + parseFloat(self.totalAmount()).toFixed(2);
            },
            deferEvaluation: true
        });
        
        self.totalAmount = ko.computed({
            read: function () {
                var totalX = 0;
                for(var index=0;index < self.paymentCategories.length; ++index) {
                    if (self.paymentCategories[index].listItem == self.selectedListItem()) {
                        totalX = self.paymentCategories[index].amount;
                    }
                }
                var total = parseFloat(totalX);
                if ((total == 0) && (self.selectedPaymentCategory())) {
                    self.chosenPayment(PaymentTypes.WAIVER_FORM);
                    self.waiverFormOnly(true);
                } else {
                    self.waiverFormOnly(false);
                }
                return total.toFixed(2);
            },
            deferEvaluation: true
        });


        // Set active model.
        self.activePayment = ko.computed({
            read: self.active,
            write: function (newValue) {
                self.active(newValue);
                self.chosen(newValue.paymentName);
            }
        });

        // Is payment enabled in this job.
        self.isPaymentEnabled = ko.observable(false);

        // If the payment variants are allowed.
        self.creditCardPaymentAllowed = ko.observable(false);
        self.checkPaymentAllowed = ko.observable(false);
        self.waiverAllowed = ko.observable(false);

        self.isPaymentRequired = ko.computed({
            read: function () {
                var retVal = true;
                if (self.totalAmount() == 0)
                    retVal = false;
                return retVal;
            },
            deferEvaluation: true
        });


        self.paymentPopoverContent = function(shouldStripHtmlTags) {
            var viewModel = {
                showCreditCard: self.creditCardPaymentAllowed(),
                showCheck: self.checkPaymentAllowed(),
                showWaiver: self.waiverAllowed()
            };
            if (applicationViewModel.isHtmlTemplateLoaded()) {
                return OnlineApp.Helpers.Templates.renderTemplateToString('Templates/Payments/PaymentTypesPopover', viewModel, shouldStripHtmlTags);
            } else {
                return '';
            }
        };

        // Managing the page behaviour.
        self.isPaymentMethodSelected = ko.observable(false);
        self.isPaymentApproved = ko.observable(false);
        self.isWaiverFormUploaded = ko.observable(false);

        self.isWaiverForm = ko.computed({
            read: function () {
                return (self.activePayment().paymentName === PaymentTypes.WAIVER_FORM);
            },
            deferEvaluation: true
        });

        self.isIE = ko.observable(gJobs.browserDetector.isIE());

        self.subscriptionOnPaymentApproval = ko.computed(function () {
            if (self.activePayment().isPaymentApproved != undefined) {
                var isApproved = self.activePayment().isPaymentApproved();

                if (isApproved !== self.isPaymentApproved())
                    self.isPaymentApproved(isApproved);
            }
        });

        self.waiverFormPayment.isWaiverFormUploaded.subscribe(function(newValue) {
            self.isWaiverFormSectionInvalid(
                self.activePayment().paymentName === PaymentTypes.WAIVER_FORM &&
                !self.waiverFormPayment.isWaiverFormUploaded());
            self.isWaiverFormUploaded(newValue);
        });

        self.showCheckValidationIcon = ko.computed(function() {
            return self.areAllVariablesSet() && self.isVisited();
        });

        self.showAlertValidationIcon = ko.computed(function () {
            if (applicationViewModel && applicationViewModel.hasError()) {
                return false;
            }
            if (applicationViewModel.completeViewModel && 
                applicationViewModel.completeViewModel.submit && 
                !applicationViewModel.completeViewModel.submit.isPaymentTabEnabled()
            ) {
                return false;
            }
            return !self.areAllVariablesSet() && self.isVisited();
        })

        self.isWaiverFormSectionInvalid = ko.observable(false);
        self.waiverFormSectionInvalidMessage = ko.observable(messages.WaiverFormPaymentInvalid);

        self.isReadyForFinalSubmission = ko.observable(false);

        var oldPaymentType = 0;
        self.initPayment = function (settings) {
            self.creditCardPaymentAllowed(settings.creditCardPaymentAllowed);
            self.checkPaymentAllowed(settings.checkPaymentAllowed);
            self.waiverAllowed(settings.waiverAllowed);

            for (var i = 0; i < self.paymentModels.length; i++) {
                if (self.paymentModels[i].paymentType === settings.selectedPaymentType) {

                    self.activePayment(self.paymentModels[i]);
                    oldPaymentType = settings.selectedPaymentType;
                    break;
                }
            }

            var selectedCategory = settings.selectedPaymentCategory;
            if (selectedCategory) {
                for (var i = 0; i < self.paymentCategories.length; i++) {
                    var paymentCategory = self.paymentCategories[i];
                    if (paymentCategory.paymentCategoryName === selectedCategory.paymentCategoryName
                        && paymentCategory.amount == selectedCategory.amount) {
                        self.selectedListItem(paymentCategory.listItem);
                        break;
                    }
                }
            }

            if (settings.isPaymentMethodApproved) {
                self.isPaymentApproved(true);
            }

            if (self.activePayment().isPaymentApproved != undefined) {
                self.activePayment().isPaymentApproved(self.isPaymentApproved());
            }
        };

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            self.isPaymentEnabled(data.isPaymentEnabled);

            if (!data.isPaymentEnabled) {
                return;
            }

            self.paymentCategories = data.paymentCategories;
            self.paymentCategories.forEach(function (payCat) {
                payCat.descriptionFixed = FixLineBreaks(payCat.description);
            });

            self.initPayment(data.paymentSettings);

            self.creditCardPayment.fromDataModel({
                data: data.creditCardModel,
                isPaymentApproved: data.creditCardModel.creditCardPaymentApproved,
                vendorName: data.creditCardModel.vendorName
            });

            self.checkPayment.fromDataModel(data.checkModel);
            self.waiverFormPayment.fromDataModel(data.waiverFormModel);

            // When only one category, set a default payment category.
            if (self.paymentCategories.length === 1 && self.selectedListItem() !== 1) {
                var listItem = self.paymentCategories[0].listItem;
                if (listItem != null && listItem != undefined) {
                    self.selectedListItem(listItem);
                }
                else {
                    self.selectedListItem(1);
                }
                self.setPaymentCategory();
            }

            if (self.waiverFormPayment.isWaiverFormUploaded()) {
                setPaymentByName(PaymentTypes.WAIVER_FORM);
                self.setPaymentType();
            }

            self.isWaiverFormSectionInvalid(
                self.chosenPayment() === PaymentTypes.WAIVER_FORM &&
                !self.waiverFormPayment.isWaiverFormUploaded()
            );

            self.CheckAppForSubmit();
        };

        self.setPaymentType = function () {

            var paymentType = self.activePayment().paymentType;

            var paymentCategory = self.selectedPaymentCategory();

            if (paymentType === oldPaymentType) {
                return true;
            }

            var vmData = {
                JobId: applicationViewModel.jobId(),
                PaymentType: paymentType,
                PaymentCategory: paymentCategory.paymentCategoryName,
                PaymentCategoryId: paymentCategory.paymentCategoryId
            };

            self.isBusy(true);

            OnlineApp.Services.dataService.paymentType.post(vmData).done(function (response) {
                self.isBusy(false);
                if (response.data.paymentSuccess) {
                    oldPaymentType = paymentType;
                    if (paymentType === 1) {
                        var paymentTypeAnnouncementContainer = $('#chosen-payment-type-announcement');
                        paymentTypeAnnouncementContainer.text('');
                        var announcement = $('.credit-card .payment-type-description-container').text().replace(/\n/g, " ").trim();
                        
                        setTimeout(function () { 
                            paymentTypeAnnouncementContainer.text(announcement);
                         }, 300);
                    }
                    self.CheckAppForSubmit();
                }
                else {
                    setPaymentByType(oldPaymentType);
                    toastr.warning(response.data.message);
                    self.isReadyForFinalSubmission(false);
                }
            });

            self.isWaiverFormSectionInvalid(false);
            return true;
        };

        var oldPaymentCategory = null;
        self.setPaymentCategory = function () {
            var paymentCategory = self.selectedPaymentCategory();

            if ((!paymentCategory && !oldPaymentCategory) ||
                (oldPaymentCategory && oldPaymentCategory.paymentCategoryId === paymentCategory.paymentCategoryId &&
                    oldPaymentCategory.paymentCategoryName === paymentCategory.paymentCategoryName)) {
                return true;
            }

            // Also need to check paymentType since Zero fee autosets to waiver.
            var paymentType = self.activePayment().paymentType;
            if (paymentType !== oldPaymentType) {
                self.setPaymentType();
            }


            self.isBusy(true);
            var vmData = {
                JobId: applicationViewModel.jobId(),
                PaymentCategory: paymentCategory.paymentCategoryName,
                PaymentCategoryId: paymentCategory.paymentCategoryId
            };

            OnlineApp.Services.dataService.paymentCategory.post(vmData).done(function (response) {
                if (response.data.paymentSuccess) {
                    self.isBusy(false);
                    oldPaymentCategory = paymentCategory;
                    self.CheckAppForSubmit();
                }
            });
            
            return true;
        };

        function setPaymentByType(type) {
            for (var i = 0; i < self.paymentModels.length; i++) {
                if (self.paymentModels[i].paymentType === type) {
                    self.activePayment(self.paymentModels[i]);
                    return;
                }
            }

            // By default.
            self.activePayment(emptyObject);
        }

        function setPaymentByName(name) {
            for (var i = 0; i < self.paymentModels.length; i++) {
                if (self.paymentModels[i].paymentName === name) {
                    self.activePayment(self.paymentModels[i]);
                    return;
                }
            }

            // By default.
            self.activePayment(emptyObject);
        }

        self.validate = function () {
            var isValid = true;
            if (!self.chosenPayment()) {
                isValid = false;
            }

            if (self.chosenPayment() === PaymentTypes.CREDIT_CARD) {
                isValid = self.isPaymentApproved();
            }

            self.isWaiverFormSectionInvalid(self.chosenPayment() === PaymentTypes.WAIVER_FORM && !isValid);

            self.hasError(!isValid);
            return isValid;
        };

        self.setCanNotAccessTabNotification = function () {
            var notificationText = 'Can not access Pay and Submit tab. Please, accept all terms on Certify tab.';
            
            gJobs.screenReadersService.setNotificationOnElement({
                text: notificationText,
                $element: $('a[href="#payment-tab"]')
            });
        };


        self.setPrice = function (price) {
            self.applicationFee = price;
            return true;
        };

        self.proceedClick = function () {
            var paymentCategory = self.selectedPaymentCategory();
 
            var paymentType = self.activePayment().paymentType;
            var payData = {
                JobId: applicationViewModel.jobId(),
                PaymentType: paymentType,
                PaymentCategory: paymentCategory.paymentCategoryName,
                PaymentCategoryId: paymentCategory.paymentCategoryId
            };
            OnlineApp.Services.dataService.checkPaymentType.post(payData).done(function (response) {
                if (response.data.isSuccess) {
                    applicationViewModel.completeViewModel.submit.submitApplicationEx();
                } else {
                    toastr.warning(response.data.message);
                }
            });
        }


        self.getPaymentInfo = function () {

            var vmData = {
                JobId: applicationViewModel.jobId()
            };

            OnlineApp.Services.dataService.paymentTransactionInfo.post(vmData).done(function (response) {
                if (response.data.success) {
                    alert('success ' + response.data.message);
                }
            });
            return true;

        };

        function FixLineBreaks(data) {
            return data.replace(/\n/g, '<br/>');
        }

        self.CheckAppForSubmit = function () {
            var vmData = {
                JobId: applicationViewModel.jobId()
            };
            OnlineApp.Services.dataService.checkBeforeSubmit.post(vmData).done(function (response) {
                if (response.isOk)
                    self.isReadyForFinalSubmission(true);
                else
                    self.isReadyForFinalSubmission(false);
            });
        }

    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        PaymentViewModel: PaymentViewModel,
        PaymentBaseViewModel: PaymentBaseViewModel,
        PaymentReadOnlyViewModel: PaymentReadOnlyViewModel
    });
})(window);;
(function (window, undefined) {
    'use strict';

    var CREDIT_CARD_PAYMENT_POST_FAILED_MESSAGE = "An error has occurred. Please try again.";

    function CreditCardViewModel() {

        var self = OnlineApp.ViewModels.Base.ValidatableViewModel.apply(this, arguments) || this;
        var applicationViewModel = OnlineApp.ViewModels.applicationViewModel;

        OnlineApp.ViewModels.PaymentBaseViewModel.call(self, 1, "creditCard", true);

        self.isBusy = ko.observable(false);

        self.isServerValidationSectionVisible = ko.observable(false);
        self.serverValidationMessage = ko.observable();

        self.confirmationNumber = ko.observable();

        self.isPaymentStarted = ko.observable(false);

        self.vendorName = ko.observable("");
        self.IsVisaVendor = false;

        self.fromDataModel = function (response) {
            if (!response || !response.data) {
                return;
            }

            self.isPaymentApproved(response.isPaymentApproved);
            self.confirmationNumber(response.data.confirmationNumber);
            self.vendorName(response.vendorName);
            self.IsVisaVendor = response.data.vendorKeyName.toLowerCase() == "visapaymentproc";
        };

        self.redirectToPaymentSite = function (paymentData) {
            if (self.isServerValidationSectionVisible()) {
                return;
            }

            self.isBusy(true);

            paymentData.paymentTabUrl = window.location.href;

            OnlineApp.Services.dataService.creditCardPayment.post(paymentData)
                .done(function(response) {
                    if (response.data.success) {
                        self.isServerValidationSectionVisible(false);
                        window.location.replace(response.data.url);
                    } else {
                        self.isBusy(false);
                        self.isServerValidationSectionVisible(true);
                        self.serverValidationMessage(response.data.message);
                    }
                })
                .fail(function() {
                    self.isBusy(false);
                    self.isServerValidationSectionVisible(true);
                    self.serverValidationMessage(CREDIT_CARD_PAYMENT_POST_FAILED_MESSAGE);
                });
        };

        self.redirectToPaymentSiteVISA = function (paymentData) {
            if (self.isServerValidationSectionVisible()) {
                return;
            }

            self.isBusy(true);

            paymentData.paymentTabUrl = window.location.href;

            OnlineApp.Services.dataService.creditCardPayment.post(paymentData)
                .done(function (response) {
                    if (response.data.success) {
                        self.isServerValidationSectionVisible(false);

                        // Need to replace this with the post command here.
                        var postParams = response.data.visaPostParameters;
                        var visaUrl = response.data.url;
                        self.postToVisa(visaUrl, postParams);
                    } else {
                        self.isBusy(false);
                        self.isServerValidationSectionVisible(true);
                        self.serverValidationMessage(response.data.message);
                    }
                })
                .fail(function () {
                    self.isBusy(false);
                    self.isServerValidationSectionVisible(true);
                    self.serverValidationMessage(CREDIT_CARD_PAYMENT_POST_FAILED_MESSAGE);
                });
        }

        self.startPaymentBtnClick = function () {
            var paymentAmt = applicationViewModel.paymentViewModel.totalAmount();
            var paymentCategory = applicationViewModel.paymentViewModel.selectedPaymentCategory();

            var paymentType = applicationViewModel.paymentViewModel.activePayment().paymentType;
            var payData = {
                JobId: applicationViewModel.jobId(),
                PaymentType: paymentType,
                PaymentCategory: paymentCategory.paymentCategoryName,
                PaymentCategoryId: paymentCategory.paymentCategoryId,
                PaymentAmount: paymentAmt
            };
            OnlineApp.Services.dataService.checkPaymentType.post(payData).done(function (response) {
                if (response.data.isSuccess) {
                    self.isPaymentStarted(true);
                    var paymentData = {
                        jobId: applicationViewModel.jobId()
                    };

                    if (self.IsVisaVendor)
                        self.redirectToPaymentSiteVISA(paymentData);
                    else
                        self.redirectToPaymentSite(paymentData);
                } else {
                    toastr.warning(response.data.message);
                }
            });

        };




        self.retryBtnClick = function() {
            self.isServerValidationSectionVisible(false);

            var paymentData = {
                jobId: applicationViewModel.jobId()
            };

            self.redirectToPaymentSite(paymentData);
        };

        self.postToVisa = function (path, params, method) {
            method = method || "post"; // Set method to post by default if not specified.

            var form = document.createElement("form");
            form.setAttribute("method", method);
            form.setAttribute("action", path);

            for (var key in params) {
                if (params.hasOwnProperty(key)) {
                    var hiddenField = document.createElement("input");
                    hiddenField.setAttribute("type", "hidden");
                    hiddenField.setAttribute("name", key);
                    hiddenField.setAttribute("value", params[key]);

                    form.appendChild(hiddenField);
                }
            }

            document.body.appendChild(form);
            form.submit();

        }
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        CreditCardViewModel: CreditCardViewModel
    });
})(window);;
(function (window, undefined) {
    'use strict';

    function CheckViewModel() {

        var self = OnlineApp.ViewModels.Base.BaseViewModel.apply(this, arguments) || this;

        OnlineApp.ViewModels.PaymentBaseViewModel.call(self, 2, "check");

        self.address1 = ko.observable("");
        self.address2 = ko.observable("");
        self.countyName = ko.observable("");
        self.stateAbbreviation = ko.observable("");
        self.city = ko.observable("");
        self.zipCode = ko.observable("");
        self.applicationFeeCheckVerbiage = ko.observable("");
        self.applicationFeeCheckVerbiageFixed = ko.computed({
            read: function () {
                var result = self.applicationFeeCheckVerbiage().replace(/\n/g, '<br/>');
                return result;
            },
            deferEvaluation: true
        });

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }
            self.address1 = ko.observable(data.address1);
            self.address2 = ko.observable(data.address2);
            self.countyName = ko.observable(data.countyName);
            self.stateAbbreviation = ko.observable(data.stateAbbreviation);
            self.city = ko.observable(data.city);
            self.zipCode = ko.observable(data.zipCode);
            self.applicationFeeCheckVerbiage = ko.observable(data.applicationFeeCheckVerbiage);
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        CheckViewModel: CheckViewModel
    });
})(window);;
(function (window, undefined) {
    'use strict';

    function WaiverFormViewModel() {

        var self = this;
        var PASSWORD_PROTECTED_FILE_ERROR_CODE = 'PASSWORD_PROTECTED_FILE';
        var PASSWORD_PROTECTED_WARNING_SELECTOR = '.password-protected-warning-container:first';

        OnlineApp.ViewModels.PaymentBaseViewModel.call(self, 3, "waiverForm");
        OnlineApp.ViewModels.FileUploadViewModel.call(self);

        self.isActive = ko.observable(false);
        self.isUploadingEnabled = ko.observable(false);
        self.isWaiverFormUploaded = ko.observable(false);

        self.url = ko.observable();
        self.verbiage = ko.observable();
        self.allowedExtensions = ko.observableArray();

        self.verbiageFixed = ko.computed({
            read: function () {
                var result = self.verbiage().replace(/\n/g, '<br/>');
                return result;
            },
            deferEvaluation: true
        });

        self.supportedFileTypesDescription = ko.computed(function () {
            return self.allowedExtensions().join(", ");
        });

        self.downloadUrl = ko.observable('/api/payment/getWaiverForm?jobId='
            + OnlineApp.ViewModels.applicationViewModel.jobId());

        self.fromDataModel = function (data) {
            if (!data) {
                return;
            }

            self.url(data.waiverFormUrl);
            self.verbiage(data.applicationFeeWaiverVerbiage);
            self.allowedExtensions(
                $.map(data.allowedExtensions, function (ext) {
                    return ext.toLowerCase();
                }));
            if (data.isWaiverFormUploaded) {
                self.isWaiverFormUploaded(true);
            }
        };

        self.enableUploading = function() {
            self.isUploadingEnabled(true);
            $('#upload-waiver-form-button').focus();
        };

        self.fileExtensionAllowed = function (fileName) {
            var extension = getFileExtension(fileName);
            if (extension === '' || extension === null)
                return false;

            return $.inArray(extension.toLowerCase(), self.allowedExtensions()) != -1;
        };

        self.uploadedFileId = ko.observable('');

        self.onFileAdd = (function () {

            var base = self.onFileAdd;

            return function(e, data) {
                self.fileIsPasswordProtected(false);

                $(this).data('blueimpFileupload').options.url =
                    '/api/payment/uploadForm'
                        + '?jobId=' + OnlineApp.ViewModels.applicationViewModel.jobId();

                if (data.files[0].name && !self.fileExtensionAllowed(data.files[0].name)) {
                    self.fileUploadError(Resources.FileUploadMessages.unsupportedExtension);

                    return false;
                }

                if (data.files[0].size === 0) {
                    self.fileUploadError(Resources.FileUploadMessages.invalidFile);

                    return false;
                }

                if (data.files[0].size && data.files[0].size > maximumFileUploadSizeInKB * 1024) {
                    self.fileUploadError(Resources.FileUploadMessages.fileTooLarge());

                    return false;
                }

                self.currentlyUploadingFile(data.files[0].name);
                base(e, data);
            };
        })();

        self.onUploadDone = (function() {

            var base = self.onUploadDone;

            return function(e, data) {
                
                if (data.result && data.result.status === 'OK') {

                    self.isWaiverFormUploaded(true);
                    self.uploadedFileId(data.result.attachmentId);

                    var deleteWaiverFormButton = $("#delete-waiver-form-button");
                    deleteWaiverFormButton.focus();
                    gJobs.screenReadersService.setAriaLiveNotification('File uploaded successfully.');
                } else if (data.result && data.result.errorCode === PASSWORD_PROTECTED_FILE_ERROR_CODE) {
                    self.currentlyUploadingFile('');
                    self.fileIsPasswordProtected(true);

                    gJobs.screenReadersService.setAriaLiveNotification($(PASSWORD_PROTECTED_WARNING_SELECTOR).text());

                    $(".waiver-form .btn-app-add").focus();

                    return false;
                }

                base(e, data);
                OnlineApp.ViewModels.applicationViewModel.paymentViewModel.CheckAppForSubmit();
            };
        })();

        self.waiverFormUploader = function (e) {
            self.fileUploader = $(e).fileupload({
                dataType: "json",
                dropZone: $(e).closest('form').find('.box-container'),
                add: self.onFileAdd,
                send: self.onFileSend,
                progress: self.onUploadProgress,
                done: self.onUploadDone,
                fail: self.onUploadFail
            });
        };

        self.deleteForm = function () {

            var jobId = OnlineApp.ViewModels.applicationViewModel.jobId();

            OnlineApp.Services.dataService.waiverForm['delete'](null, { jobId: jobId }).done(function (response) {
                if (response.data.success) {

                    self.fileUploadComplete(false);
                    self.isUploadingEnabled(false);
                    self.currentlyUploadingFile('');

                    self.isWaiverFormUploaded(false);

                    toastr.success("Waiver form deleted.");
                    gJobs.screenReadersService.setAriaLiveNotification('');
                }
                else {
                    toastr.warning(response.data.message);
                }
            });
        };

        self.fileUploadError.subscribe(function (value) {
            if (value) {
                toastr.warning(value);
                self.fileUploadError('');
            }
        });

        function getFileExtension(fileName) {
            var re = /(?:\.([^.]+))?$/;
            return re.exec(fileName)[1];
        }
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        WaiverFormViewModel: WaiverFormViewModel
    });
})(window);;
(function (window, undefined) {
    'use strict';

    var menuSteps = {
        // 'LoginSuccess': '0',
        // 'LoginFailure': '1',
        'resume-tab': '2', // Resume
        'general-info-tab': '3', // Info
        'work-tab': '4', // Work
        'education-tab': '5', // Education
        'additional-info-tab': '6', // Additional
        'references-tab': '7', // References
        'questions-tab': '8', // Questions
        'attachments-tab': '9', // Attachments
        'review-tab': '10', // Review
        'submit-tab': '11', // Submit
        'profile-tab': '12', // Profile
        'payment-tab': '14', // Payment
        getKey: function (tabNumber) {
            var tabNumberType = typeof tabNumber;
            if (tabNumberType !== 'number' && tabNumberType !== 'string') {
                return 'general-info-tab';
            }

            for (var property in menuSteps) {
                if (menuSteps.hasOwnProperty(property)) {
                    if (tabNumber == menuSteps[property]) {
                        return property;
                    }
                }
            }

            return 'general-info-tab';
        }
    };

    var canApplyForJobResult = {
        allowed: 0,
        alreadyApplied: 1,
        jobExpired: 2,
        maxNumberOfApplicationsReached: 4,
        employeeIdCheckNeeded: 5,
        didNotAcceptTermsAndPrivacy: 6
    };

    function ApplicationViewModel() {

        var self = OnlineApp.ViewModels.Base.CompositeEditableViewModel.apply(this, arguments) || this;

        /*
            Private members.
        */

        var isChildViewModelsLoaded = false;

        var navigationMenuController = OnlineApp.Controllers.navigationMenuController,
            navigationController = OnlineApp.Controllers.navigationController,
            layoutHelper = OnlineApp.Helpers.layoutHelper,
            notificationController = OnlineApp.Controllers.notificationController;

        var pageScrollService = gJobs.pageScrollService;

        // reveal some parts
        self.navigationController = navigationController;

        // initialization of these view-models should be postponed until all settings are loaded

        function initChildViewModels() {
            var vm = OnlineApp.ViewModels;

            if (isChildViewModelsLoaded) {
                return;
            }

            if (vm.TestDataViewModel) {
                self.testDataViewModel = new vm.TestDataViewModel();
            }

            if (vm.DefinitionsViewModel) {
                self.definitionsViewModel = new vm.DefinitionsViewModel(true);
            }

            if (vm.ImportResumeViewModel) {
                self.importResumeViewModel = new vm.ImportResumeViewModel();
            }

            if (vm.AttachmentsViewModel) {
                self.attachmentsViewModel = new vm.AttachmentsViewModel();
            }

            if (vm.GeneralInfoViewModel) {
                self.generalInfoViewModel = new vm.GeneralInfoViewModel();
            }

            if (vm.ChangePasswordViewModel) {
                self.changePasswordViewModel = new vm.ChangePasswordViewModel();
            }

            if (vm.EducationViewModel) {
                self.educationViewModel = new vm.EducationViewModel();
            }

            if (vm.WorkExperienceViewModel) {
                self.workExperienceViewModel = new vm.WorkExperienceViewModel();
            }

            if (vm.Questions.QuestionsViewModel) {
                self.questionsViewModel = new vm.Questions.QuestionsViewModel();
            }

            if (vm.AdditionalInfoViewModel) {
                self.additionalInfoViewModel = new vm.AdditionalInfoViewModel(self.tabSettings, self.applicationSettings);
            }

            if (vm.ReferencesViewModel) {
                self.referencesViewModel = new vm.ReferencesViewModel({
                    isEReferencesEnabled: self.tabSettings.acceptEReferences() && self.employerSettings.isEReferencesEnabled,
                    minimumReferencesCount: self.tabSettings.eRefRequiredReferences(),
                    maximumReferencesCount: self.maximumReferencesCount()
                });
            }

            if (vm.PaymentViewModel) {
                self.paymentViewModel = new vm.PaymentViewModel();
            }

            if (vm.ReviewViewModel) {
                self.reviewViewModel = new vm.ReviewViewModel();
            }

            if (vm.CompleteViewModel) {
                self.completeViewModel = new vm.CompleteViewModel();
            }

            isChildViewModelsLoaded = true;


            (function () {

                var viewModels = [
                    self.generalInfoViewModel,
                    self.educationViewModel,
                    self.workExperienceViewModel,
                    self.additionalInfoViewModel,
                    self.referencesViewModel,
                    self.questionsViewModel,
                    self.attachmentsViewModel
                ];

                var existingViewModels = ko.utils.arrayFilter(viewModels, function (viewModel) {
                    return !!viewModel;
                });


                self.addParts(existingViewModels);
            })();
        }


        // init settings

        function initSettings(data) {
            self.tabSettings.fromDataModel(data.applicationTemplate);
            self.showPaymentTab(data.isPaymentEnabled);

            var fieldSettings = OnlineApp.Settings.populateFieldSettings(data.fieldSettings || []);
            $.extend(OnlineApp.FieldSettings, fieldSettings);

            var appSettings = OnlineApp.Settings.populateApplicationSettings(data.applicationSettings || []);
            self.applicationSettings = appSettings;

            var customFields = OnlineApp.Settings.populateCustomFields(data.customFields || []);
            self.customFields(customFields);

            self.maximumReferencesCount(data.maximumReferencesCount);

            $.extend(self.employerSettings, data.employerSettings);
        }

        function getHtmlTemplates() {
            // prevent template re-loading
            var promise = $.when();

            if (!self.isHtmlTemplateLoaded()) {
                promise = OnlineApp.Services.authenticationService.getHtmlTemplates()
                    .done(function (layout) {
                        // place templates into DOM
                        $('#onlineapp-template-container').html(layout);
                        self.isHtmlTemplateLoaded(true);
                    })
                    .fail(function () {
                        toastr.warning(Resources.NotificationMessages.ServerConnectionFailed);
                    });
            }

            return promise;
        }

        function getActiveJobApplication(base, data) {
            var rtvm = self.resumeTemplateViewModel;

            // invoke html templates loading, when done - select first tab by default (navigation to step is performed afterwards)
            var onAppDataLoadComplete = function () {
                // common actions
                navigationController.enableMenuTabs();

                navigationController.attachHandlersToNextBtns();

                // everything is loaded and resume template is applied
                rtvm.isResumeTemplateApplied(true);

                $(document).trigger(Events.CommonEventsNames.ApplicationLoaded);
            };

            var loadHandler = function () {
                // load data
                // execute only if job contains existing template and fieldSettings,
                // resumeTemplateId is defined and draft job application created

                layoutHelper.showOnlineAppInnerSpinner(true);

                return OnlineApp.Services.dataService
                    .loadApplicationData(self.jobId(), rtvm.resumeTemplateId())
                    .done(function () {
                        base();

                        // perform after load activities
                        onAppDataLoadComplete();
                    })
                    .fail(function () {
                        toastr.warning(Resources.NotificationMessages.ServerConnectionFailed);
                    })
                    .always(function () {
                        layoutHelper.hideOnlineAppInnerSpinner(true);
                        setTimeout(function () {
                            document.activeElement.blur();
                            gJobs.skipToContentService.showOnNextTab();
                        })
                    });
            };

            var processTemplateChange = function (template) {
                layoutHelper.showOnlineAppInnerSpinner(true);

                var applySelectedTemplate = function () {
                    loadHandler(true)
                        .done(function () {
                            // navigate to info tab
                            navigationController.activateTabById('general-info-tab');

                            loadCompleteCallback();
                        })
                        .fail(function () {
                            toastr.warning(Resources.NotificationMessages.ServerConnectionFailed);
                        })
                        .always(function () {
                            layoutHelper.hideOnlineAppInnerSpinner(true);

                            notifyApplicationOverview();
                        });
                };

                // if draft already exists - update current template for draft
                if (rtvm.draftJobAppId()) {
                    rtvm.addResumeTemplateToDraft(template, self.jobId())
                        .done(function () {
                            applySelectedTemplate();
                        })
                        .fail(function () {
                            toastr.warning(Resources.NotificationMessages.ServerConnectionFailed);
                        });
                }
                    // otherwise - create new draft and populate it by template id
                else {
                    var showWarning = function () {
                        toastr.warning(Resources.NotificationMessages.ServerConnectionFailed);
                    };

                    var queryParams = window.url.get(window.location.search.slice(1));
                    var jobReferrer = queryParams.referrer;

                    var departmentFolder = AgencyPages
                        && AgencyPages.pageInfoService
                        && AgencyPages.pageInfoService.getCurrentDepartmentFolderName();

                    rtvm.getActiveOrNewJobApplication(template, self.jobId(), self.employeeId(), jobReferrer, departmentFolder)
                        .done(function (draft) {
                            rtvm.draftJobAppId(draft.id);

                            self.referer(draft.referer);

                            applySelectedTemplate();
                        })
                        .fail(showWarning);
                }
            };

            var loadCompleteCallback = function () {
                // 5. finish loading
                self.isAppSettingsLoaded(true);

                navigationController.navigate();

                self.validate();
            };

            var notifyApplicationOverview = function (setFocusOnVisibleElement){
                    var navInfo = navigationMenuController.getNavigationInfo();
                    var message = 'You are currently on the ' + navInfo.activeTabName +
                        ' tab which is the tab ' + navInfo.activeTabIndex +
                        ' out of ' + navInfo.totalTabCount +
                        ' for your job application';

                    if (setFocusOnVisibleElement)
                    {
                        gJobs.screenReadersService.setAriaLiveNotification(message);
                    }
                    else
                    {
                        setTimeout(function() {
                            gJobs.screenReadersService.setNotificationWithFocusSaving({
                                $element: navInfo.activeTabElement,
                                text: message
                            });
                        });
                    }
            }

            var promise = OnlineApp.Services.jobApplicationService.getActiveJobApplication(self.jobId())
                .done(function (draft) {
                    var forceLoad;
                    var currentStep = undefined;

                    // if draft exists - use draft to populate app state,
                    // otherwise - populate templates list based on data
                    if (draft && draft.id) {
                        // set existing draft job app id
                        rtvm.draftJobAppId(draft.id);

                        // set referer link
                        self.referer(draft.referer);

                        // use draft resume template id as default
                        if (draft.resumeTemplateId) {
                            forceLoad = true;
                            rtvm.resumeTemplateId(draft.resumeTemplateId);
                            rtvm.processExistingUserTemplates(data.existingUserTemplates, {
                                ignoreNavigation: true
                            });
                        } else {
                            // if no template found - process template list
                            forceLoad = rtvm.processExistingUserTemplates(data.existingUserTemplates, {
                                manyTemplatesCallback: function () {
                                    self.navigationController.activateFirstTab();
                                    self.navigationController.disableMenuTabs();
                                }
                            });
                        }
                    } else {
                        // if no draft found - process template list
                        forceLoad = rtvm.processExistingUserTemplates(data.existingUserTemplates, {
                            noTemplatesCallback: function () {
                                self.navigationController.activateFirstTab();
                                self.navigationController.disableMenuTabs();
                            },
                            manyTemplatesCallback: function () {
                                self.navigationController.activateFirstTab();
                                self.navigationController.disableMenuTabs();
                            }
                        });

                        $(document).one(OnlineApp.Events.CommonEventsNames.ApplicationRendered, function() {
                            OnlineApp.Services.applicationTimingService.init();
                        });
                    }

                    // if some template was selected - force data and html templates load
                    if (forceLoad) {
                        if (rtvm.draftJobAppId()) {
                            // load data
                            loadHandler()
                                .done(function () {
                                    // store last menu step
                                    if (draft.currentStep == null || draft.currentStep < 3) {
                                        currentStep = 'general-info-tab'; //redirect to General Info tab if currentStep value is not valid
                                    } else {
                                        currentStep = menuSteps.getKey(draft.currentStep);

                                        // If at the payment card step, will want to redirect back to certify with the initials.
                                        if ((currentStep === 'submit-tab') || (currentStep === 'payment-tab'))
                                            currentStep = 'review-tab';
                                    }

                                    navigationController.activateTabById(currentStep);

                                    loadCompleteCallback();

                                    notifyApplicationOverview();
                                })
                                .fail(function () {
                                    toastr.warning(Resources.NotificationMessages.ServerConnectionFailed);
                                });
                        } else {
                            // force load, but create draft first
                            processTemplateChange(self.resumeTemplateViewModel.resumeTemplateId());
                        }
                    } else {
                        loadCompleteCallback();

                        notifyApplicationOverview(true);
                    }

                    // subscribe to resumeTemplateId changed
                    self.resumeTemplateViewModel.resumeTemplateId.subscribe(function (value) {
                        if (value) {
                            processTemplateChange(value);
                        }
                    });
                });

            return promise;
        }

        function loadApplication(base) {
            // show spinner for loading
            layoutHelper.showOnlineAppInnerSpinner(true);

            if (self.resumeTemplateViewModel.isResumeTemplateApplied()) {
                // resume template is already defined and applied
                // application settings loaded
                // just reload child data
                base();
                navigationController.navigate();

                var navInfo = navigationMenuController.getNavigationInfo();
                var message = 'You are currently on the ' + navInfo.activeTabName +
                    ' tab which is the tab ' + navInfo.activeTabIndex +
                    ' out of ' + navInfo.totalTabCount +
                    ' for your job application';
                gJobs.screenReadersService.setNotificationWithFocusSaving({
                    $element: navInfo.activeTabElement,
                    text: message,
                    returnFocusBack: true
                });

                layoutHelper.hideOnlineAppInnerSpinner(true);

                return;
            }

            OnlineApp.Services.authenticationService
                .getAppSettings(OnlineApp.ViewModels.applicationViewModel.jobId())
                .fail(function () {
                    toastr.warning(Resources.NotificationMessages.LoadTemplateFail);
                })
                .done(function (data) {
                    // process template here
                    if (data == null) {
                        toastr.warning(Resources.NotificationMessages.LoadTemplateFail);

                        return;
                    }

                    // 1. initialize wizard steps settings
                    initSettings(data);

                    // 2. initialize child view-models afters receiving all application settings
                    initChildViewModels();

                    // 3. load all html templates as a single bundle
                    getHtmlTemplates()
                        .done(function () {
                            // 4. request active draft job application
                            getActiveJobApplication(base, data)
                                .fail(function () {
                                    toastr.warning(Resources.NotificationMessages.ServerConnectionFailed);
                                })
                                .always(function () {
                                    layoutHelper.hideOnlineAppInnerSpinner(true);
                                });
                        });

                    layoutHelper.hideOnlineAppInnerSpinner();
                });
        }

        /*
            Define child view-models
            todo: refactor this code as soon as OnlineApp scripts would be separated from Jobs SignIn
        */
        (function () {
            var vm = OnlineApp.ViewModels;

            if (vm.ChangePasswordViewModel) {
                self.changePasswordViewModel = new vm.ChangePasswordViewModel();
            }

            if (vm.LoginViewModel) {
                self.loginViewModel = new vm.LoginViewModel();
            }

            if (vm.ResumeTemplateViewModel) {
                self.resumeTemplateViewModel = new vm.ResumeTemplateViewModel();
            }

            if (vm.CheckEmployeeIdViewModel) {
                self.checkEmployeeIdViewModel = new vm.CheckEmployeeIdViewModel();
            }
        })();

        /*
            Public members.
        */
        self.tabSettings = new OnlineApp.Settings.TabSettings();
        self.customFields = ko.observable();
        self.maximumReferencesCount = ko.observable(null);

        self.isAuthorized = ko.observable(false);
        self.isReadyForShow = ko.observable(false);
        self.isAppSettingsLoaded = ko.observable(false);
        self.isHtmlTemplateLoaded = ko.observable(false);
        self.isHtmlTemplateRendered = ko.observable(false);
        self.showPaymentTab = ko.observable(false);

        self.applicationSubmitted = ko.observable(false);
        self.submitTabDisabled = ko.observable(true);
        self.alreadyApplied = ko.observable(false);
        self.reapplyMessage = ko.observable();
        self.jobExpired = ko.observable(false);
        self.maxNumberOfApplicationsReached = ko.observable(false);
        self.didNotAcceptTermsAndPrivacy = ko.observable(false);

        self.isEmployeeIdCheckNeeded = ko.observable(false);
        self.isEmployeeIdValid = ko.observable(false);
        self.employeeId = ko.observable('');

        self.recoverUserNameUrl = '/OnlineApplication/User/RecoverUserName';
        self.resetPasswordUrl = '/OnlineApplication/User/ResetPassword';
        self.helpAndSupportUrl = '/Home/ApplicationGuide';

        self.initialTabId = ko.observable();

        self.submittedApplicationId = ko.observable('');

        self.isFieldRequired = function (fieldName) {
            return OnlineApp.FieldSettings[fieldName] && OnlineApp.FieldSettings[fieldName].required;
        };

        self.load = (function (base) {
            return function () {
                if (self.jobId() === undefined)
                {
                    var currentJobId = gJobs.jobsDetails.getCurrentJobId();
                    self.jobId(currentJobId);
                }

                // check if user is already applied for this job
                OnlineApp.Services.authenticationService
                    .canApplyForJob(self.jobId())
                    .done(function (result) {
                        if (result.canApply === canApplyForJobResult.allowed) {
                            self.jobExpired(false);
                            self.alreadyApplied(false);
                            self.maxNumberOfApplicationsReached(false);
                            self.didNotAcceptTermsAndPrivacy(false);

                            // start loading app
                            loadApplication(base);
                        } else if (result.canApply === canApplyForJobResult.alreadyApplied) {
                            self.jobExpired(false);
                            self.maxNumberOfApplicationsReached(false);
                            self.alreadyApplied(true);
                            self.reapplyMessage(result.message);

                            layoutHelper.hideOnlineAppSpinner();

                            appNotLoadedNotification($('.already-applied'));

                            $(document).trigger(OnlineApp.Events.CommonEventsNames.ApplicationRendered);
                        } else if (result.canApply === canApplyForJobResult.jobExpired) {
                            self.alreadyApplied(false);
                            self.maxNumberOfApplicationsReached(false);
                            self.jobExpired(true);

                            layoutHelper.hideOnlineAppSpinner();

                            appNotLoadedNotification($('.job-expired'));

                            $(document).trigger(OnlineApp.Events.CommonEventsNames.ApplicationRendered);
                        } else if (result.canApply === canApplyForJobResult.maxNumberOfApplicationsReached) {
                            self.alreadyApplied(false);
                            self.jobExpired(false);
                            self.maxNumberOfApplicationsReached(true);

                            layoutHelper.hideOnlineAppSpinner();

                            appNotLoadedNotification($('.max-number-of-applications-reached'));

                            $(document).trigger(OnlineApp.Events.CommonEventsNames.ApplicationRendered);
                        }
                        if (result.canApply === canApplyForJobResult.employeeIdCheckNeeded) {
                            self.jobExpired(false);
                            self.alreadyApplied(false);
                            self.maxNumberOfApplicationsReached(false);

                            layoutHelper.hideOnlineAppSpinner();

                            if (self.isEmployeeIdValid()) {
                                loadApplication(base);
                            } else {
                                self.isEmployeeIdCheckNeeded(true);

                                gJobs.skipToContentService.showOnNextTab();
                                gJobs.screenReadersService
                                    .setAriaLiveNotification($('#employee-id-check .description').text());

                                self.isEmployeeIdValid.subscribe(function (value) {
                                    if (value) {
                                        self.isEmployeeIdCheckNeeded(false);
                                        loadApplication(base);
                                    }
                                });
                            }
                        }
                        if (result.canApply === canApplyForJobResult.didNotAcceptTermsAndPrivacy) {
                            self.jobExpired(false);
                            self.alreadyApplied(false);
                            self.maxNumberOfApplicationsReached(false);
                            self.didNotAcceptTermsAndPrivacy(true);

                            layoutHelper.hideOnlineAppSpinner();

                            $(document).trigger(OnlineApp.Events.CommonEventsNames.ApplicationRendered);
                        }
                    })
                    .fail(function () {
                        toastr.warning("Unable to verify whether user has already applied for job #" + self.jobId());
                    });

                function appNotLoadedNotification($element) {
                    $element.attr('aria-label', $('#applyButton, .job-apply-tab').attr('data-selected-notification') + $element.text()).focus();

                    gJobs.skipToContentService.showOnNextTab();
                }
            };
        })(self.load);

        self.validate = function () {
            var isValid = true;

            if (!self.generalInfoViewModel.validate()
                | (self.tabSettings.acceptEducationHistory() && !self.educationViewModel.validate())
                | (self.tabSettings.acceptWorkHistory() && !self.workExperienceViewModel.validate())
                | !self.questionsViewModel.validate()
                | (self.tabSettings.showAdditionalMenu() && !self.additionalInfoViewModel.validate())
                | (self.tabSettings.acceptReference() && !self.referencesViewModel.validate())
                | (self.tabSettings.acceptAttachResume() && !self.attachmentsViewModel.validate())) {

                isValid = false;
            }
            return isValid;
        };

        self.validateBeforePayment = function () {
            var isValid = true;

            if (!self.generalInfoViewModel.validate()
                | (self.tabSettings.acceptEducationHistory() && !self.educationViewModel.validate())
                | (self.tabSettings.acceptWorkHistory() && !self.workExperienceViewModel.validate())
                | !self.questionsViewModel.validate()
                | (self.tabSettings.showAdditionalMenu() && !self.additionalInfoViewModel.validate())
                | (self.tabSettings.acceptReference() && !self.referencesViewModel.validate())
                | (self.tabSettings.acceptAttachResume() && !self.attachmentsViewModel.validate())) {

                isValid = false;
            }

            return isValid;
        };

        self.isShowAllValidationIcons = ko.observable(false);
        self.isShowCertifyValidationIcon = ko.observable(false);
        self.referer = ko.observable();

        /* TODO (Alexei Skachykhin): Implement is as a ViewModel. */
        self.employerSettings = {
            doNotCollectHighSchoolEduDates: false,
            doNotCollectEducationDates: false,
            isEReferencesEnabled: false
        };

        self.jobId = ko.observable();

        self.showAuthorizedMenu = ko.computed(function () {
            return self.isAuthorized() &&
                   self.isHtmlTemplateLoaded() &&
                   self.isAppSettingsLoaded() &&
                   !self.applicationSubmitted() &&
                   (!self.isEmployeeIdCheckNeeded() || self.isEmployeeIdValid());
        });

        self.showAuthorizedContent = ko.computed(function () {
            return self.isAuthorized() &&
                   self.isHtmlTemplateLoaded() &&
                   self.isAppSettingsLoaded() &&
                   (!self.isEmployeeIdCheckNeeded() || self.isEmployeeIdValid());
        });

        self.isAuthorized.subscribe(function (value) {
            //If user is not authenticated resume template request is required and existing template is not valid anymore
            if (!value) {
                self.isAppSettingsLoaded(false);
            }

            var appSignInViewModel = OnlineApp.ViewModels.applicationSignInViewModel;
            if (appSignInViewModel) {
                appSignInViewModel.isAuthorized(value);
            }
        });

        self.applicationSubmitted.subscribe(function (value) {
            if (value) {
                $(document).trigger(Events.CommonEventsNames.ApplicationSubmitted);

                /* hack for flyout opening */
                try {
                    rx._.currentPage = {};
                    for (var i = 0; i < rx._.pages.length; i++) {
                        if (rx._.pages[i].check()) {
                            rx._.currentPage = rx._.pages[i];
                            break;
                        }
                    }

                    OnlineApp.Services.authenticationService.getUserData().done(function (data) {
                        rx.trigger({
                            triggerName: 'apply',
                            applyFlowId: self.submittedApplicationId()
                        });
                    });
                }
                catch (e) {
                    console.log("Recruitics error", e);
                }

                var referer = self.referer();
                var eventLabel = referer ? referer : null;
                var eventName = 'Application Submitted';

                var trackers = gJobs.common.analytics.isGA4Enabled && gJobs.common.analytics.ga4Trackers.map(t => t.name) || gJobs.common.analytics.trackers;
                if (trackers.indexOf('customEmployerTracker') !== -1) {
                    gJobs.common.analytics.setProperties({
                        properties: { dimension5: self.submittedApplicationId() },
                        name: 'customEmployerTracker'
                    });
                }

                gJobs.common.analytics.trackApplicationEvent({
                    action: eventName,
                    eventLabel: eventLabel,
                    sendToAllTrackers: true
                });
            }
        });

        self.setCurrentStep = function (tabId) {
            var menuStep = self.definitionsViewModel.menuStep.findItemByField('tabId', tabId);
            if (menuStep.id == self.definitionsViewModel.menuStepIds.payment)
                menuStep.id = self.definitionsViewModel.menuStepIds.review;
            // Certify/SubmitStep check
            if ((menuStep.id == self.definitionsViewModel.menuStepIds.submit) && (OnlineApp.ViewModels.applicationViewModel.completeViewModel.submit.isPaymentEnabled()))
                OnlineApp.ViewModels.applicationViewModel.completeViewModel.submit.CheckAppForSubmit( OnlineApp.ViewModels.applicationViewModel.jobId());
            if (menuStep.id == self.definitionsViewModel.menuStepIds.review){
                self.isShowAllValidationIcons(true);
            }

            OnlineApp.Services.auditService.setCurrentStep(self.jobId(), menuStep.id);
        };

        self.getCurrentTab = function () {
            return navigationMenuController.getActiveTab();
        }

        self.attachHandlersToNavigationLinks = function() {

            function getTargetViewModel (tabName) {
                var viewModel;
                var tabIds = navigationMenuController.tabIds;

                if (tabName == tabIds.submitInfo) {
                    viewModel = self.completeViewModel;
                } else if (tabName == tabIds.payment) {
                    viewModel = self.paymentViewModel;
                }

                return viewModel;
            }

            var canNavigateAway = function (previousViewModel) {
                var isInEditMode = previousViewModel.isInEditMode();
                var areUncommittedChangesValid = previousViewModel.validateChanges();
                var isEditModeOnlyTab = previousViewModel == self.questionsViewModel
                                     || previousViewModel == self.attachmentsViewModel
                                     || previousViewModel == self.paymentViewModel;

                return (!isInEditMode || isEditModeOnlyTab) && areUncommittedChangesValid;
            };

            var canNavigateAwayCallback =  function (previousViewModel) {
                var canNagivate = canNavigateAway(previousViewModel);

                if (canNagivate && (previousViewModel == self.questionsViewModel)) {
                    previousViewModel.agencyWideQuestionsViewModel.saveChanges(null, true);
                    previousViewModel.supplementaryQuestionsViewModel.saveChanges(null, true);
                    self.questionsViewModel.switchSectionsToReadonlyMode();
                    self.isShowCertifyValidationIcon(true);
                }
            };

            var canNavigateToTab = function(tabName) {
                var viewModel = getTargetViewModel(tabName);
                return !viewModel || (viewModel.isTabAccesible && viewModel.isTabAccesible());
            }

            var canNotNavigateToTabCallback = function(tabName) {
                var viewModel = getTargetViewModel(tabName);

                if (viewModel && viewModel.setCanNotAccessTabNotification) {
                    self.isShowAllValidationIcons(true);
                    viewModel.setCanNotAccessTabNotification();
                }
            }

            navigationMenuController.onTab('shown', function (e) {
                if (!e || !e.target) {
                    return;
                }

                navigationController.updateUrl();

                var href = $(e.target).attr('href');
                self.setCurrentStep(href);

                setTimeout(function () {
                    layoutHelper.tabbing.updateIndices();
                });

                $(document).trigger(OnlineApp.Events.CommonEventsNames.ApplicationRendered);
            });

            navigationMenuController.onTab('showNextTab', function (e) {
                if (e.viewModel) {
                    var previousViewModel = e.viewModel;

                    var isViewModelEditable = !!previousViewModel.isInEditMode;
                    if (isViewModelEditable) {
                        if (!canNavigateAway(previousViewModel)) {
                            if (previousViewModel !== self.reviewViewModel) {
                                var notificationController = OnlineApp.Controllers.notificationController;

                                var confirmCallback = function() {
                                    if (typeof (previousViewModel.discardChanges) === 'function') {
                                        e.dontScrollAfterEditing = true;
                                        previousViewModel.discardChanges(null, e);
                                    }
                                    previousViewModel.isVisited(true);

                                    e.callback();
                                };

                                var cancelCallback = function() {
                                    layoutHelper.tabbing.activateFirstElement();
                                };

                                var activeTabId = '#' + navigationMenuController.getActiveTab().tabId;
                                var isQuestionsTab = activeTabId === navigationMenuController.tabIds.questions;

                                if (!isQuestionsTab && !previousViewModel.isDataChanged()) {
                                    confirmCallback();
                                } else {
                                    var subHeaderText = isQuestionsTab ?
                                        'You have required questions unanswered on this page.' :
                                        '';
                                    notificationController.showConfirmNavigationNotification(
                                        confirmCallback,
                                        cancelCallback,
                                        subHeaderText
                                    );
                                }

                                // scroll to error or to edit dialog
                                navigationController.editDialogScrolling();
                                navigationController.navigate();
                            }
                            else {
                                e.callback();
                            }

                            return false;
                        }

                        var isValid = previousViewModel.validate();

                        if (previousViewModel == self.questionsViewModel && isValid) {
                            previousViewModel.saveChanges();
                        }
                    }

                    previousViewModel.isVisited(true);

                    e.callback();
                }
            });

            navigationMenuController.attachHandlersToNavigationMenu(
                canNavigateAway,
                canNavigateAwayCallback,
                canNavigateToTab,
                canNotNavigateToTabCallback
            );

            self.navigationController.initialize();

            self.questionsViewModel.initSwitchingTabsBehavior();
        }

        self.layoutLoaded = function () {
            if (!OnlineApp.ViewModels.applicationViewModel.isAuthorized()) {
                layoutHelper.hideOnlineAppSpinner();
            }
        };

        self.menuLoaded = function () {
            // obsolete? verify and remove method ans subscription to it
            self.isHtmlTemplateRendered(true);

            layoutHelper.updateFloatingMenu();

            $(window).resize(function () {
                layoutHelper.updateFloatingMenu();
            });
        };

        self.loginLoaded = function () {
            $(document).trigger('ApplicationSignInViewModel:ViewLoaded');
        };

        self.checkIfShouldCreateNewAccount = function () {
            if (sessionStorage.getItem('shouldCreateNewAccount')) {
                sessionStorage.removeItem('shouldCreateNewAccount');

                self.loginViewModel.toggleModels(null, null);
            }
        };

        self.FocusinValidationVisibleChange = function (event, field) {
            if (event.type == 'focusin') {
                field.isValidationMessageVisible(false);
            } else if (event.type == 'focusout') {
                if (field.hasError()) {
                    field.isValidationMessageVisible(true);
                }
            }
        };

        self.FocusinTooltipVisibleChange = function (data, event) {
            if (event.type === 'focusin') {
                $(event.target).siblings('span[data-toggle=popover]').popover('show');
            } else if (event.type === 'focusout') {
                $(event.target).siblings('span[data-toggle=popover]').popover('hide');
            }
        };

        /* events processing */
        $(document)
            .off(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.EditableItemBeginEdit))
            .off(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.EditItemComplete))
            .off(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.EditableCollectionItemDiscarded))
            .off(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.TryRemoveItem))
            .off(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.RemoveItemComplete))
            .off(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.PreSaveValidationFailed))
            .off(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.ResumeImportComplete))
            .on(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.EditableItemBeginEdit), function (e, data) {
                layoutHelper.tabbing.updateIndices();
            })
            .on(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.EditItemComplete), function (e) {
                if (!e.dontScrollAfterEditing) {
                    navigationController.scrollToView(e.targetMetrics);
                }
                layoutHelper.tabbing.updateIndices();
            })
            .on(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.EditableCollectionItemDiscarded), function (e) {
                if (!e.dontScrollAfterEditing) {
                    navigationController.scrollToView(e.targetMetrics);
                }
                layoutHelper.tabbing.updateIndices();

                if (e.targetMetrics && e.targetMetrics.element)
                    e.targetMetrics.element.focus();
            })
            .on(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.TryRemoveItem), function (e) {
                notificationController.showDeleteItemNotification(function () {
                    e.successCallback();
                }, function() {
                });
            })
            .on(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.RemoveItemComplete), function (e) {
                if (e.itemsCount === 1) {
                    navigationController.scrollTabTopToView();
                } else {
                    navigationController.scrollClosestBoxToView(e.target, e.index === e.itemsCount - 1);
                }

                setTimeout(function () {
                    layoutHelper.tabbing.updateIndices();
                });
            })
            .on(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.PreSaveValidationFailed), function (e) {
                navigationController.scrollToTopValidationError(e.target);
            })
            .on(self.scopeEventToClass(OnlineApp.Events.CommonEventsNames.ResumeImportComplete), function (e) {
                self.navigationController.deinitialize();
                self.resumeTemplateViewModel.showResumeTab(false);

                if (e.source === "fileUpload") {
                    self.load();
                }
            });

        /* Leave App confirmation processing */
        self.callbackEventName = Events.CommonEventsNames.CloseFlyout;

        self.isHideAppEvent = ko.observable(false);
        self.isAppHidden = ko.observable(false);

        /* Common events processing */
        var leaveAppHandler = function () {
            notificationController.showAppIncompleteNotification(function () {
                self.leaveAppClick();
            });
        };

        $(document)
            .off(Events.CommonEventsNames.TryCloseFlyout)
            .off(Events.CommonEventsNames.HideApply)
            .off(Events.CommonEventsNames.ShowApply)
            .off(Events.CommonEventsNames.FlyoutClosing)
            .off(Events.CommonEventsNames.TermsAndPrivacyAccepted)
            .on(Events.CommonEventsNames.FlyoutClosing, function () {
                // Preventing flashing of Online Application, when opening another
                // job after successfull submit.
                self.isReadyForShow(false);
            })
            .on(Events.CommonEventsNames.TryCloseFlyout, function (e) {
                if (self.isAuthorized() && self.isAppSettingsLoaded() && !self.applicationSubmitted() && !self.jobExpired() && !self.isAppHidden()) {
                    e.canRaiseEvent = false;
                    self.callbackEventName = e.callbackEventName;

                    $(document).trigger(Events.CommonEventsNames.ShowOnlineApp);

                    self.isHideAppEvent(false);

                    leaveAppHandler();
                }
            })
            .on(Events.CommonEventsNames.HideApply, function (e) {
                if (self.isAuthorized() && self.isAppSettingsLoaded() && !self.applicationSubmitted() && !self.isAppHidden()) {
                    e.canRaiseEvent = false;
                    self.callbackEventName = e.callbackEventName;

                    self.isHideAppEvent(true);

                    leaveAppHandler();
                }
            })
            .on(Events.CommonEventsNames.ShowApply, function () {
                self.isAppHidden(false);
                self.isHideAppEvent(false);

                layoutHelper.tabbing.updateIndices();
            })
            .on(OnlineApp.Events.CommonEventsNames.ApplicationSubmit, function () {
                var $flyout = pageScrollService.getFlyoutScrollContainer();
                var $onlineApplicationBlock = $flyout.find('#online-application-block');

                navigationController.scrollElementToView($onlineApplicationBlock);

                $('#submitted-success-message').focus();
            })
            .on(Events.CommonEventsNames.ShowFlyout, function(){
                self.isReadyForShow(true);
            })
            .on(Events.CommonEventsNames.TermsAndPrivacyAccepted, function(){
                self.load();
            });

        self.leaveAppClick = function () {
            if (!layoutHelper.isOnlineAppInsideFlyout()) {
                // not flyout case
                // navigate to the list of incomplete/submitted applications
                navigationController.navigateToApplicationsPage();
                return;
            }

            if (self.isHideAppEvent()) {
                self.isAppHidden(true);
            } else {
                self.isAppSettingsLoaded(false);
            }

            if (self.callbackEventName) {
                $(document).trigger(self.callbackEventName);
            }

            $(document).trigger(OnlineApp.Events.CommonEventsNames.ApplicationClosed);
        };

        self.validateAndNavigateToTab = function (sourceViewModel, targetTabId, validatePayment, scrollIfNotValidated) {
            var event = jQuery.Event('showNextTab');
            var targetTab = $('a[href="' + targetTabId + '"]');
            event.viewModel = sourceViewModel;
            event.callback = function () {
                var isValid = self.validate();
                if (isValid) {
                    targetTab.tab('show');
                }
                else {
                    if (scrollIfNotValidated) {
                        navigationController.scrollToAndFocusFirstTabWithValidationError();
                    } else {
                        navigationController.navigateToFirstInvalidTab();
                    }
                }
            };
            targetTab.trigger(event);
        };

        self.showJobDetails = function () {
            if (layoutHelper.isOnlineAppInsideFlyout()) {
                navigationController.navigateToJobDetailsFlyout && navigationController.navigateToJobDetailsFlyout();
            }
        };

        self.tryShowCertifySubmitTab = function () {
            if (self.completeViewModel && self.completeViewModel.isVisibleSubmitStep()) {
                $(document).trigger(OnlineApp.Events.CommonEventsNames.CertifySubmitTabOpened);
            }
        };
    }

    OnlineApp.Namespace.extend('OnlineApp.ViewModels', {
        ApplicationViewModel: ApplicationViewModel,
        applicationSignInViewModel: OnlineApp.ViewModels.applicationSignInViewModel || OnlineApp.ViewModels.applicationViewModel,
        // TODO: on each job viewed - new instance of view models is created
        // Refactoring required to reduce number of created view models
        applicationViewModel: new ApplicationViewModel()
    });

    $(document).ready(function () {
        var app = OnlineApp.ViewModels.applicationViewModel;
        app.navigationController.setRoutingBehavior();        
        window.topResume.links.applicationAdvertisementText = window.location.hostname.indexOf("schooljobs") != -1 ? "How does your resume stack up? Submit your resume for a complimentary review with SchoolJobs.com partner TopResume." : "How does your resume stack up? Submit your resume for a complimentary review with GovernmentJobs.com partner TopResume.";
        OnlineApp.Services.authenticationService
            .isLoggedIn()
            .fail(function () {
                toastr.warning(Resources.NotificationMessages.ServerConnectionFailed);
            })
            .done(function (data) {
                if (data) {
                    app.isAuthorized(true);
                    app.load();
                } else {
                    app.isAuthorized(false);
                    OnlineApp.ViewModels.applicationViewModel.checkIfShouldCreateNewAccount();
                    $(document).trigger(OnlineApp.Events.CommonEventsNames.ApplicationRendered);
                }
            }).always(function () {
                app.isReadyForShow(true);
            });
    });
})(window);;
